
FanCtl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  0000117c  00001210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000117c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012c  00800136  00800136  00001246  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001246  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000012e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000963  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000030e  00000000  00000000  00001d17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000075c  00000000  00000000  00002025  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000378  00000000  00000000  00002784  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039e  00000000  00000000  00002afc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009e6  00000000  00000000  00002e9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003880  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 9f 03 	jmp	0x73e	; 0x73e <__vector_3>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 88 03 	jmp	0x710	; 0x710 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__vector_19>
      50:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__vector_20>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 0b 04 	jmp	0x816	; 0x816 <__vector_24>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e7       	ldi	r30, 0x7C	; 124
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 33       	cpi	r26, 0x36	; 54
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a6 e3       	ldi	r26, 0x36	; 54
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a2 36       	cpi	r26, 0x62	; 98
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 76 01 	call	0x2ec	; 0x2ec <main>
      9e:	0c 94 bc 08 	jmp	0x1178	; 0x1178 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_init>:
	{
		uart_send_byte(*data);
		data++;
	}
	UCSR0B |= (1<<TXCIE0); //uart0: Enable tx complete interrupt
}
      a6:	89 e1       	ldi	r24, 0x19	; 25
      a8:	90 e0       	ldi	r25, 0x00	; 0
      aa:	90 93 c5 00 	sts	0x00C5, r25
      ae:	80 93 c4 00 	sts	0x00C4, r24
      b2:	8e e0       	ldi	r24, 0x0E	; 14
      b4:	80 93 c2 00 	sts	0x00C2, r24
      b8:	08 95       	ret

000000ba <uart_init_tx>:
      ba:	e1 ec       	ldi	r30, 0xC1	; 193
      bc:	f0 e0       	ldi	r31, 0x00	; 0
      be:	80 81       	ld	r24, Z
      c0:	88 64       	ori	r24, 0x48	; 72
      c2:	80 83       	st	Z, r24
      c4:	08 95       	ret

000000c6 <uart_send_byte>:
      c6:	e0 91 07 01 	lds	r30, 0x0107
      ca:	f0 91 08 01 	lds	r31, 0x0108
      ce:	81 93       	st	Z+, r24
      d0:	82 e0       	ldi	r24, 0x02	; 2
      d2:	ec 33       	cpi	r30, 0x3C	; 60
      d4:	f8 07       	cpc	r31, r24
      d6:	10 f0       	brcs	.+4      	; 0xdc <uart_send_byte+0x16>
      d8:	ec e3       	ldi	r30, 0x3C	; 60
      da:	f1 e0       	ldi	r31, 0x01	; 1
      dc:	20 91 07 01 	lds	r18, 0x0107
      e0:	30 91 08 01 	lds	r19, 0x0108
      e4:	80 91 09 01 	lds	r24, 0x0109
      e8:	90 91 0a 01 	lds	r25, 0x010A
      ec:	28 17       	cp	r18, r24
      ee:	39 07       	cpc	r19, r25
      f0:	29 f4       	brne	.+10     	; 0xfc <uart_send_byte+0x36>
      f2:	a1 ec       	ldi	r26, 0xC1	; 193
      f4:	b0 e0       	ldi	r27, 0x00	; 0
      f6:	8c 91       	ld	r24, X
      f8:	80 62       	ori	r24, 0x20	; 32
      fa:	8c 93       	st	X, r24
      fc:	f0 93 08 01 	sts	0x0108, r31
     100:	e0 93 07 01 	sts	0x0107, r30
     104:	80 91 38 01 	lds	r24, 0x0138
     108:	90 91 39 01 	lds	r25, 0x0139
     10c:	a0 91 3a 01 	lds	r26, 0x013A
     110:	b0 91 3b 01 	lds	r27, 0x013B
     114:	01 96       	adiw	r24, 0x01	; 1
     116:	a1 1d       	adc	r26, r1
     118:	b1 1d       	adc	r27, r1
     11a:	80 93 38 01 	sts	0x0138, r24
     11e:	90 93 39 01 	sts	0x0139, r25
     122:	a0 93 3a 01 	sts	0x013A, r26
     126:	b0 93 3b 01 	sts	0x013B, r27
     12a:	08 95       	ret

0000012c <uart_write_async>:

///Asynchronously transmits the given null terminated string via the UART
void uart_write_async(char* str)
{
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
     130:	ec 01       	movw	r28, r24
	UCSR0B &= ~(1<<TXCIE0); //uart0: Disable tx complete interrupt
     132:	e1 ec       	ldi	r30, 0xC1	; 193
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	80 81       	ld	r24, Z
     138:	8f 7b       	andi	r24, 0xBF	; 191
     13a:	80 83       	st	Z, r24
	while(*str)
     13c:	88 81       	ld	r24, Y
     13e:	88 23       	and	r24, r24
     140:	31 f0       	breq	.+12     	; 0x14e <uart_write_async+0x22>
     142:	21 96       	adiw	r28, 0x01	; 1
	{
		uart_send_byte((unsigned char)*str);
     144:	0e 94 63 00 	call	0xc6	; 0xc6 <uart_send_byte>

///Asynchronously transmits the given null terminated string via the UART
void uart_write_async(char* str)
{
	UCSR0B &= ~(1<<TXCIE0); //uart0: Disable tx complete interrupt
	while(*str)
     148:	89 91       	ld	r24, Y+
     14a:	81 11       	cpse	r24, r1
     14c:	fb cf       	rjmp	.-10     	; 0x144 <uart_write_async+0x18>
	{
		uart_send_byte((unsigned char)*str);
		str++;
	}
	UCSR0B |= (1<<TXCIE0); //uart0: Enable tx complete interrupt
     14e:	e1 ec       	ldi	r30, 0xC1	; 193
     150:	f0 e0       	ldi	r31, 0x00	; 0
     152:	80 81       	ld	r24, Z
     154:	80 64       	ori	r24, 0x40	; 64
     156:	80 83       	st	Z, r24
}
     158:	df 91       	pop	r29
     15a:	cf 91       	pop	r28
     15c:	08 95       	ret

0000015e <uart_irq_tx>:

///This function must be called when the overlying application handles the
///UART tx interrupt.
void uart_irq_tx(void)
{
	if(uart_tx_curpos_ring != uart_tx_targpos_ring)
     15e:	e0 91 09 01 	lds	r30, 0x0109
     162:	f0 91 0a 01 	lds	r31, 0x010A
     166:	80 91 07 01 	lds	r24, 0x0107
     16a:	90 91 08 01 	lds	r25, 0x0108
     16e:	e8 17       	cp	r30, r24
     170:	f9 07       	cpc	r31, r25
     172:	51 f1       	breq	.+84     	; 0x1c8 <uart_irq_tx+0x6a>
	{
		UDR0 = *uart_tx_curpos_ring; //Write byte from ringbuffer to UART
     174:	80 81       	ld	r24, Z
     176:	80 93 c6 00 	sts	0x00C6, r24
		uart_tx_curpos_ring++;
     17a:	80 91 09 01 	lds	r24, 0x0109
     17e:	90 91 0a 01 	lds	r25, 0x010A
     182:	01 96       	adiw	r24, 0x01	; 1
		if(uart_tx_curpos_ring >= UART_BUFF_LEN_TX + uart_tx_ring) //Wrap pointer if necessary
     184:	22 e0       	ldi	r18, 0x02	; 2
     186:	8c 33       	cpi	r24, 0x3C	; 60
     188:	92 07       	cpc	r25, r18
     18a:	28 f4       	brcc	.+10     	; 0x196 <uart_irq_tx+0x38>
void uart_irq_tx(void)
{
	if(uart_tx_curpos_ring != uart_tx_targpos_ring)
	{
		UDR0 = *uart_tx_curpos_ring; //Write byte from ringbuffer to UART
		uart_tx_curpos_ring++;
     18c:	90 93 0a 01 	sts	0x010A, r25
     190:	80 93 09 01 	sts	0x0109, r24
     194:	06 c0       	rjmp	.+12     	; 0x1a2 <uart_irq_tx+0x44>
		if(uart_tx_curpos_ring >= UART_BUFF_LEN_TX + uart_tx_ring) //Wrap pointer if necessary
		{
			uart_tx_curpos_ring = uart_tx_ring;
     196:	8c e3       	ldi	r24, 0x3C	; 60
     198:	91 e0       	ldi	r25, 0x01	; 1
     19a:	90 93 0a 01 	sts	0x010A, r25
     19e:	80 93 09 01 	sts	0x0109, r24
		}
		uart_tx_data_len--;
     1a2:	80 91 38 01 	lds	r24, 0x0138
     1a6:	90 91 39 01 	lds	r25, 0x0139
     1aa:	a0 91 3a 01 	lds	r26, 0x013A
     1ae:	b0 91 3b 01 	lds	r27, 0x013B
     1b2:	01 97       	sbiw	r24, 0x01	; 1
     1b4:	a1 09       	sbc	r26, r1
     1b6:	b1 09       	sbc	r27, r1
     1b8:	80 93 38 01 	sts	0x0138, r24
     1bc:	90 93 39 01 	sts	0x0139, r25
     1c0:	a0 93 3a 01 	sts	0x013A, r26
     1c4:	b0 93 3b 01 	sts	0x013B, r27
     1c8:	08 95       	ret

000001ca <__vector_20>:
	}
}

#if UART_IRQ_HOOK_TX != TRUE
ISR(USART_TX_vect)
{
     1ca:	1f 92       	push	r1
     1cc:	0f 92       	push	r0
     1ce:	0f b6       	in	r0, 0x3f	; 63
     1d0:	0f 92       	push	r0
     1d2:	11 24       	eor	r1, r1
     1d4:	2f 93       	push	r18
     1d6:	3f 93       	push	r19
     1d8:	4f 93       	push	r20
     1da:	5f 93       	push	r21
     1dc:	6f 93       	push	r22
     1de:	7f 93       	push	r23
     1e0:	8f 93       	push	r24
     1e2:	9f 93       	push	r25
     1e4:	af 93       	push	r26
     1e6:	bf 93       	push	r27
     1e8:	ef 93       	push	r30
     1ea:	ff 93       	push	r31
	uart_irq_tx();
     1ec:	0e 94 af 00 	call	0x15e	; 0x15e <uart_irq_tx>
}
     1f0:	ff 91       	pop	r31
     1f2:	ef 91       	pop	r30
     1f4:	bf 91       	pop	r27
     1f6:	af 91       	pop	r26
     1f8:	9f 91       	pop	r25
     1fa:	8f 91       	pop	r24
     1fc:	7f 91       	pop	r23
     1fe:	6f 91       	pop	r22
     200:	5f 91       	pop	r21
     202:	4f 91       	pop	r20
     204:	3f 91       	pop	r19
     206:	2f 91       	pop	r18
     208:	0f 90       	pop	r0
     20a:	0f be       	out	0x3f, r0	; 63
     20c:	0f 90       	pop	r0
     20e:	1f 90       	pop	r1
     210:	18 95       	reti

00000212 <uart_irq_udre>:

///This function must be called when the overlying application handles the
///UART data register empty interrupt.
void uart_irq_udre(void)
{
	UDR0 = *uart_tx_curpos_ring; //Push first byte to UDR to start the transmission
     212:	e0 91 09 01 	lds	r30, 0x0109
     216:	f0 91 0a 01 	lds	r31, 0x010A
     21a:	80 81       	ld	r24, Z
     21c:	80 93 c6 00 	sts	0x00C6, r24
	uart_tx_curpos_ring++;
     220:	80 91 09 01 	lds	r24, 0x0109
     224:	90 91 0a 01 	lds	r25, 0x010A
     228:	01 96       	adiw	r24, 0x01	; 1
	if(uart_tx_curpos_ring >= UART_BUFF_LEN_TX + uart_tx_ring) //Wrap pointer if necessary
     22a:	22 e0       	ldi	r18, 0x02	; 2
     22c:	8c 33       	cpi	r24, 0x3C	; 60
     22e:	92 07       	cpc	r25, r18
     230:	28 f4       	brcc	.+10     	; 0x23c <uart_irq_udre+0x2a>
///This function must be called when the overlying application handles the
///UART data register empty interrupt.
void uart_irq_udre(void)
{
	UDR0 = *uart_tx_curpos_ring; //Push first byte to UDR to start the transmission
	uart_tx_curpos_ring++;
     232:	90 93 0a 01 	sts	0x010A, r25
     236:	80 93 09 01 	sts	0x0109, r24
     23a:	06 c0       	rjmp	.+12     	; 0x248 <uart_irq_udre+0x36>
	if(uart_tx_curpos_ring >= UART_BUFF_LEN_TX + uart_tx_ring) //Wrap pointer if necessary
	{
		uart_tx_curpos_ring = uart_tx_ring;
     23c:	8c e3       	ldi	r24, 0x3C	; 60
     23e:	91 e0       	ldi	r25, 0x01	; 1
     240:	90 93 0a 01 	sts	0x010A, r25
     244:	80 93 09 01 	sts	0x0109, r24
	}
	UCSR0B &= ~(1<<UDRIE0); //uart0: Disable uart data-register-empty interrupt
     248:	e1 ec       	ldi	r30, 0xC1	; 193
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	80 81       	ld	r24, Z
     24e:	8f 7d       	andi	r24, 0xDF	; 223
     250:	80 83       	st	Z, r24
	uart_tx_data_len--;
     252:	80 91 38 01 	lds	r24, 0x0138
     256:	90 91 39 01 	lds	r25, 0x0139
     25a:	a0 91 3a 01 	lds	r26, 0x013A
     25e:	b0 91 3b 01 	lds	r27, 0x013B
     262:	01 97       	sbiw	r24, 0x01	; 1
     264:	a1 09       	sbc	r26, r1
     266:	b1 09       	sbc	r27, r1
     268:	80 93 38 01 	sts	0x0138, r24
     26c:	90 93 39 01 	sts	0x0139, r25
     270:	a0 93 3a 01 	sts	0x013A, r26
     274:	b0 93 3b 01 	sts	0x013B, r27
     278:	08 95       	ret

0000027a <__vector_19>:
}

#if UART_IRQ_HOOK_UDRE != TRUE
ISR(USART_UDRE_vect)
{
     27a:	1f 92       	push	r1
     27c:	0f 92       	push	r0
     27e:	0f b6       	in	r0, 0x3f	; 63
     280:	0f 92       	push	r0
     282:	11 24       	eor	r1, r1
     284:	2f 93       	push	r18
     286:	3f 93       	push	r19
     288:	4f 93       	push	r20
     28a:	5f 93       	push	r21
     28c:	6f 93       	push	r22
     28e:	7f 93       	push	r23
     290:	8f 93       	push	r24
     292:	9f 93       	push	r25
     294:	af 93       	push	r26
     296:	bf 93       	push	r27
     298:	ef 93       	push	r30
     29a:	ff 93       	push	r31
	uart_irq_udre();
     29c:	0e 94 09 01 	call	0x212	; 0x212 <uart_irq_udre>
}
     2a0:	ff 91       	pop	r31
     2a2:	ef 91       	pop	r30
     2a4:	bf 91       	pop	r27
     2a6:	af 91       	pop	r26
     2a8:	9f 91       	pop	r25
     2aa:	8f 91       	pop	r24
     2ac:	7f 91       	pop	r23
     2ae:	6f 91       	pop	r22
     2b0:	5f 91       	pop	r21
     2b2:	4f 91       	pop	r20
     2b4:	3f 91       	pop	r19
     2b6:	2f 91       	pop	r18
     2b8:	0f 90       	pop	r0
     2ba:	0f be       	out	0x3f, r0	; 63
     2bc:	0f 90       	pop	r0
     2be:	1f 90       	pop	r1
     2c0:	18 95       	reti

000002c2 <alloc_i2c_reg>:
fan_t* fans[NUM_FANS];

#define I2C_ADDRESS 42

i2c_reg_t* alloc_i2c_reg(uint8_t size, uint8_t addr, void* target)
{
     2c2:	0f 93       	push	r16
     2c4:	1f 93       	push	r17
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
     2ca:	18 2f       	mov	r17, r24
     2cc:	06 2f       	mov	r16, r22
     2ce:	ea 01       	movw	r28, r20
	i2c_reg_t* reg = malloc(sizeof(i2c_reg_t));
     2d0:	84 e0       	ldi	r24, 0x04	; 4
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	0e 94 b7 04 	call	0x96e	; 0x96e <malloc>
	reg->address = addr;
     2d8:	fc 01       	movw	r30, r24
     2da:	00 83       	st	Z, r16
	reg->length = size;
     2dc:	11 83       	std	Z+1, r17	; 0x01
	reg->target = target;
     2de:	d3 83       	std	Z+3, r29	; 0x03
     2e0:	c2 83       	std	Z+2, r28	; 0x02
	return reg;
}
     2e2:	df 91       	pop	r29
     2e4:	cf 91       	pop	r28
     2e6:	1f 91       	pop	r17
     2e8:	0f 91       	pop	r16
     2ea:	08 95       	ret

000002ec <main>:

int main(void)
{
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
     2f0:	cd b7       	in	r28, 0x3d	; 61
     2f2:	de b7       	in	r29, 0x3e	; 62
     2f4:	64 97       	sbiw	r28, 0x14	; 20
     2f6:	0f b6       	in	r0, 0x3f	; 63
     2f8:	f8 94       	cli
     2fa:	de bf       	out	0x3e, r29	; 62
     2fc:	0f be       	out	0x3f, r0	; 63
     2fe:	cd bf       	out	0x3d, r28	; 61
	// Allocate fan structs
	i2c_num_regs = NUM_FANS * 2 + 1;
     300:	89 e0       	ldi	r24, 0x09	; 9
     302:	80 93 3c 02 	sts	0x023C, r24
	i2c_regs = malloc(i2c_num_regs * sizeof(i2c_reg_t**));
     306:	82 e1       	ldi	r24, 0x12	; 18
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	0e 94 b7 04 	call	0x96e	; 0x96e <malloc>
     30e:	8c 01       	movw	r16, r24
     310:	90 93 55 02 	sts	0x0255, r25
     314:	80 93 54 02 	sts	0x0254, r24
	i2c_regs[0] = alloc_i2c_reg(1, 0, &num_fans);
     318:	46 e0       	ldi	r20, 0x06	; 6
     31a:	51 e0       	ldi	r21, 0x01	; 1
     31c:	60 e0       	ldi	r22, 0x00	; 0
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	0e 94 61 01 	call	0x2c2	; 0x2c2 <alloc_i2c_reg>
     324:	d8 01       	movw	r26, r16
     326:	8d 93       	st	X+, r24
     328:	9c 93       	st	X, r25
     32a:	0f 2e       	mov	r0, r31
     32c:	f6 e5       	ldi	r31, 0x56	; 86
     32e:	af 2e       	mov	r10, r31
     330:	f2 e0       	ldi	r31, 0x02	; 2
     332:	bf 2e       	mov	r11, r31
     334:	f0 2d       	mov	r31, r0
     336:	0f 2e       	mov	r0, r31
     338:	fe e5       	ldi	r31, 0x5E	; 94
     33a:	ef 2e       	mov	r14, r31
     33c:	f2 e0       	ldi	r31, 0x02	; 2
     33e:	ff 2e       	mov	r15, r31
     340:	f0 2d       	mov	r31, r0
     342:	85 01       	movw	r16, r10
	for(uint8_t i = 0; i < NUM_FANS; i++)
	{
		fans[i] = malloc(sizeof(fan_t));
     344:	88 e0       	ldi	r24, 0x08	; 8
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	0e 94 b7 04 	call	0x96e	; 0x96e <malloc>
     34c:	fc 01       	movw	r30, r24
     34e:	d8 01       	movw	r26, r16
     350:	8d 93       	st	X+, r24
     352:	9d 93       	st	X+, r25
     354:	8d 01       	movw	r16, r26
		fans[i]->pulsecount = 0;
     356:	16 82       	std	Z+6, r1	; 0x06
     358:	15 82       	std	Z+5, r1	; 0x05
		fans[i]->fault = 0;
     35a:	14 82       	std	Z+4, r1	; 0x04
		fans[i]->sense = 0;
     35c:	17 82       	std	Z+7, r1	; 0x07
{
	// Allocate fan structs
	i2c_num_regs = NUM_FANS * 2 + 1;
	i2c_regs = malloc(i2c_num_regs * sizeof(i2c_reg_t**));
	i2c_regs[0] = alloc_i2c_reg(1, 0, &num_fans);
	for(uint8_t i = 0; i < NUM_FANS; i++)
     35e:	ae 15       	cp	r26, r14
     360:	bf 05       	cpc	r27, r15
     362:	81 f7       	brne	.-32     	; 0x344 <main+0x58>
		fans[i]->pulsecount = 0;
		fans[i]->fault = 0;
		fans[i]->sense = 0;
	}
	// Timer 0
	TCCR0A = (1<<COM0A0) | (1<<COM0A1) | (1<<COM0B0) | (1<<COM0B1) | (1<<WGM00) | (1<<WGM01); // Fast PWM, OC0A and OC0B inverted
     364:	93 ef       	ldi	r25, 0xF3	; 243
     366:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1<<CS01); // Prescaler = 8 => 3906 Hz
     368:	82 e0       	ldi	r24, 0x02	; 2
     36a:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<TOIE0);
     36c:	21 e0       	ldi	r18, 0x01	; 1
     36e:	20 93 6e 00 	sts	0x006E, r18
	fans[0]->pwm_reg = &OCR0A;
     372:	e6 e5       	ldi	r30, 0x56	; 86
     374:	f2 e0       	ldi	r31, 0x02	; 2
     376:	a0 81       	ld	r26, Z
     378:	b1 81       	ldd	r27, Z+1	; 0x01
     37a:	27 e4       	ldi	r18, 0x47	; 71
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	2d 93       	st	X+, r18
     380:	3c 93       	st	X, r19
	fans[1]->pwm_reg = &OCR0B;
     382:	a2 81       	ldd	r26, Z+2	; 0x02
     384:	b3 81       	ldd	r27, Z+3	; 0x03
     386:	28 e4       	ldi	r18, 0x48	; 72
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	2d 93       	st	X+, r18
     38c:	3c 93       	st	X, r19
	// Timer 2
	TCCR2A = (1<<COM2A0) | (1<<COM2A1) | (1<<COM2B0) | (1<<COM2B1) | (1<<WGM20) | (1<<WGM21); // Fast PWM, OC0A and OC0B inverted
     38e:	90 93 b0 00 	sts	0x00B0, r25
	TCCR2B = (1<<CS21); // Prescaler = 8 => 3906 Hz
     392:	80 93 b1 00 	sts	0x00B1, r24
	fans[2]->pwm_reg = &OCR2A;
     396:	a4 81       	ldd	r26, Z+4	; 0x04
     398:	b5 81       	ldd	r27, Z+5	; 0x05
     39a:	83 eb       	ldi	r24, 0xB3	; 179
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	8d 93       	st	X+, r24
     3a0:	9c 93       	st	X, r25
	fans[3]->pwm_reg = &OCR2B;
     3a2:	a6 81       	ldd	r26, Z+6	; 0x06
     3a4:	b7 81       	ldd	r27, Z+7	; 0x07
     3a6:	84 eb       	ldi	r24, 0xB4	; 180
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	8d 93       	st	X+, r24
     3ac:	9c 93       	st	X, r25
	// Enable output drivers on timer compare match outputs
	DDRB = (1<<PINB3);
     3ae:	88 e0       	ldi	r24, 0x08	; 8
     3b0:	84 b9       	out	0x04, r24	; 4
	DDRD = (1<<PIND3) | (1<<PIND5) | (1<<PIND6);
     3b2:	88 e6       	ldi	r24, 0x68	; 104
     3b4:	8a b9       	out	0x0a, r24	; 10
	// Set PWM levels on all outputs
	*(fans[0]->pwm_reg) = 0;
     3b6:	a0 81       	ld	r26, Z
     3b8:	b1 81       	ldd	r27, Z+1	; 0x01
     3ba:	0d 90       	ld	r0, X+
     3bc:	bc 91       	ld	r27, X
     3be:	a0 2d       	mov	r26, r0
     3c0:	1c 92       	st	X, r1
	*(fans[1]->pwm_reg) = 0;
     3c2:	a2 81       	ldd	r26, Z+2	; 0x02
     3c4:	b3 81       	ldd	r27, Z+3	; 0x03
     3c6:	0d 90       	ld	r0, X+
     3c8:	bc 91       	ld	r27, X
     3ca:	a0 2d       	mov	r26, r0
     3cc:	1c 92       	st	X, r1
	*(fans[2]->pwm_reg) = 0;
     3ce:	a4 81       	ldd	r26, Z+4	; 0x04
     3d0:	b5 81       	ldd	r27, Z+5	; 0x05
     3d2:	0d 90       	ld	r0, X+
     3d4:	bc 91       	ld	r27, X
     3d6:	a0 2d       	mov	r26, r0
     3d8:	1c 92       	st	X, r1
	*(fans[3]->pwm_reg) = 0;
     3da:	06 80       	ldd	r0, Z+6	; 0x06
     3dc:	f7 81       	ldd	r31, Z+7	; 0x07
     3de:	e0 2d       	mov	r30, r0
     3e0:	01 90       	ld	r0, Z+
     3e2:	f0 81       	ld	r31, Z
     3e4:	e0 2d       	mov	r30, r0
     3e6:	10 82       	st	Z, r1
	
	PORTB = (1<<PINB6) | (1<<PINB7);
     3e8:	90 ec       	ldi	r25, 0xC0	; 192
     3ea:	95 b9       	out	0x05, r25	; 5
	PORTD = (1<<PIND2) | (1<<PIND4);
     3ec:	84 e1       	ldi	r24, 0x14	; 20
     3ee:	8b b9       	out	0x0b, r24	; 11

	// Enable pin change interrupts on PCINT 6, 7, 18, 20
	PCICR = (1<<PCIE2) | (1<<PCIE0);
     3f0:	25 e0       	ldi	r18, 0x05	; 5
     3f2:	20 93 68 00 	sts	0x0068, r18
	PCMSK0 = (1<<PCINT6) | (1<<PCINT7);
     3f6:	90 93 6b 00 	sts	0x006B, r25
	PCMSK2 = (1<<PCINT18) | (1<<PCINT20);
     3fa:	80 93 6d 00 	sts	0x006D, r24
	
	// Init I2C
	TWCR = (1<<TWIE) | (1<<TWEA) | (1<<TWEN);
     3fe:	85 e4       	ldi	r24, 0x45	; 69
     400:	80 93 bc 00 	sts	0x00BC, r24
	TWAR = (I2C_ADDRESS<<1);
     404:	84 e5       	ldi	r24, 0x54	; 84
     406:	80 93 ba 00 	sts	0x00BA, r24
	i2c.state = I2C_STATE_IDLE;
     40a:	ed e3       	ldi	r30, 0x3D	; 61
     40c:	f2 e0       	ldi	r31, 0x02	; 2
     40e:	80 81       	ld	r24, Z
	i2c.mode = I2C_MODE_R;
     410:	89 7f       	andi	r24, 0xF9	; 249
     412:	8e 7f       	andi	r24, 0xFE	; 254
     414:	80 83       	st	Z, r24
	i2c.buff_r = i2c.buff;
     416:	80 e4       	ldi	r24, 0x40	; 64
     418:	92 e0       	ldi	r25, 0x02	; 2
     41a:	94 8b       	std	Z+20, r25	; 0x14
     41c:	83 8b       	std	Z+19, r24	; 0x13
	i2c.buff_w = i2c.buff;
     41e:	96 8b       	std	Z+22, r25	; 0x16
     420:	85 8b       	std	Z+21, r24	; 0x15
     422:	06 e5       	ldi	r16, 0x56	; 86
     424:	12 e0       	ldi	r17, 0x02	; 2
     426:	77 24       	eor	r7, r7
     428:	73 94       	inc	r7
     42a:	68 94       	set
     42c:	ee 24       	eor	r14, r14
     42e:	e1 f8       	bld	r14, 1
     430:	f1 2c       	mov	r15, r1
	for(uint8_t i = 0; i < NUM_FANS; i++)
	{
		i2c_regs[i * 2 + 1] =  alloc_i2c_reg(1, i * 2, fans[i]->pwm_reg);
     432:	c0 90 54 02 	lds	r12, 0x0254
     436:	d0 90 55 02 	lds	r13, 0x0255
     43a:	ce 0c       	add	r12, r14
     43c:	df 1c       	adc	r13, r15
     43e:	d8 01       	movw	r26, r16
     440:	ed 91       	ld	r30, X+
     442:	fc 91       	ld	r31, X
     444:	40 81       	ld	r20, Z
     446:	51 81       	ldd	r21, Z+1	; 0x01
     448:	60 2f       	mov	r22, r16
     44a:	6a 19       	sub	r22, r10
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <alloc_i2c_reg>
     452:	f6 01       	movw	r30, r12
     454:	91 83       	std	Z+1, r25	; 0x01
     456:	80 83       	st	Z, r24
		i2c_regs[i * 2 + 2] =  alloc_i2c_reg(2, i * 2 + 1, &fans[i]->rpm);
     458:	c7 01       	movw	r24, r14
     45a:	02 96       	adiw	r24, 0x02	; 2
     45c:	c0 90 54 02 	lds	r12, 0x0254
     460:	d0 90 55 02 	lds	r13, 0x0255
     464:	c8 0e       	add	r12, r24
     466:	d9 1e       	adc	r13, r25
     468:	f8 01       	movw	r30, r16
     46a:	40 81       	ld	r20, Z
     46c:	51 81       	ldd	r21, Z+1	; 0x01
     46e:	0e 5f       	subi	r16, 0xFE	; 254
     470:	1f 4f       	sbci	r17, 0xFF	; 255
     472:	4e 5f       	subi	r20, 0xFE	; 254
     474:	5f 4f       	sbci	r21, 0xFF	; 255
     476:	67 2d       	mov	r22, r7
     478:	82 e0       	ldi	r24, 0x02	; 2
     47a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <alloc_i2c_reg>
     47e:	d6 01       	movw	r26, r12
     480:	8d 93       	st	X+, r24
     482:	9c 93       	st	X, r25
     484:	b4 e0       	ldi	r27, 0x04	; 4
     486:	eb 0e       	add	r14, r27
     488:	f1 1c       	adc	r15, r1
     48a:	73 94       	inc	r7
     48c:	73 94       	inc	r7
	TWAR = (I2C_ADDRESS<<1);
	i2c.state = I2C_STATE_IDLE;
	i2c.mode = I2C_MODE_R;
	i2c.buff_r = i2c.buff;
	i2c.buff_w = i2c.buff;
	for(uint8_t i = 0; i < NUM_FANS; i++)
     48e:	e9 e0       	ldi	r30, 0x09	; 9
     490:	7e 12       	cpse	r7, r30
     492:	cf cf       	rjmp	.-98     	; 0x432 <__FUSE_REGION_LENGTH__+0x32>
	{
		i2c_regs[i * 2 + 1] =  alloc_i2c_reg(1, i * 2, fans[i]->pwm_reg);
		i2c_regs[i * 2 + 2] =  alloc_i2c_reg(2, i * 2 + 1, &fans[i]->rpm);
	}
			
	DDRB |= (1<<PINB0);
     494:	20 9a       	sbi	0x04, 0	; 4
		
	// Init UART
	char str[20];
	uart_init();
     496:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_init>
	uart_init_tx();
     49a:	0e 94 5d 00 	call	0xba	; 0xba <uart_init_tx>
	uart_write_async("Hello World\n");	
     49e:	8b e0       	ldi	r24, 0x0B	; 11
     4a0:	91 e0       	ldi	r25, 0x01	; 1
     4a2:	0e 94 96 00 	call	0x12c	; 0x12c <uart_write_async>
	sprintf(str, "Num fans  %u \n", *((uint8_t*)i2c_regs[0]->target));
     4a6:	e0 91 54 02 	lds	r30, 0x0254
     4aa:	f0 91 55 02 	lds	r31, 0x0255
     4ae:	01 90       	ld	r0, Z+
     4b0:	f0 81       	ld	r31, Z
     4b2:	e0 2d       	mov	r30, r0
     4b4:	02 80       	ldd	r0, Z+2	; 0x02
     4b6:	f3 81       	ldd	r31, Z+3	; 0x03
     4b8:	e0 2d       	mov	r30, r0
     4ba:	80 81       	ld	r24, Z
     4bc:	1f 92       	push	r1
     4be:	8f 93       	push	r24
     4c0:	88 e1       	ldi	r24, 0x18	; 24
     4c2:	91 e0       	ldi	r25, 0x01	; 1
     4c4:	9f 93       	push	r25
     4c6:	8f 93       	push	r24
     4c8:	8e 01       	movw	r16, r28
     4ca:	0f 5f       	subi	r16, 0xFF	; 255
     4cc:	1f 4f       	sbci	r17, 0xFF	; 255
     4ce:	1f 93       	push	r17
     4d0:	0f 93       	push	r16
     4d2:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <sprintf>
	uart_write_async(str);
     4d6:	c8 01       	movw	r24, r16
     4d8:	0e 94 96 00 	call	0x12c	; 0x12c <uart_write_async>

	sei();
     4dc:	78 94       	sei
     4de:	0f 90       	pop	r0
     4e0:	0f 90       	pop	r0
     4e2:	0f 90       	pop	r0
     4e4:	0f 90       	pop	r0
     4e6:	0f 90       	pop	r0
     4e8:	0f 90       	pop	r0
    while (1)
    {
		PORTB = PORTB ^ (1<<0);
     4ea:	dd 24       	eor	r13, r13
     4ec:	d3 94       	inc	r13
     4ee:	3a 2c       	mov	r3, r10
     4f0:	4b 2c       	mov	r4, r11
     4f2:	51 2c       	mov	r5, r1
     4f4:	61 2c       	mov	r6, r1
		{
			for(uint8_t i = 0; i < NUM_FANS; i++)
			{
				fans[i]->rpm = fans[i]->pulsecount * (20 / 4);
				fans[i]->pulsecount = 0;
				sprintf(str, "FAN%u: %u rpm\n", i, fans[i]->rpm);
     4f6:	0f 2e       	mov	r0, r31
     4f8:	f7 e2       	ldi	r31, 0x27	; 39
     4fa:	af 2e       	mov	r10, r31
     4fc:	f1 e0       	ldi	r31, 0x01	; 1
     4fe:	bf 2e       	mov	r11, r31
     500:	f0 2d       	mov	r31, r0
     502:	48 01       	movw	r8, r16
     504:	70 2e       	mov	r7, r16
     506:	c9 2c       	mov	r12, r9
	uart_write_async(str);

	sei();
    while (1)
    {
		PORTB = PORTB ^ (1<<0);
     508:	85 b1       	in	r24, 0x05	; 5
     50a:	8d 25       	eor	r24, r13
     50c:	85 b9       	out	0x05, r24	; 5
		set_sleep_mode(SLEEP_MODE_IDLE);
     50e:	83 b7       	in	r24, 0x33	; 51
     510:	81 7f       	andi	r24, 0xF1	; 241
     512:	83 bf       	out	0x33, r24	; 51
		sleep_enable();
     514:	23 b7       	in	r18, 0x33	; 51
     516:	21 60       	ori	r18, 0x01	; 1
     518:	23 bf       	out	0x33, r18	; 51
		sleep_cpu();
     51a:	88 95       	sleep
		if(tm0_cnt == THREE_SECONDS)
     51c:	80 91 36 01 	lds	r24, 0x0136
     520:	90 91 37 01 	lds	r25, 0x0137
     524:	87 3c       	cpi	r24, 0xC7	; 199
     526:	9d 42       	sbci	r25, 0x2D	; 45
     528:	79 f7       	brne	.-34     	; 0x508 <__FUSE_REGION_LENGTH__+0x108>
     52a:	e3 2c       	mov	r14, r3
     52c:	f4 2c       	mov	r15, r4
     52e:	05 2d       	mov	r16, r5
     530:	16 2d       	mov	r17, r6
     532:	a7 01       	movw	r20, r14
		{
			for(uint8_t i = 0; i < NUM_FANS; i++)
			{
				fans[i]->rpm = fans[i]->pulsecount * (20 / 4);
     534:	d7 01       	movw	r26, r14
     536:	ed 91       	ld	r30, X+
     538:	fc 91       	ld	r31, X
     53a:	11 97       	sbiw	r26, 0x01	; 1
     53c:	85 81       	ldd	r24, Z+5	; 0x05
     53e:	96 81       	ldd	r25, Z+6	; 0x06
     540:	9c 01       	movw	r18, r24
     542:	22 0f       	add	r18, r18
     544:	33 1f       	adc	r19, r19
     546:	22 0f       	add	r18, r18
     548:	33 1f       	adc	r19, r19
     54a:	82 0f       	add	r24, r18
     54c:	93 1f       	adc	r25, r19
     54e:	93 83       	std	Z+3, r25	; 0x03
     550:	82 83       	std	Z+2, r24	; 0x02
				fans[i]->pulsecount = 0;
     552:	ed 91       	ld	r30, X+
     554:	fd 91       	ld	r31, X+
     556:	7d 01       	movw	r14, r26
     558:	16 82       	std	Z+6, r1	; 0x06
     55a:	15 82       	std	Z+5, r1	; 0x05
				sprintf(str, "FAN%u: %u rpm\n", i, fans[i]->rpm);
     55c:	da 01       	movw	r26, r20
     55e:	ed 91       	ld	r30, X+
     560:	fc 91       	ld	r31, X
     562:	83 81       	ldd	r24, Z+3	; 0x03
     564:	8f 93       	push	r24
     566:	82 81       	ldd	r24, Z+2	; 0x02
     568:	8f 93       	push	r24
     56a:	1f 93       	push	r17
     56c:	0f 93       	push	r16
     56e:	bf 92       	push	r11
     570:	af 92       	push	r10
     572:	9f 92       	push	r9
     574:	8f 92       	push	r8
     576:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <sprintf>
				uart_write_async(str);
     57a:	87 2d       	mov	r24, r7
     57c:	9c 2d       	mov	r25, r12
     57e:	0e 94 96 00 	call	0x12c	; 0x12c <uart_write_async>
     582:	0f 5f       	subi	r16, 0xFF	; 255
     584:	1f 4f       	sbci	r17, 0xFF	; 255
		set_sleep_mode(SLEEP_MODE_IDLE);
		sleep_enable();
		sleep_cpu();
		if(tm0_cnt == THREE_SECONDS)
		{
			for(uint8_t i = 0; i < NUM_FANS; i++)
     586:	0f b6       	in	r0, 0x3f	; 63
     588:	f8 94       	cli
     58a:	de bf       	out	0x3e, r29	; 62
     58c:	0f be       	out	0x3f, r0	; 63
     58e:	cd bf       	out	0x3d, r28	; 61
     590:	04 30       	cpi	r16, 0x04	; 4
     592:	11 05       	cpc	r17, r1
     594:	71 f6       	brne	.-100    	; 0x532 <__FUSE_REGION_LENGTH__+0x132>
				fans[i]->rpm = fans[i]->pulsecount * (20 / 4);
				fans[i]->pulsecount = 0;
				sprintf(str, "FAN%u: %u rpm\n", i, fans[i]->rpm);
				uart_write_async(str);
			}
			tm0_cnt = 0;
     596:	50 92 36 01 	sts	0x0136, r5
     59a:	60 92 37 01 	sts	0x0137, r6
     59e:	b4 cf       	rjmp	.-152    	; 0x508 <__FUSE_REGION_LENGTH__+0x108>

000005a0 <handle_counter>:
		}
    }
}

void handle_counter(fan_t* fan, uint8_t* port, uint8_t bit)
{
     5a0:	fc 01       	movw	r30, r24
	uint8_t state = *port>>bit & 0b1;
     5a2:	db 01       	movw	r26, r22
     5a4:	2c 91       	ld	r18, X
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	02 c0       	rjmp	.+4      	; 0x5ae <handle_counter+0xe>
     5aa:	35 95       	asr	r19
     5ac:	27 95       	ror	r18
     5ae:	4a 95       	dec	r20
     5b0:	e2 f7       	brpl	.-8      	; 0x5aa <handle_counter+0xa>
     5b2:	21 70       	andi	r18, 0x01	; 1
	if(fan->sense != state)
     5b4:	87 81       	ldd	r24, Z+7	; 0x07
     5b6:	82 17       	cp	r24, r18
     5b8:	31 f0       	breq	.+12     	; 0x5c6 <handle_counter+0x26>
	{
		fan->pulsecount++;
     5ba:	85 81       	ldd	r24, Z+5	; 0x05
     5bc:	96 81       	ldd	r25, Z+6	; 0x06
     5be:	01 96       	adiw	r24, 0x01	; 1
     5c0:	96 83       	std	Z+6, r25	; 0x06
     5c2:	85 83       	std	Z+5, r24	; 0x05
		fan->sense = state;
     5c4:	27 83       	std	Z+7, r18	; 0x07
     5c6:	08 95       	ret

000005c8 <i2c_buff_write>:
	}
}

void i2c_buff_write(uint8_t* data, uint8_t len)
{
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
	for(uint8_t i = 0; i < len; i++)
     5cc:	66 23       	and	r22, r22
     5ce:	f1 f0       	breq	.+60     	; 0x60c <i2c_buff_write+0x44>
     5d0:	dc 01       	movw	r26, r24
     5d2:	61 50       	subi	r22, 0x01	; 1
     5d4:	46 2f       	mov	r20, r22
     5d6:	50 e0       	ldi	r21, 0x00	; 0
     5d8:	4f 5f       	subi	r20, 0xFF	; 255
     5da:	5f 4f       	sbci	r21, 0xFF	; 255
     5dc:	48 0f       	add	r20, r24
     5de:	59 1f       	adc	r21, r25
	{
		*i2c.buff_w = data[i];
     5e0:	ed e3       	ldi	r30, 0x3D	; 61
     5e2:	f2 e0       	ldi	r31, 0x02	; 2
		if(++i2c.buff_w == i2c.buff + I2C_BUFF_SIZE)
			i2c.buff_w = i2c.buff;
     5e4:	60 e4       	ldi	r22, 0x40	; 64
     5e6:	72 e0       	ldi	r23, 0x02	; 2

void i2c_buff_write(uint8_t* data, uint8_t len)
{
	for(uint8_t i = 0; i < len; i++)
	{
		*i2c.buff_w = data[i];
     5e8:	c5 89       	ldd	r28, Z+21	; 0x15
     5ea:	d6 89       	ldd	r29, Z+22	; 0x16
     5ec:	9d 91       	ld	r25, X+
     5ee:	98 83       	st	Y, r25
		if(++i2c.buff_w == i2c.buff + I2C_BUFF_SIZE)
     5f0:	25 89       	ldd	r18, Z+21	; 0x15
     5f2:	36 89       	ldd	r19, Z+22	; 0x16
     5f4:	2f 5f       	subi	r18, 0xFF	; 255
     5f6:	3f 4f       	sbci	r19, 0xFF	; 255
     5f8:	36 8b       	std	Z+22, r19	; 0x16
     5fa:	25 8b       	std	Z+21, r18	; 0x15
     5fc:	20 55       	subi	r18, 0x50	; 80
     5fe:	32 40       	sbci	r19, 0x02	; 2
     600:	11 f4       	brne	.+4      	; 0x606 <i2c_buff_write+0x3e>
			i2c.buff_w = i2c.buff;
     602:	76 8b       	std	Z+22, r23	; 0x16
     604:	65 8b       	std	Z+21, r22	; 0x15
	}
}

void i2c_buff_write(uint8_t* data, uint8_t len)
{
	for(uint8_t i = 0; i < len; i++)
     606:	a4 17       	cp	r26, r20
     608:	b5 07       	cpc	r27, r21
     60a:	71 f7       	brne	.-36     	; 0x5e8 <i2c_buff_write+0x20>
	{
		*i2c.buff_w = data[i];
		if(++i2c.buff_w == i2c.buff + I2C_BUFF_SIZE)
			i2c.buff_w = i2c.buff;
	}
}
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	08 95       	ret

00000612 <i2c_buff_load_byte>:

uint8_t i2c_buff_load_byte(uint8_t* dst)
{
	*dst = *i2c.buff_r;
     612:	ed e3       	ldi	r30, 0x3D	; 61
     614:	f2 e0       	ldi	r31, 0x02	; 2
     616:	a3 89       	ldd	r26, Z+19	; 0x13
     618:	b4 89       	ldd	r27, Z+20	; 0x14
     61a:	2c 91       	ld	r18, X
     61c:	dc 01       	movw	r26, r24
     61e:	2c 93       	st	X, r18
	if(i2c.buff_r != i2c.buff_w)
     620:	83 89       	ldd	r24, Z+19	; 0x13
     622:	94 89       	ldd	r25, Z+20	; 0x14
     624:	25 89       	ldd	r18, Z+21	; 0x15
     626:	36 89       	ldd	r19, Z+22	; 0x16
     628:	82 17       	cp	r24, r18
     62a:	93 07       	cpc	r25, r19
     62c:	99 f0       	breq	.+38     	; 0x654 <i2c_buff_load_byte+0x42>
	{
		i2c.buff_r++;
     62e:	01 96       	adiw	r24, 0x01	; 1
		if(i2c.buff_r == i2c.buff + I2C_BUFF_SIZE)
     630:	b2 e0       	ldi	r27, 0x02	; 2
     632:	80 35       	cpi	r24, 0x50	; 80
     634:	9b 07       	cpc	r25, r27
     636:	31 f0       	breq	.+12     	; 0x644 <i2c_buff_load_byte+0x32>
uint8_t i2c_buff_load_byte(uint8_t* dst)
{
	*dst = *i2c.buff_r;
	if(i2c.buff_r != i2c.buff_w)
	{
		i2c.buff_r++;
     638:	90 93 51 02 	sts	0x0251, r25
     63c:	80 93 50 02 	sts	0x0250, r24
		if(i2c.buff_r == i2c.buff + I2C_BUFF_SIZE)
			i2c.buff_r = i2c.buff;
		return 0;
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	08 95       	ret
	*dst = *i2c.buff_r;
	if(i2c.buff_r != i2c.buff_w)
	{
		i2c.buff_r++;
		if(i2c.buff_r == i2c.buff + I2C_BUFF_SIZE)
			i2c.buff_r = i2c.buff;
     644:	80 e4       	ldi	r24, 0x40	; 64
     646:	92 e0       	ldi	r25, 0x02	; 2
     648:	90 93 51 02 	sts	0x0251, r25
     64c:	80 93 50 02 	sts	0x0250, r24
		return 0;
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	08 95       	ret
	}
	
	return 1;
     654:	81 e0       	ldi	r24, 0x01	; 1
}
     656:	08 95       	ret

00000658 <i2c_buff_flush>:

void i2c_buff_flush()
{
	i2c.buff_r = i2c.buff_w;
     658:	ed e3       	ldi	r30, 0x3D	; 61
     65a:	f2 e0       	ldi	r31, 0x02	; 2
     65c:	85 89       	ldd	r24, Z+21	; 0x15
     65e:	96 89       	ldd	r25, Z+22	; 0x16
     660:	94 8b       	std	Z+20, r25	; 0x14
     662:	83 8b       	std	Z+19, r24	; 0x13
     664:	08 95       	ret

00000666 <i2c_write_reg>:
}

void i2c_write_reg(uint8_t reg)
{
     666:	0f 93       	push	r16
     668:	1f 93       	push	r17
     66a:	cf 93       	push	r28
	if(reg >= i2c_num_regs)
     66c:	90 91 3c 02 	lds	r25, 0x023C
     670:	89 17       	cp	r24, r25
     672:	20 f5       	brcc	.+72     	; 0x6bc <i2c_write_reg+0x56>
		return;
	for(uint8_t i = 0; i < i2c_regs[reg]->length; i++)
     674:	08 2f       	mov	r16, r24
     676:	10 e0       	ldi	r17, 0x00	; 0
     678:	00 0f       	add	r16, r16
     67a:	11 1f       	adc	r17, r17
     67c:	e0 91 54 02 	lds	r30, 0x0254
     680:	f0 91 55 02 	lds	r31, 0x0255
     684:	e0 0f       	add	r30, r16
     686:	f1 1f       	adc	r31, r17
     688:	01 90       	ld	r0, Z+
     68a:	f0 81       	ld	r31, Z
     68c:	e0 2d       	mov	r30, r0
     68e:	81 81       	ldd	r24, Z+1	; 0x01
     690:	88 23       	and	r24, r24
     692:	a1 f0       	breq	.+40     	; 0x6bc <i2c_write_reg+0x56>
     694:	c0 e0       	ldi	r28, 0x00	; 0
	{
		i2c_buff_load_byte(i2c_regs[reg]->target + i);
     696:	82 81       	ldd	r24, Z+2	; 0x02
     698:	93 81       	ldd	r25, Z+3	; 0x03
     69a:	8c 0f       	add	r24, r28
     69c:	91 1d       	adc	r25, r1
     69e:	0e 94 09 03 	call	0x612	; 0x612 <i2c_buff_load_byte>

void i2c_write_reg(uint8_t reg)
{
	if(reg >= i2c_num_regs)
		return;
	for(uint8_t i = 0; i < i2c_regs[reg]->length; i++)
     6a2:	cf 5f       	subi	r28, 0xFF	; 255
     6a4:	e0 91 54 02 	lds	r30, 0x0254
     6a8:	f0 91 55 02 	lds	r31, 0x0255
     6ac:	e0 0f       	add	r30, r16
     6ae:	f1 1f       	adc	r31, r17
     6b0:	01 90       	ld	r0, Z+
     6b2:	f0 81       	ld	r31, Z
     6b4:	e0 2d       	mov	r30, r0
     6b6:	91 81       	ldd	r25, Z+1	; 0x01
     6b8:	c9 17       	cp	r28, r25
     6ba:	68 f3       	brcs	.-38     	; 0x696 <i2c_write_reg+0x30>
	{
		i2c_buff_load_byte(i2c_regs[reg]->target + i);
	}
}
     6bc:	cf 91       	pop	r28
     6be:	1f 91       	pop	r17
     6c0:	0f 91       	pop	r16
     6c2:	08 95       	ret

000006c4 <i2c_buff_empty>:

uint8_t i2c_buff_empty()
{
	return i2c.buff_r == i2c.buff_w;
     6c4:	ed e3       	ldi	r30, 0x3D	; 61
     6c6:	f2 e0       	ldi	r31, 0x02	; 2
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	43 89       	ldd	r20, Z+19	; 0x13
     6cc:	54 89       	ldd	r21, Z+20	; 0x14
     6ce:	25 89       	ldd	r18, Z+21	; 0x15
     6d0:	36 89       	ldd	r19, Z+22	; 0x16
     6d2:	42 17       	cp	r20, r18
     6d4:	53 07       	cpc	r21, r19
     6d6:	09 f0       	breq	.+2      	; 0x6da <i2c_buff_empty+0x16>
     6d8:	80 e0       	ldi	r24, 0x00	; 0
}
     6da:	08 95       	ret

000006dc <i2c_load_reg>:

uint8_t i2c_load_reg(uint8_t reg_addr)
{
	if(reg_addr >= i2c_num_regs)
     6dc:	90 91 3c 02 	lds	r25, 0x023C
     6e0:	89 17       	cp	r24, r25
     6e2:	a0 f4       	brcc	.+40     	; 0x70c <i2c_load_reg+0x30>
		return 1;
	i2c_buff_write(((uint8_t*)i2c_regs[reg_addr]->target), i2c_regs[reg_addr]->length);
     6e4:	e8 2f       	mov	r30, r24
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	ee 0f       	add	r30, r30
     6ea:	ff 1f       	adc	r31, r31
     6ec:	80 91 54 02 	lds	r24, 0x0254
     6f0:	90 91 55 02 	lds	r25, 0x0255
     6f4:	e8 0f       	add	r30, r24
     6f6:	f9 1f       	adc	r31, r25
     6f8:	01 90       	ld	r0, Z+
     6fa:	f0 81       	ld	r31, Z
     6fc:	e0 2d       	mov	r30, r0
     6fe:	61 81       	ldd	r22, Z+1	; 0x01
     700:	82 81       	ldd	r24, Z+2	; 0x02
     702:	93 81       	ldd	r25, Z+3	; 0x03
     704:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <i2c_buff_write>
	return 0;
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	08 95       	ret
}

uint8_t i2c_load_reg(uint8_t reg_addr)
{
	if(reg_addr >= i2c_num_regs)
		return 1;
     70c:	81 e0       	ldi	r24, 0x01	; 1
	i2c_buff_write(((uint8_t*)i2c_regs[reg_addr]->target), i2c_regs[reg_addr]->length);
	return 0;
}
     70e:	08 95       	ret

00000710 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
     710:	1f 92       	push	r1
     712:	0f 92       	push	r0
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	0f 92       	push	r0
     718:	11 24       	eor	r1, r1
     71a:	8f 93       	push	r24
     71c:	9f 93       	push	r25
	tm0_cnt++;
     71e:	80 91 36 01 	lds	r24, 0x0136
     722:	90 91 37 01 	lds	r25, 0x0137
     726:	01 96       	adiw	r24, 0x01	; 1
     728:	90 93 37 01 	sts	0x0137, r25
     72c:	80 93 36 01 	sts	0x0136, r24
}
     730:	9f 91       	pop	r25
     732:	8f 91       	pop	r24
     734:	0f 90       	pop	r0
     736:	0f be       	out	0x3f, r0	; 63
     738:	0f 90       	pop	r0
     73a:	1f 90       	pop	r1
     73c:	18 95       	reti

0000073e <__vector_3>:

ISR(PCINT0_vect)
{
     73e:	1f 92       	push	r1
     740:	0f 92       	push	r0
     742:	0f b6       	in	r0, 0x3f	; 63
     744:	0f 92       	push	r0
     746:	11 24       	eor	r1, r1
     748:	2f 93       	push	r18
     74a:	3f 93       	push	r19
     74c:	4f 93       	push	r20
     74e:	5f 93       	push	r21
     750:	6f 93       	push	r22
     752:	7f 93       	push	r23
     754:	8f 93       	push	r24
     756:	9f 93       	push	r25
     758:	af 93       	push	r26
     75a:	bf 93       	push	r27
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	ef 93       	push	r30
     762:	ff 93       	push	r31
	handle_counter(fans[0], &PINB, PINB6);
     764:	c6 e5       	ldi	r28, 0x56	; 86
     766:	d2 e0       	ldi	r29, 0x02	; 2
     768:	46 e0       	ldi	r20, 0x06	; 6
     76a:	63 e2       	ldi	r22, 0x23	; 35
     76c:	70 e0       	ldi	r23, 0x00	; 0
     76e:	88 81       	ld	r24, Y
     770:	99 81       	ldd	r25, Y+1	; 0x01
     772:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <handle_counter>
	handle_counter(fans[1], &PINB, PINB7);
     776:	47 e0       	ldi	r20, 0x07	; 7
     778:	63 e2       	ldi	r22, 0x23	; 35
     77a:	70 e0       	ldi	r23, 0x00	; 0
     77c:	8a 81       	ldd	r24, Y+2	; 0x02
     77e:	9b 81       	ldd	r25, Y+3	; 0x03
     780:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <handle_counter>
}
     784:	ff 91       	pop	r31
     786:	ef 91       	pop	r30
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	bf 91       	pop	r27
     78e:	af 91       	pop	r26
     790:	9f 91       	pop	r25
     792:	8f 91       	pop	r24
     794:	7f 91       	pop	r23
     796:	6f 91       	pop	r22
     798:	5f 91       	pop	r21
     79a:	4f 91       	pop	r20
     79c:	3f 91       	pop	r19
     79e:	2f 91       	pop	r18
     7a0:	0f 90       	pop	r0
     7a2:	0f be       	out	0x3f, r0	; 63
     7a4:	0f 90       	pop	r0
     7a6:	1f 90       	pop	r1
     7a8:	18 95       	reti

000007aa <__vector_5>:

ISR(PCINT2_vect)
{
     7aa:	1f 92       	push	r1
     7ac:	0f 92       	push	r0
     7ae:	0f b6       	in	r0, 0x3f	; 63
     7b0:	0f 92       	push	r0
     7b2:	11 24       	eor	r1, r1
     7b4:	2f 93       	push	r18
     7b6:	3f 93       	push	r19
     7b8:	4f 93       	push	r20
     7ba:	5f 93       	push	r21
     7bc:	6f 93       	push	r22
     7be:	7f 93       	push	r23
     7c0:	8f 93       	push	r24
     7c2:	9f 93       	push	r25
     7c4:	af 93       	push	r26
     7c6:	bf 93       	push	r27
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	ef 93       	push	r30
     7ce:	ff 93       	push	r31
	handle_counter(fans[2], &PIND, PIND2);
     7d0:	c6 e5       	ldi	r28, 0x56	; 86
     7d2:	d2 e0       	ldi	r29, 0x02	; 2
     7d4:	42 e0       	ldi	r20, 0x02	; 2
     7d6:	69 e2       	ldi	r22, 0x29	; 41
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	8c 81       	ldd	r24, Y+4	; 0x04
     7dc:	9d 81       	ldd	r25, Y+5	; 0x05
     7de:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <handle_counter>
	handle_counter(fans[3], &PIND, PIND4);
     7e2:	44 e0       	ldi	r20, 0x04	; 4
     7e4:	69 e2       	ldi	r22, 0x29	; 41
     7e6:	70 e0       	ldi	r23, 0x00	; 0
     7e8:	8e 81       	ldd	r24, Y+6	; 0x06
     7ea:	9f 81       	ldd	r25, Y+7	; 0x07
     7ec:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <handle_counter>
}
     7f0:	ff 91       	pop	r31
     7f2:	ef 91       	pop	r30
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	bf 91       	pop	r27
     7fa:	af 91       	pop	r26
     7fc:	9f 91       	pop	r25
     7fe:	8f 91       	pop	r24
     800:	7f 91       	pop	r23
     802:	6f 91       	pop	r22
     804:	5f 91       	pop	r21
     806:	4f 91       	pop	r20
     808:	3f 91       	pop	r19
     80a:	2f 91       	pop	r18
     80c:	0f 90       	pop	r0
     80e:	0f be       	out	0x3f, r0	; 63
     810:	0f 90       	pop	r0
     812:	1f 90       	pop	r1
     814:	18 95       	reti

00000816 <__vector_24>:

ISR(TWI_vect)
{
     816:	1f 92       	push	r1
     818:	0f 92       	push	r0
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	0f 92       	push	r0
     81e:	11 24       	eor	r1, r1
     820:	2f 93       	push	r18
     822:	3f 93       	push	r19
     824:	4f 93       	push	r20
     826:	5f 93       	push	r21
     828:	6f 93       	push	r22
     82a:	7f 93       	push	r23
     82c:	8f 93       	push	r24
     82e:	9f 93       	push	r25
     830:	af 93       	push	r26
     832:	bf 93       	push	r27
     834:	cf 93       	push	r28
     836:	df 93       	push	r29
     838:	ef 93       	push	r30
     83a:	ff 93       	push	r31
	uint8_t status = TWSR & 0b11111000;
     83c:	80 91 b9 00 	lds	r24, 0x00B9
     840:	88 7f       	andi	r24, 0xF8	; 248
	switch(i2c.mode)
     842:	90 91 3d 02 	lds	r25, 0x023D
     846:	90 fd       	sbrc	r25, 0
     848:	4f c0       	rjmp	.+158    	; 0x8e8 <__vector_24+0xd2>
	{
		case I2C_MODE_R:
			switch(status)
     84a:	80 38       	cpi	r24, 0x80	; 128
     84c:	61 f0       	breq	.+24     	; 0x866 <__vector_24+0x50>
     84e:	80 3a       	cpi	r24, 0xA0	; 160
     850:	79 f1       	breq	.+94     	; 0x8b0 <__vector_24+0x9a>
     852:	80 36       	cpi	r24, 0x60	; 96
     854:	d9 f5       	brne	.+118    	; 0x8cc <__vector_24+0xb6>
			{
				case I2C_STATUS_START_W:
					i2c.state = I2C_STATE_ADDRESS;
     856:	ed e3       	ldi	r30, 0x3D	; 61
     858:	f2 e0       	ldi	r31, 0x02	; 2
     85a:	89 2f       	mov	r24, r25
     85c:	89 7f       	andi	r24, 0xF9	; 249
     85e:	82 60       	ori	r24, 0x02	; 2
     860:	80 83       	st	Z, r24
					i2c.num_bytes = 0;
     862:	12 82       	std	Z+2, r1	; 0x02
					break;
     864:	6c c0       	rjmp	.+216    	; 0x93e <__stack+0x3f>
				case I2C_STATUS_BYTE_R:
					i2c.num_bytes++;
     866:	ed e3       	ldi	r30, 0x3D	; 61
     868:	f2 e0       	ldi	r31, 0x02	; 2
     86a:	82 81       	ldd	r24, Z+2	; 0x02
     86c:	8f 5f       	subi	r24, 0xFF	; 255
     86e:	82 83       	std	Z+2, r24	; 0x02
					switch(i2c.state)
     870:	80 81       	ld	r24, Z
     872:	86 95       	lsr	r24
     874:	83 70       	andi	r24, 0x03	; 3
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	81 30       	cpi	r24, 0x01	; 1
     87a:	91 05       	cpc	r25, r1
     87c:	19 f0       	breq	.+6      	; 0x884 <__vector_24+0x6e>
     87e:	02 97       	sbiw	r24, 0x02	; 2
     880:	59 f0       	breq	.+22     	; 0x898 <__vector_24+0x82>
     882:	10 c0       	rjmp	.+32     	; 0x8a4 <__vector_24+0x8e>
					{
						case I2C_STATE_ADDRESS:
							i2c.reg_addr = TWDR;
     884:	80 91 bb 00 	lds	r24, 0x00BB
     888:	ed e3       	ldi	r30, 0x3D	; 61
     88a:	f2 e0       	ldi	r31, 0x02	; 2
     88c:	81 83       	std	Z+1, r24	; 0x01
							i2c.state = I2C_STATE_DATA;
     88e:	80 81       	ld	r24, Z
     890:	89 7f       	andi	r24, 0xF9	; 249
     892:	84 60       	ori	r24, 0x04	; 4
     894:	80 83       	st	Z, r24
							break;
     896:	53 c0       	rjmp	.+166    	; 0x93e <__stack+0x3f>
						case I2C_STATE_DATA:
							i2c_buff_write(&TWDR, 1);
     898:	61 e0       	ldi	r22, 0x01	; 1
     89a:	8b eb       	ldi	r24, 0xBB	; 187
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <i2c_buff_write>
							break;
     8a2:	4d c0       	rjmp	.+154    	; 0x93e <__stack+0x3f>
						default:
							i2c.state = I2C_STATE_IDLE;
     8a4:	ed e3       	ldi	r30, 0x3D	; 61
     8a6:	f2 e0       	ldi	r31, 0x02	; 2
     8a8:	80 81       	ld	r24, Z
     8aa:	89 7f       	andi	r24, 0xF9	; 249
     8ac:	80 83       	st	Z, r24
     8ae:	47 c0       	rjmp	.+142    	; 0x93e <__stack+0x3f>
					}
					break;
				case I2C_STATUS_STOP_W:
					if(i2c.num_bytes == 1)
     8b0:	80 91 3f 02 	lds	r24, 0x023F
     8b4:	81 30       	cpi	r24, 0x01	; 1
     8b6:	31 f4       	brne	.+12     	; 0x8c4 <__vector_24+0xae>
					{
						i2c.mode = I2C_MODE_W;
     8b8:	ed e3       	ldi	r30, 0x3D	; 61
     8ba:	f2 e0       	ldi	r31, 0x02	; 2
     8bc:	80 81       	ld	r24, Z
     8be:	81 60       	ori	r24, 0x01	; 1
     8c0:	80 83       	st	Z, r24
     8c2:	04 c0       	rjmp	.+8      	; 0x8cc <__vector_24+0xb6>
					}
					else
					{
						i2c_write_reg(i2c.reg_addr);
     8c4:	80 91 3e 02 	lds	r24, 0x023E
     8c8:	0e 94 33 03 	call	0x666	; 0x666 <i2c_write_reg>
					}
				default: // Reset I2C
					TWCR |= (1<<TWEA);
     8cc:	ec eb       	ldi	r30, 0xBC	; 188
     8ce:	f0 e0       	ldi	r31, 0x00	; 0
     8d0:	80 81       	ld	r24, Z
     8d2:	80 64       	ori	r24, 0x40	; 64
     8d4:	80 83       	st	Z, r24
					i2c.num_bytes = 0;
     8d6:	cd e3       	ldi	r28, 0x3D	; 61
     8d8:	d2 e0       	ldi	r29, 0x02	; 2
     8da:	1a 82       	std	Y+2, r1	; 0x02
					i2c_buff_flush();
     8dc:	0e 94 2c 03 	call	0x658	; 0x658 <i2c_buff_flush>
					i2c.state = I2C_STATE_IDLE;
     8e0:	88 81       	ld	r24, Y
     8e2:	89 7f       	andi	r24, 0xF9	; 249
     8e4:	88 83       	st	Y, r24
     8e6:	2b c0       	rjmp	.+86     	; 0x93e <__stack+0x3f>
			}
			break;
		case I2C_MODE_W:
			switch(status)
     8e8:	88 3a       	cpi	r24, 0xA8	; 168
     8ea:	19 f0       	breq	.+6      	; 0x8f2 <__vector_24+0xdc>
     8ec:	88 3b       	cpi	r24, 0xB8	; 184
     8ee:	51 f0       	breq	.+20     	; 0x904 <__stack+0x5>
     8f0:	19 c0       	rjmp	.+50     	; 0x924 <__stack+0x25>
			{
				case I2C_STATUS_START_R:
					i2c_load_reg(i2c.reg_addr);
     8f2:	cd e3       	ldi	r28, 0x3D	; 61
     8f4:	d2 e0       	ldi	r29, 0x02	; 2
     8f6:	89 81       	ldd	r24, Y+1	; 0x01
     8f8:	0e 94 6e 03 	call	0x6dc	; 0x6dc <i2c_load_reg>
					i2c.state = I2C_STATE_DATA;
     8fc:	88 81       	ld	r24, Y
     8fe:	89 7f       	andi	r24, 0xF9	; 249
     900:	84 60       	ori	r24, 0x04	; 4
     902:	88 83       	st	Y, r24
				case I2C_STATUS_BYTE_W:
					if(i2c_buff_load_byte(&TWDR) || i2c_buff_empty())
     904:	8b eb       	ldi	r24, 0xBB	; 187
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	0e 94 09 03 	call	0x612	; 0x612 <i2c_buff_load_byte>
     90c:	81 11       	cpse	r24, r1
     90e:	04 c0       	rjmp	.+8      	; 0x918 <__stack+0x19>
     910:	0e 94 62 03 	call	0x6c4	; 0x6c4 <i2c_buff_empty>
     914:	88 23       	and	r24, r24
     916:	99 f0       	breq	.+38     	; 0x93e <__stack+0x3f>
					{
						TWCR &= ~(1<<TWEA);
     918:	ec eb       	ldi	r30, 0xBC	; 188
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	80 81       	ld	r24, Z
     91e:	8f 7b       	andi	r24, 0xBF	; 191
     920:	80 83       	st	Z, r24
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0x3f>
					}
					break;
				case I2C_STATUS_NAK_W:
				case I2C_STATUS_STOP_R:
				default:
					i2c_buff_flush();
     924:	0e 94 2c 03 	call	0x658	; 0x658 <i2c_buff_flush>
					TWCR |= (1<<TWEA);
     928:	ec eb       	ldi	r30, 0xBC	; 188
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	80 81       	ld	r24, Z
     92e:	80 64       	ori	r24, 0x40	; 64
     930:	80 83       	st	Z, r24
					i2c.mode = I2C_MODE_R;
     932:	ed e3       	ldi	r30, 0x3D	; 61
     934:	f2 e0       	ldi	r31, 0x02	; 2
     936:	80 81       	ld	r24, Z
					i2c.state = I2C_STATE_IDLE;
     938:	88 7f       	andi	r24, 0xF8	; 248
     93a:	80 83       	st	Z, r24
					i2c.num_bytes = 0;
     93c:	12 82       	std	Z+2, r1	; 0x02
			}
	}
	TWCR |= (1<<TWINT);
     93e:	ec eb       	ldi	r30, 0xBC	; 188
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	80 81       	ld	r24, Z
     944:	80 68       	ori	r24, 0x80	; 128
     946:	80 83       	st	Z, r24
     948:	ff 91       	pop	r31
     94a:	ef 91       	pop	r30
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	bf 91       	pop	r27
     952:	af 91       	pop	r26
     954:	9f 91       	pop	r25
     956:	8f 91       	pop	r24
     958:	7f 91       	pop	r23
     95a:	6f 91       	pop	r22
     95c:	5f 91       	pop	r21
     95e:	4f 91       	pop	r20
     960:	3f 91       	pop	r19
     962:	2f 91       	pop	r18
     964:	0f 90       	pop	r0
     966:	0f be       	out	0x3f, r0	; 63
     968:	0f 90       	pop	r0
     96a:	1f 90       	pop	r1
     96c:	18 95       	reti

0000096e <malloc>:
     96e:	cf 93       	push	r28
     970:	df 93       	push	r29
     972:	82 30       	cpi	r24, 0x02	; 2
     974:	91 05       	cpc	r25, r1
     976:	10 f4       	brcc	.+4      	; 0x97c <malloc+0xe>
     978:	82 e0       	ldi	r24, 0x02	; 2
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	e0 91 60 02 	lds	r30, 0x0260
     980:	f0 91 61 02 	lds	r31, 0x0261
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	c0 e0       	ldi	r28, 0x00	; 0
     98a:	d0 e0       	ldi	r29, 0x00	; 0
     98c:	30 97       	sbiw	r30, 0x00	; 0
     98e:	11 f1       	breq	.+68     	; 0x9d4 <malloc+0x66>
     990:	40 81       	ld	r20, Z
     992:	51 81       	ldd	r21, Z+1	; 0x01
     994:	48 17       	cp	r20, r24
     996:	59 07       	cpc	r21, r25
     998:	c0 f0       	brcs	.+48     	; 0x9ca <malloc+0x5c>
     99a:	48 17       	cp	r20, r24
     99c:	59 07       	cpc	r21, r25
     99e:	61 f4       	brne	.+24     	; 0x9b8 <malloc+0x4a>
     9a0:	82 81       	ldd	r24, Z+2	; 0x02
     9a2:	93 81       	ldd	r25, Z+3	; 0x03
     9a4:	20 97       	sbiw	r28, 0x00	; 0
     9a6:	19 f0       	breq	.+6      	; 0x9ae <malloc+0x40>
     9a8:	9b 83       	std	Y+3, r25	; 0x03
     9aa:	8a 83       	std	Y+2, r24	; 0x02
     9ac:	2b c0       	rjmp	.+86     	; 0xa04 <malloc+0x96>
     9ae:	90 93 61 02 	sts	0x0261, r25
     9b2:	80 93 60 02 	sts	0x0260, r24
     9b6:	26 c0       	rjmp	.+76     	; 0xa04 <malloc+0x96>
     9b8:	21 15       	cp	r18, r1
     9ba:	31 05       	cpc	r19, r1
     9bc:	19 f0       	breq	.+6      	; 0x9c4 <malloc+0x56>
     9be:	42 17       	cp	r20, r18
     9c0:	53 07       	cpc	r21, r19
     9c2:	18 f4       	brcc	.+6      	; 0x9ca <malloc+0x5c>
     9c4:	9a 01       	movw	r18, r20
     9c6:	be 01       	movw	r22, r28
     9c8:	df 01       	movw	r26, r30
     9ca:	ef 01       	movw	r28, r30
     9cc:	02 80       	ldd	r0, Z+2	; 0x02
     9ce:	f3 81       	ldd	r31, Z+3	; 0x03
     9d0:	e0 2d       	mov	r30, r0
     9d2:	dc cf       	rjmp	.-72     	; 0x98c <malloc+0x1e>
     9d4:	21 15       	cp	r18, r1
     9d6:	31 05       	cpc	r19, r1
     9d8:	09 f1       	breq	.+66     	; 0xa1c <malloc+0xae>
     9da:	28 1b       	sub	r18, r24
     9dc:	39 0b       	sbc	r19, r25
     9de:	24 30       	cpi	r18, 0x04	; 4
     9e0:	31 05       	cpc	r19, r1
     9e2:	90 f4       	brcc	.+36     	; 0xa08 <malloc+0x9a>
     9e4:	12 96       	adiw	r26, 0x02	; 2
     9e6:	8d 91       	ld	r24, X+
     9e8:	9c 91       	ld	r25, X
     9ea:	13 97       	sbiw	r26, 0x03	; 3
     9ec:	61 15       	cp	r22, r1
     9ee:	71 05       	cpc	r23, r1
     9f0:	21 f0       	breq	.+8      	; 0x9fa <malloc+0x8c>
     9f2:	fb 01       	movw	r30, r22
     9f4:	93 83       	std	Z+3, r25	; 0x03
     9f6:	82 83       	std	Z+2, r24	; 0x02
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <malloc+0x94>
     9fa:	90 93 61 02 	sts	0x0261, r25
     9fe:	80 93 60 02 	sts	0x0260, r24
     a02:	fd 01       	movw	r30, r26
     a04:	32 96       	adiw	r30, 0x02	; 2
     a06:	44 c0       	rjmp	.+136    	; 0xa90 <malloc+0x122>
     a08:	fd 01       	movw	r30, r26
     a0a:	e2 0f       	add	r30, r18
     a0c:	f3 1f       	adc	r31, r19
     a0e:	81 93       	st	Z+, r24
     a10:	91 93       	st	Z+, r25
     a12:	22 50       	subi	r18, 0x02	; 2
     a14:	31 09       	sbc	r19, r1
     a16:	2d 93       	st	X+, r18
     a18:	3c 93       	st	X, r19
     a1a:	3a c0       	rjmp	.+116    	; 0xa90 <malloc+0x122>
     a1c:	20 91 5e 02 	lds	r18, 0x025E
     a20:	30 91 5f 02 	lds	r19, 0x025F
     a24:	23 2b       	or	r18, r19
     a26:	41 f4       	brne	.+16     	; 0xa38 <malloc+0xca>
     a28:	20 91 02 01 	lds	r18, 0x0102
     a2c:	30 91 03 01 	lds	r19, 0x0103
     a30:	30 93 5f 02 	sts	0x025F, r19
     a34:	20 93 5e 02 	sts	0x025E, r18
     a38:	20 91 00 01 	lds	r18, 0x0100
     a3c:	30 91 01 01 	lds	r19, 0x0101
     a40:	21 15       	cp	r18, r1
     a42:	31 05       	cpc	r19, r1
     a44:	41 f4       	brne	.+16     	; 0xa56 <malloc+0xe8>
     a46:	2d b7       	in	r18, 0x3d	; 61
     a48:	3e b7       	in	r19, 0x3e	; 62
     a4a:	40 91 04 01 	lds	r20, 0x0104
     a4e:	50 91 05 01 	lds	r21, 0x0105
     a52:	24 1b       	sub	r18, r20
     a54:	35 0b       	sbc	r19, r21
     a56:	e0 91 5e 02 	lds	r30, 0x025E
     a5a:	f0 91 5f 02 	lds	r31, 0x025F
     a5e:	e2 17       	cp	r30, r18
     a60:	f3 07       	cpc	r31, r19
     a62:	a0 f4       	brcc	.+40     	; 0xa8c <malloc+0x11e>
     a64:	2e 1b       	sub	r18, r30
     a66:	3f 0b       	sbc	r19, r31
     a68:	28 17       	cp	r18, r24
     a6a:	39 07       	cpc	r19, r25
     a6c:	78 f0       	brcs	.+30     	; 0xa8c <malloc+0x11e>
     a6e:	ac 01       	movw	r20, r24
     a70:	4e 5f       	subi	r20, 0xFE	; 254
     a72:	5f 4f       	sbci	r21, 0xFF	; 255
     a74:	24 17       	cp	r18, r20
     a76:	35 07       	cpc	r19, r21
     a78:	48 f0       	brcs	.+18     	; 0xa8c <malloc+0x11e>
     a7a:	4e 0f       	add	r20, r30
     a7c:	5f 1f       	adc	r21, r31
     a7e:	50 93 5f 02 	sts	0x025F, r21
     a82:	40 93 5e 02 	sts	0x025E, r20
     a86:	81 93       	st	Z+, r24
     a88:	91 93       	st	Z+, r25
     a8a:	02 c0       	rjmp	.+4      	; 0xa90 <malloc+0x122>
     a8c:	e0 e0       	ldi	r30, 0x00	; 0
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	cf 01       	movw	r24, r30
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	08 95       	ret

00000a98 <free>:
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	00 97       	sbiw	r24, 0x00	; 0
     aa2:	09 f4       	brne	.+2      	; 0xaa6 <free+0xe>
     aa4:	8c c0       	rjmp	.+280    	; 0xbbe <free+0x126>
     aa6:	fc 01       	movw	r30, r24
     aa8:	32 97       	sbiw	r30, 0x02	; 2
     aaa:	13 82       	std	Z+3, r1	; 0x03
     aac:	12 82       	std	Z+2, r1	; 0x02
     aae:	00 91 60 02 	lds	r16, 0x0260
     ab2:	10 91 61 02 	lds	r17, 0x0261
     ab6:	01 15       	cp	r16, r1
     ab8:	11 05       	cpc	r17, r1
     aba:	81 f4       	brne	.+32     	; 0xadc <free+0x44>
     abc:	20 81       	ld	r18, Z
     abe:	31 81       	ldd	r19, Z+1	; 0x01
     ac0:	82 0f       	add	r24, r18
     ac2:	93 1f       	adc	r25, r19
     ac4:	20 91 5e 02 	lds	r18, 0x025E
     ac8:	30 91 5f 02 	lds	r19, 0x025F
     acc:	28 17       	cp	r18, r24
     ace:	39 07       	cpc	r19, r25
     ad0:	79 f5       	brne	.+94     	; 0xb30 <free+0x98>
     ad2:	f0 93 5f 02 	sts	0x025F, r31
     ad6:	e0 93 5e 02 	sts	0x025E, r30
     ada:	71 c0       	rjmp	.+226    	; 0xbbe <free+0x126>
     adc:	d8 01       	movw	r26, r16
     ade:	40 e0       	ldi	r20, 0x00	; 0
     ae0:	50 e0       	ldi	r21, 0x00	; 0
     ae2:	ae 17       	cp	r26, r30
     ae4:	bf 07       	cpc	r27, r31
     ae6:	50 f4       	brcc	.+20     	; 0xafc <free+0x64>
     ae8:	12 96       	adiw	r26, 0x02	; 2
     aea:	2d 91       	ld	r18, X+
     aec:	3c 91       	ld	r19, X
     aee:	13 97       	sbiw	r26, 0x03	; 3
     af0:	ad 01       	movw	r20, r26
     af2:	21 15       	cp	r18, r1
     af4:	31 05       	cpc	r19, r1
     af6:	09 f1       	breq	.+66     	; 0xb3a <free+0xa2>
     af8:	d9 01       	movw	r26, r18
     afa:	f3 cf       	rjmp	.-26     	; 0xae2 <free+0x4a>
     afc:	9d 01       	movw	r18, r26
     afe:	da 01       	movw	r26, r20
     b00:	33 83       	std	Z+3, r19	; 0x03
     b02:	22 83       	std	Z+2, r18	; 0x02
     b04:	60 81       	ld	r22, Z
     b06:	71 81       	ldd	r23, Z+1	; 0x01
     b08:	86 0f       	add	r24, r22
     b0a:	97 1f       	adc	r25, r23
     b0c:	82 17       	cp	r24, r18
     b0e:	93 07       	cpc	r25, r19
     b10:	69 f4       	brne	.+26     	; 0xb2c <free+0x94>
     b12:	ec 01       	movw	r28, r24
     b14:	28 81       	ld	r18, Y
     b16:	39 81       	ldd	r19, Y+1	; 0x01
     b18:	26 0f       	add	r18, r22
     b1a:	37 1f       	adc	r19, r23
     b1c:	2e 5f       	subi	r18, 0xFE	; 254
     b1e:	3f 4f       	sbci	r19, 0xFF	; 255
     b20:	31 83       	std	Z+1, r19	; 0x01
     b22:	20 83       	st	Z, r18
     b24:	8a 81       	ldd	r24, Y+2	; 0x02
     b26:	9b 81       	ldd	r25, Y+3	; 0x03
     b28:	93 83       	std	Z+3, r25	; 0x03
     b2a:	82 83       	std	Z+2, r24	; 0x02
     b2c:	45 2b       	or	r20, r21
     b2e:	29 f4       	brne	.+10     	; 0xb3a <free+0xa2>
     b30:	f0 93 61 02 	sts	0x0261, r31
     b34:	e0 93 60 02 	sts	0x0260, r30
     b38:	42 c0       	rjmp	.+132    	; 0xbbe <free+0x126>
     b3a:	13 96       	adiw	r26, 0x03	; 3
     b3c:	fc 93       	st	X, r31
     b3e:	ee 93       	st	-X, r30
     b40:	12 97       	sbiw	r26, 0x02	; 2
     b42:	ed 01       	movw	r28, r26
     b44:	49 91       	ld	r20, Y+
     b46:	59 91       	ld	r21, Y+
     b48:	9e 01       	movw	r18, r28
     b4a:	24 0f       	add	r18, r20
     b4c:	35 1f       	adc	r19, r21
     b4e:	e2 17       	cp	r30, r18
     b50:	f3 07       	cpc	r31, r19
     b52:	71 f4       	brne	.+28     	; 0xb70 <free+0xd8>
     b54:	80 81       	ld	r24, Z
     b56:	91 81       	ldd	r25, Z+1	; 0x01
     b58:	84 0f       	add	r24, r20
     b5a:	95 1f       	adc	r25, r21
     b5c:	02 96       	adiw	r24, 0x02	; 2
     b5e:	11 96       	adiw	r26, 0x01	; 1
     b60:	9c 93       	st	X, r25
     b62:	8e 93       	st	-X, r24
     b64:	82 81       	ldd	r24, Z+2	; 0x02
     b66:	93 81       	ldd	r25, Z+3	; 0x03
     b68:	13 96       	adiw	r26, 0x03	; 3
     b6a:	9c 93       	st	X, r25
     b6c:	8e 93       	st	-X, r24
     b6e:	12 97       	sbiw	r26, 0x02	; 2
     b70:	e0 e0       	ldi	r30, 0x00	; 0
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	d8 01       	movw	r26, r16
     b76:	12 96       	adiw	r26, 0x02	; 2
     b78:	8d 91       	ld	r24, X+
     b7a:	9c 91       	ld	r25, X
     b7c:	13 97       	sbiw	r26, 0x03	; 3
     b7e:	00 97       	sbiw	r24, 0x00	; 0
     b80:	19 f0       	breq	.+6      	; 0xb88 <free+0xf0>
     b82:	f8 01       	movw	r30, r16
     b84:	8c 01       	movw	r16, r24
     b86:	f6 cf       	rjmp	.-20     	; 0xb74 <free+0xdc>
     b88:	8d 91       	ld	r24, X+
     b8a:	9c 91       	ld	r25, X
     b8c:	98 01       	movw	r18, r16
     b8e:	2e 5f       	subi	r18, 0xFE	; 254
     b90:	3f 4f       	sbci	r19, 0xFF	; 255
     b92:	82 0f       	add	r24, r18
     b94:	93 1f       	adc	r25, r19
     b96:	20 91 5e 02 	lds	r18, 0x025E
     b9a:	30 91 5f 02 	lds	r19, 0x025F
     b9e:	28 17       	cp	r18, r24
     ba0:	39 07       	cpc	r19, r25
     ba2:	69 f4       	brne	.+26     	; 0xbbe <free+0x126>
     ba4:	30 97       	sbiw	r30, 0x00	; 0
     ba6:	29 f4       	brne	.+10     	; 0xbb2 <free+0x11a>
     ba8:	10 92 61 02 	sts	0x0261, r1
     bac:	10 92 60 02 	sts	0x0260, r1
     bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <free+0x11e>
     bb2:	13 82       	std	Z+3, r1	; 0x03
     bb4:	12 82       	std	Z+2, r1	; 0x02
     bb6:	10 93 5f 02 	sts	0x025F, r17
     bba:	00 93 5e 02 	sts	0x025E, r16
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	1f 91       	pop	r17
     bc4:	0f 91       	pop	r16
     bc6:	08 95       	ret

00000bc8 <sprintf>:
     bc8:	ae e0       	ldi	r26, 0x0E	; 14
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	ea ee       	ldi	r30, 0xEA	; 234
     bce:	f5 e0       	ldi	r31, 0x05	; 5
     bd0:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__prologue_saves__+0x1c>
     bd4:	0d 89       	ldd	r16, Y+21	; 0x15
     bd6:	1e 89       	ldd	r17, Y+22	; 0x16
     bd8:	86 e0       	ldi	r24, 0x06	; 6
     bda:	8c 83       	std	Y+4, r24	; 0x04
     bdc:	1a 83       	std	Y+2, r17	; 0x02
     bde:	09 83       	std	Y+1, r16	; 0x01
     be0:	8f ef       	ldi	r24, 0xFF	; 255
     be2:	9f e7       	ldi	r25, 0x7F	; 127
     be4:	9e 83       	std	Y+6, r25	; 0x06
     be6:	8d 83       	std	Y+5, r24	; 0x05
     be8:	ae 01       	movw	r20, r28
     bea:	47 5e       	subi	r20, 0xE7	; 231
     bec:	5f 4f       	sbci	r21, 0xFF	; 255
     bee:	6f 89       	ldd	r22, Y+23	; 0x17
     bf0:	78 8d       	ldd	r23, Y+24	; 0x18
     bf2:	ce 01       	movw	r24, r28
     bf4:	01 96       	adiw	r24, 0x01	; 1
     bf6:	0e 94 07 06 	call	0xc0e	; 0xc0e <vfprintf>
     bfa:	2f 81       	ldd	r18, Y+7	; 0x07
     bfc:	38 85       	ldd	r19, Y+8	; 0x08
     bfe:	f8 01       	movw	r30, r16
     c00:	e2 0f       	add	r30, r18
     c02:	f3 1f       	adc	r31, r19
     c04:	10 82       	st	Z, r1
     c06:	2e 96       	adiw	r28, 0x0e	; 14
     c08:	e4 e0       	ldi	r30, 0x04	; 4
     c0a:	0c 94 af 08 	jmp	0x115e	; 0x115e <__epilogue_restores__+0x1c>

00000c0e <vfprintf>:
     c0e:	ac e0       	ldi	r26, 0x0C	; 12
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	ed e0       	ldi	r30, 0x0D	; 13
     c14:	f6 e0       	ldi	r31, 0x06	; 6
     c16:	0c 94 85 08 	jmp	0x110a	; 0x110a <__prologue_saves__>
     c1a:	7c 01       	movw	r14, r24
     c1c:	6b 01       	movw	r12, r22
     c1e:	8a 01       	movw	r16, r20
     c20:	fc 01       	movw	r30, r24
     c22:	17 82       	std	Z+7, r1	; 0x07
     c24:	16 82       	std	Z+6, r1	; 0x06
     c26:	83 81       	ldd	r24, Z+3	; 0x03
     c28:	81 ff       	sbrs	r24, 1
     c2a:	bd c1       	rjmp	.+890    	; 0xfa6 <vfprintf+0x398>
     c2c:	ce 01       	movw	r24, r28
     c2e:	01 96       	adiw	r24, 0x01	; 1
     c30:	4c 01       	movw	r8, r24
     c32:	f7 01       	movw	r30, r14
     c34:	93 81       	ldd	r25, Z+3	; 0x03
     c36:	f6 01       	movw	r30, r12
     c38:	93 fd       	sbrc	r25, 3
     c3a:	85 91       	lpm	r24, Z+
     c3c:	93 ff       	sbrs	r25, 3
     c3e:	81 91       	ld	r24, Z+
     c40:	6f 01       	movw	r12, r30
     c42:	88 23       	and	r24, r24
     c44:	09 f4       	brne	.+2      	; 0xc48 <vfprintf+0x3a>
     c46:	ab c1       	rjmp	.+854    	; 0xf9e <vfprintf+0x390>
     c48:	85 32       	cpi	r24, 0x25	; 37
     c4a:	39 f4       	brne	.+14     	; 0xc5a <vfprintf+0x4c>
     c4c:	93 fd       	sbrc	r25, 3
     c4e:	85 91       	lpm	r24, Z+
     c50:	93 ff       	sbrs	r25, 3
     c52:	81 91       	ld	r24, Z+
     c54:	6f 01       	movw	r12, r30
     c56:	85 32       	cpi	r24, 0x25	; 37
     c58:	29 f4       	brne	.+10     	; 0xc64 <vfprintf+0x56>
     c5a:	b7 01       	movw	r22, r14
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	0e 94 ef 07 	call	0xfde	; 0xfde <fputc>
     c62:	e7 cf       	rjmp	.-50     	; 0xc32 <vfprintf+0x24>
     c64:	51 2c       	mov	r5, r1
     c66:	31 2c       	mov	r3, r1
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	20 32       	cpi	r18, 0x20	; 32
     c6c:	a0 f4       	brcc	.+40     	; 0xc96 <vfprintf+0x88>
     c6e:	8b 32       	cpi	r24, 0x2B	; 43
     c70:	69 f0       	breq	.+26     	; 0xc8c <vfprintf+0x7e>
     c72:	30 f4       	brcc	.+12     	; 0xc80 <vfprintf+0x72>
     c74:	80 32       	cpi	r24, 0x20	; 32
     c76:	59 f0       	breq	.+22     	; 0xc8e <vfprintf+0x80>
     c78:	83 32       	cpi	r24, 0x23	; 35
     c7a:	69 f4       	brne	.+26     	; 0xc96 <vfprintf+0x88>
     c7c:	20 61       	ori	r18, 0x10	; 16
     c7e:	2c c0       	rjmp	.+88     	; 0xcd8 <vfprintf+0xca>
     c80:	8d 32       	cpi	r24, 0x2D	; 45
     c82:	39 f0       	breq	.+14     	; 0xc92 <vfprintf+0x84>
     c84:	80 33       	cpi	r24, 0x30	; 48
     c86:	39 f4       	brne	.+14     	; 0xc96 <vfprintf+0x88>
     c88:	21 60       	ori	r18, 0x01	; 1
     c8a:	26 c0       	rjmp	.+76     	; 0xcd8 <vfprintf+0xca>
     c8c:	22 60       	ori	r18, 0x02	; 2
     c8e:	24 60       	ori	r18, 0x04	; 4
     c90:	23 c0       	rjmp	.+70     	; 0xcd8 <vfprintf+0xca>
     c92:	28 60       	ori	r18, 0x08	; 8
     c94:	21 c0       	rjmp	.+66     	; 0xcd8 <vfprintf+0xca>
     c96:	27 fd       	sbrc	r18, 7
     c98:	27 c0       	rjmp	.+78     	; 0xce8 <vfprintf+0xda>
     c9a:	30 ed       	ldi	r19, 0xD0	; 208
     c9c:	38 0f       	add	r19, r24
     c9e:	3a 30       	cpi	r19, 0x0A	; 10
     ca0:	78 f4       	brcc	.+30     	; 0xcc0 <vfprintf+0xb2>
     ca2:	26 ff       	sbrs	r18, 6
     ca4:	06 c0       	rjmp	.+12     	; 0xcb2 <vfprintf+0xa4>
     ca6:	fa e0       	ldi	r31, 0x0A	; 10
     ca8:	5f 9e       	mul	r5, r31
     caa:	30 0d       	add	r19, r0
     cac:	11 24       	eor	r1, r1
     cae:	53 2e       	mov	r5, r19
     cb0:	13 c0       	rjmp	.+38     	; 0xcd8 <vfprintf+0xca>
     cb2:	8a e0       	ldi	r24, 0x0A	; 10
     cb4:	38 9e       	mul	r3, r24
     cb6:	30 0d       	add	r19, r0
     cb8:	11 24       	eor	r1, r1
     cba:	33 2e       	mov	r3, r19
     cbc:	20 62       	ori	r18, 0x20	; 32
     cbe:	0c c0       	rjmp	.+24     	; 0xcd8 <vfprintf+0xca>
     cc0:	8e 32       	cpi	r24, 0x2E	; 46
     cc2:	21 f4       	brne	.+8      	; 0xccc <vfprintf+0xbe>
     cc4:	26 fd       	sbrc	r18, 6
     cc6:	6b c1       	rjmp	.+726    	; 0xf9e <vfprintf+0x390>
     cc8:	20 64       	ori	r18, 0x40	; 64
     cca:	06 c0       	rjmp	.+12     	; 0xcd8 <vfprintf+0xca>
     ccc:	8c 36       	cpi	r24, 0x6C	; 108
     cce:	11 f4       	brne	.+4      	; 0xcd4 <vfprintf+0xc6>
     cd0:	20 68       	ori	r18, 0x80	; 128
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <vfprintf+0xca>
     cd4:	88 36       	cpi	r24, 0x68	; 104
     cd6:	41 f4       	brne	.+16     	; 0xce8 <vfprintf+0xda>
     cd8:	f6 01       	movw	r30, r12
     cda:	93 fd       	sbrc	r25, 3
     cdc:	85 91       	lpm	r24, Z+
     cde:	93 ff       	sbrs	r25, 3
     ce0:	81 91       	ld	r24, Z+
     ce2:	6f 01       	movw	r12, r30
     ce4:	81 11       	cpse	r24, r1
     ce6:	c1 cf       	rjmp	.-126    	; 0xc6a <vfprintf+0x5c>
     ce8:	98 2f       	mov	r25, r24
     cea:	9f 7d       	andi	r25, 0xDF	; 223
     cec:	95 54       	subi	r25, 0x45	; 69
     cee:	93 30       	cpi	r25, 0x03	; 3
     cf0:	28 f4       	brcc	.+10     	; 0xcfc <vfprintf+0xee>
     cf2:	0c 5f       	subi	r16, 0xFC	; 252
     cf4:	1f 4f       	sbci	r17, 0xFF	; 255
     cf6:	ff e3       	ldi	r31, 0x3F	; 63
     cf8:	f9 83       	std	Y+1, r31	; 0x01
     cfa:	0d c0       	rjmp	.+26     	; 0xd16 <vfprintf+0x108>
     cfc:	83 36       	cpi	r24, 0x63	; 99
     cfe:	31 f0       	breq	.+12     	; 0xd0c <vfprintf+0xfe>
     d00:	83 37       	cpi	r24, 0x73	; 115
     d02:	71 f0       	breq	.+28     	; 0xd20 <vfprintf+0x112>
     d04:	83 35       	cpi	r24, 0x53	; 83
     d06:	09 f0       	breq	.+2      	; 0xd0a <vfprintf+0xfc>
     d08:	5b c0       	rjmp	.+182    	; 0xdc0 <vfprintf+0x1b2>
     d0a:	22 c0       	rjmp	.+68     	; 0xd50 <vfprintf+0x142>
     d0c:	f8 01       	movw	r30, r16
     d0e:	80 81       	ld	r24, Z
     d10:	89 83       	std	Y+1, r24	; 0x01
     d12:	0e 5f       	subi	r16, 0xFE	; 254
     d14:	1f 4f       	sbci	r17, 0xFF	; 255
     d16:	44 24       	eor	r4, r4
     d18:	43 94       	inc	r4
     d1a:	51 2c       	mov	r5, r1
     d1c:	54 01       	movw	r10, r8
     d1e:	15 c0       	rjmp	.+42     	; 0xd4a <vfprintf+0x13c>
     d20:	38 01       	movw	r6, r16
     d22:	f2 e0       	ldi	r31, 0x02	; 2
     d24:	6f 0e       	add	r6, r31
     d26:	71 1c       	adc	r7, r1
     d28:	f8 01       	movw	r30, r16
     d2a:	a0 80       	ld	r10, Z
     d2c:	b1 80       	ldd	r11, Z+1	; 0x01
     d2e:	26 ff       	sbrs	r18, 6
     d30:	03 c0       	rjmp	.+6      	; 0xd38 <vfprintf+0x12a>
     d32:	65 2d       	mov	r22, r5
     d34:	70 e0       	ldi	r23, 0x00	; 0
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <vfprintf+0x12e>
     d38:	6f ef       	ldi	r22, 0xFF	; 255
     d3a:	7f ef       	ldi	r23, 0xFF	; 255
     d3c:	c5 01       	movw	r24, r10
     d3e:	2c 87       	std	Y+12, r18	; 0x0c
     d40:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <strnlen>
     d44:	2c 01       	movw	r4, r24
     d46:	83 01       	movw	r16, r6
     d48:	2c 85       	ldd	r18, Y+12	; 0x0c
     d4a:	2f 77       	andi	r18, 0x7F	; 127
     d4c:	22 2e       	mov	r2, r18
     d4e:	17 c0       	rjmp	.+46     	; 0xd7e <vfprintf+0x170>
     d50:	38 01       	movw	r6, r16
     d52:	f2 e0       	ldi	r31, 0x02	; 2
     d54:	6f 0e       	add	r6, r31
     d56:	71 1c       	adc	r7, r1
     d58:	f8 01       	movw	r30, r16
     d5a:	a0 80       	ld	r10, Z
     d5c:	b1 80       	ldd	r11, Z+1	; 0x01
     d5e:	26 ff       	sbrs	r18, 6
     d60:	03 c0       	rjmp	.+6      	; 0xd68 <vfprintf+0x15a>
     d62:	65 2d       	mov	r22, r5
     d64:	70 e0       	ldi	r23, 0x00	; 0
     d66:	02 c0       	rjmp	.+4      	; 0xd6c <vfprintf+0x15e>
     d68:	6f ef       	ldi	r22, 0xFF	; 255
     d6a:	7f ef       	ldi	r23, 0xFF	; 255
     d6c:	c5 01       	movw	r24, r10
     d6e:	2c 87       	std	Y+12, r18	; 0x0c
     d70:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <strnlen_P>
     d74:	2c 01       	movw	r4, r24
     d76:	2c 85       	ldd	r18, Y+12	; 0x0c
     d78:	20 68       	ori	r18, 0x80	; 128
     d7a:	22 2e       	mov	r2, r18
     d7c:	83 01       	movw	r16, r6
     d7e:	23 fc       	sbrc	r2, 3
     d80:	1b c0       	rjmp	.+54     	; 0xdb8 <vfprintf+0x1aa>
     d82:	83 2d       	mov	r24, r3
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	48 16       	cp	r4, r24
     d88:	59 06       	cpc	r5, r25
     d8a:	b0 f4       	brcc	.+44     	; 0xdb8 <vfprintf+0x1aa>
     d8c:	b7 01       	movw	r22, r14
     d8e:	80 e2       	ldi	r24, 0x20	; 32
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	0e 94 ef 07 	call	0xfde	; 0xfde <fputc>
     d96:	3a 94       	dec	r3
     d98:	f4 cf       	rjmp	.-24     	; 0xd82 <vfprintf+0x174>
     d9a:	f5 01       	movw	r30, r10
     d9c:	27 fc       	sbrc	r2, 7
     d9e:	85 91       	lpm	r24, Z+
     da0:	27 fe       	sbrs	r2, 7
     da2:	81 91       	ld	r24, Z+
     da4:	5f 01       	movw	r10, r30
     da6:	b7 01       	movw	r22, r14
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	0e 94 ef 07 	call	0xfde	; 0xfde <fputc>
     dae:	31 10       	cpse	r3, r1
     db0:	3a 94       	dec	r3
     db2:	f1 e0       	ldi	r31, 0x01	; 1
     db4:	4f 1a       	sub	r4, r31
     db6:	51 08       	sbc	r5, r1
     db8:	41 14       	cp	r4, r1
     dba:	51 04       	cpc	r5, r1
     dbc:	71 f7       	brne	.-36     	; 0xd9a <vfprintf+0x18c>
     dbe:	e5 c0       	rjmp	.+458    	; 0xf8a <vfprintf+0x37c>
     dc0:	84 36       	cpi	r24, 0x64	; 100
     dc2:	11 f0       	breq	.+4      	; 0xdc8 <vfprintf+0x1ba>
     dc4:	89 36       	cpi	r24, 0x69	; 105
     dc6:	39 f5       	brne	.+78     	; 0xe16 <vfprintf+0x208>
     dc8:	f8 01       	movw	r30, r16
     dca:	27 ff       	sbrs	r18, 7
     dcc:	07 c0       	rjmp	.+14     	; 0xddc <vfprintf+0x1ce>
     dce:	60 81       	ld	r22, Z
     dd0:	71 81       	ldd	r23, Z+1	; 0x01
     dd2:	82 81       	ldd	r24, Z+2	; 0x02
     dd4:	93 81       	ldd	r25, Z+3	; 0x03
     dd6:	0c 5f       	subi	r16, 0xFC	; 252
     dd8:	1f 4f       	sbci	r17, 0xFF	; 255
     dda:	08 c0       	rjmp	.+16     	; 0xdec <vfprintf+0x1de>
     ddc:	60 81       	ld	r22, Z
     dde:	71 81       	ldd	r23, Z+1	; 0x01
     de0:	07 2e       	mov	r0, r23
     de2:	00 0c       	add	r0, r0
     de4:	88 0b       	sbc	r24, r24
     de6:	99 0b       	sbc	r25, r25
     de8:	0e 5f       	subi	r16, 0xFE	; 254
     dea:	1f 4f       	sbci	r17, 0xFF	; 255
     dec:	2f 76       	andi	r18, 0x6F	; 111
     dee:	72 2e       	mov	r7, r18
     df0:	97 ff       	sbrs	r25, 7
     df2:	09 c0       	rjmp	.+18     	; 0xe06 <vfprintf+0x1f8>
     df4:	90 95       	com	r25
     df6:	80 95       	com	r24
     df8:	70 95       	com	r23
     dfa:	61 95       	neg	r22
     dfc:	7f 4f       	sbci	r23, 0xFF	; 255
     dfe:	8f 4f       	sbci	r24, 0xFF	; 255
     e00:	9f 4f       	sbci	r25, 0xFF	; 255
     e02:	20 68       	ori	r18, 0x80	; 128
     e04:	72 2e       	mov	r7, r18
     e06:	2a e0       	ldi	r18, 0x0A	; 10
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	a4 01       	movw	r20, r8
     e0c:	0e 94 27 08 	call	0x104e	; 0x104e <__ultoa_invert>
     e10:	a8 2e       	mov	r10, r24
     e12:	a8 18       	sub	r10, r8
     e14:	44 c0       	rjmp	.+136    	; 0xe9e <vfprintf+0x290>
     e16:	85 37       	cpi	r24, 0x75	; 117
     e18:	29 f4       	brne	.+10     	; 0xe24 <vfprintf+0x216>
     e1a:	2f 7e       	andi	r18, 0xEF	; 239
     e1c:	b2 2e       	mov	r11, r18
     e1e:	2a e0       	ldi	r18, 0x0A	; 10
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	25 c0       	rjmp	.+74     	; 0xe6e <vfprintf+0x260>
     e24:	f2 2f       	mov	r31, r18
     e26:	f9 7f       	andi	r31, 0xF9	; 249
     e28:	bf 2e       	mov	r11, r31
     e2a:	8f 36       	cpi	r24, 0x6F	; 111
     e2c:	c1 f0       	breq	.+48     	; 0xe5e <vfprintf+0x250>
     e2e:	18 f4       	brcc	.+6      	; 0xe36 <vfprintf+0x228>
     e30:	88 35       	cpi	r24, 0x58	; 88
     e32:	79 f0       	breq	.+30     	; 0xe52 <vfprintf+0x244>
     e34:	b4 c0       	rjmp	.+360    	; 0xf9e <vfprintf+0x390>
     e36:	80 37       	cpi	r24, 0x70	; 112
     e38:	19 f0       	breq	.+6      	; 0xe40 <vfprintf+0x232>
     e3a:	88 37       	cpi	r24, 0x78	; 120
     e3c:	21 f0       	breq	.+8      	; 0xe46 <vfprintf+0x238>
     e3e:	af c0       	rjmp	.+350    	; 0xf9e <vfprintf+0x390>
     e40:	2f 2f       	mov	r18, r31
     e42:	20 61       	ori	r18, 0x10	; 16
     e44:	b2 2e       	mov	r11, r18
     e46:	b4 fe       	sbrs	r11, 4
     e48:	0d c0       	rjmp	.+26     	; 0xe64 <vfprintf+0x256>
     e4a:	8b 2d       	mov	r24, r11
     e4c:	84 60       	ori	r24, 0x04	; 4
     e4e:	b8 2e       	mov	r11, r24
     e50:	09 c0       	rjmp	.+18     	; 0xe64 <vfprintf+0x256>
     e52:	24 ff       	sbrs	r18, 4
     e54:	0a c0       	rjmp	.+20     	; 0xe6a <vfprintf+0x25c>
     e56:	9f 2f       	mov	r25, r31
     e58:	96 60       	ori	r25, 0x06	; 6
     e5a:	b9 2e       	mov	r11, r25
     e5c:	06 c0       	rjmp	.+12     	; 0xe6a <vfprintf+0x25c>
     e5e:	28 e0       	ldi	r18, 0x08	; 8
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	05 c0       	rjmp	.+10     	; 0xe6e <vfprintf+0x260>
     e64:	20 e1       	ldi	r18, 0x10	; 16
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <vfprintf+0x260>
     e6a:	20 e1       	ldi	r18, 0x10	; 16
     e6c:	32 e0       	ldi	r19, 0x02	; 2
     e6e:	f8 01       	movw	r30, r16
     e70:	b7 fe       	sbrs	r11, 7
     e72:	07 c0       	rjmp	.+14     	; 0xe82 <vfprintf+0x274>
     e74:	60 81       	ld	r22, Z
     e76:	71 81       	ldd	r23, Z+1	; 0x01
     e78:	82 81       	ldd	r24, Z+2	; 0x02
     e7a:	93 81       	ldd	r25, Z+3	; 0x03
     e7c:	0c 5f       	subi	r16, 0xFC	; 252
     e7e:	1f 4f       	sbci	r17, 0xFF	; 255
     e80:	06 c0       	rjmp	.+12     	; 0xe8e <vfprintf+0x280>
     e82:	60 81       	ld	r22, Z
     e84:	71 81       	ldd	r23, Z+1	; 0x01
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	0e 5f       	subi	r16, 0xFE	; 254
     e8c:	1f 4f       	sbci	r17, 0xFF	; 255
     e8e:	a4 01       	movw	r20, r8
     e90:	0e 94 27 08 	call	0x104e	; 0x104e <__ultoa_invert>
     e94:	a8 2e       	mov	r10, r24
     e96:	a8 18       	sub	r10, r8
     e98:	fb 2d       	mov	r31, r11
     e9a:	ff 77       	andi	r31, 0x7F	; 127
     e9c:	7f 2e       	mov	r7, r31
     e9e:	76 fe       	sbrs	r7, 6
     ea0:	0b c0       	rjmp	.+22     	; 0xeb8 <vfprintf+0x2aa>
     ea2:	37 2d       	mov	r19, r7
     ea4:	3e 7f       	andi	r19, 0xFE	; 254
     ea6:	a5 14       	cp	r10, r5
     ea8:	50 f4       	brcc	.+20     	; 0xebe <vfprintf+0x2b0>
     eaa:	74 fe       	sbrs	r7, 4
     eac:	0a c0       	rjmp	.+20     	; 0xec2 <vfprintf+0x2b4>
     eae:	72 fc       	sbrc	r7, 2
     eb0:	08 c0       	rjmp	.+16     	; 0xec2 <vfprintf+0x2b4>
     eb2:	37 2d       	mov	r19, r7
     eb4:	3e 7e       	andi	r19, 0xEE	; 238
     eb6:	05 c0       	rjmp	.+10     	; 0xec2 <vfprintf+0x2b4>
     eb8:	ba 2c       	mov	r11, r10
     eba:	37 2d       	mov	r19, r7
     ebc:	03 c0       	rjmp	.+6      	; 0xec4 <vfprintf+0x2b6>
     ebe:	ba 2c       	mov	r11, r10
     ec0:	01 c0       	rjmp	.+2      	; 0xec4 <vfprintf+0x2b6>
     ec2:	b5 2c       	mov	r11, r5
     ec4:	34 ff       	sbrs	r19, 4
     ec6:	0d c0       	rjmp	.+26     	; 0xee2 <vfprintf+0x2d4>
     ec8:	fe 01       	movw	r30, r28
     eca:	ea 0d       	add	r30, r10
     ecc:	f1 1d       	adc	r31, r1
     ece:	80 81       	ld	r24, Z
     ed0:	80 33       	cpi	r24, 0x30	; 48
     ed2:	11 f4       	brne	.+4      	; 0xed8 <vfprintf+0x2ca>
     ed4:	39 7e       	andi	r19, 0xE9	; 233
     ed6:	09 c0       	rjmp	.+18     	; 0xeea <vfprintf+0x2dc>
     ed8:	32 ff       	sbrs	r19, 2
     eda:	06 c0       	rjmp	.+12     	; 0xee8 <vfprintf+0x2da>
     edc:	b3 94       	inc	r11
     ede:	b3 94       	inc	r11
     ee0:	04 c0       	rjmp	.+8      	; 0xeea <vfprintf+0x2dc>
     ee2:	83 2f       	mov	r24, r19
     ee4:	86 78       	andi	r24, 0x86	; 134
     ee6:	09 f0       	breq	.+2      	; 0xeea <vfprintf+0x2dc>
     ee8:	b3 94       	inc	r11
     eea:	33 fd       	sbrc	r19, 3
     eec:	13 c0       	rjmp	.+38     	; 0xf14 <vfprintf+0x306>
     eee:	30 ff       	sbrs	r19, 0
     ef0:	06 c0       	rjmp	.+12     	; 0xefe <vfprintf+0x2f0>
     ef2:	5a 2c       	mov	r5, r10
     ef4:	b3 14       	cp	r11, r3
     ef6:	18 f4       	brcc	.+6      	; 0xefe <vfprintf+0x2f0>
     ef8:	53 0c       	add	r5, r3
     efa:	5b 18       	sub	r5, r11
     efc:	b3 2c       	mov	r11, r3
     efe:	b3 14       	cp	r11, r3
     f00:	68 f4       	brcc	.+26     	; 0xf1c <vfprintf+0x30e>
     f02:	b7 01       	movw	r22, r14
     f04:	80 e2       	ldi	r24, 0x20	; 32
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	3c 87       	std	Y+12, r19	; 0x0c
     f0a:	0e 94 ef 07 	call	0xfde	; 0xfde <fputc>
     f0e:	b3 94       	inc	r11
     f10:	3c 85       	ldd	r19, Y+12	; 0x0c
     f12:	f5 cf       	rjmp	.-22     	; 0xefe <vfprintf+0x2f0>
     f14:	b3 14       	cp	r11, r3
     f16:	10 f4       	brcc	.+4      	; 0xf1c <vfprintf+0x30e>
     f18:	3b 18       	sub	r3, r11
     f1a:	01 c0       	rjmp	.+2      	; 0xf1e <vfprintf+0x310>
     f1c:	31 2c       	mov	r3, r1
     f1e:	34 ff       	sbrs	r19, 4
     f20:	12 c0       	rjmp	.+36     	; 0xf46 <vfprintf+0x338>
     f22:	b7 01       	movw	r22, r14
     f24:	80 e3       	ldi	r24, 0x30	; 48
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	3c 87       	std	Y+12, r19	; 0x0c
     f2a:	0e 94 ef 07 	call	0xfde	; 0xfde <fputc>
     f2e:	3c 85       	ldd	r19, Y+12	; 0x0c
     f30:	32 ff       	sbrs	r19, 2
     f32:	17 c0       	rjmp	.+46     	; 0xf62 <vfprintf+0x354>
     f34:	31 fd       	sbrc	r19, 1
     f36:	03 c0       	rjmp	.+6      	; 0xf3e <vfprintf+0x330>
     f38:	88 e7       	ldi	r24, 0x78	; 120
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <vfprintf+0x334>
     f3e:	88 e5       	ldi	r24, 0x58	; 88
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	b7 01       	movw	r22, r14
     f44:	0c c0       	rjmp	.+24     	; 0xf5e <vfprintf+0x350>
     f46:	83 2f       	mov	r24, r19
     f48:	86 78       	andi	r24, 0x86	; 134
     f4a:	59 f0       	breq	.+22     	; 0xf62 <vfprintf+0x354>
     f4c:	31 ff       	sbrs	r19, 1
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <vfprintf+0x346>
     f50:	8b e2       	ldi	r24, 0x2B	; 43
     f52:	01 c0       	rjmp	.+2      	; 0xf56 <vfprintf+0x348>
     f54:	80 e2       	ldi	r24, 0x20	; 32
     f56:	37 fd       	sbrc	r19, 7
     f58:	8d e2       	ldi	r24, 0x2D	; 45
     f5a:	b7 01       	movw	r22, r14
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	0e 94 ef 07 	call	0xfde	; 0xfde <fputc>
     f62:	a5 14       	cp	r10, r5
     f64:	38 f4       	brcc	.+14     	; 0xf74 <vfprintf+0x366>
     f66:	b7 01       	movw	r22, r14
     f68:	80 e3       	ldi	r24, 0x30	; 48
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	0e 94 ef 07 	call	0xfde	; 0xfde <fputc>
     f70:	5a 94       	dec	r5
     f72:	f7 cf       	rjmp	.-18     	; 0xf62 <vfprintf+0x354>
     f74:	aa 94       	dec	r10
     f76:	f4 01       	movw	r30, r8
     f78:	ea 0d       	add	r30, r10
     f7a:	f1 1d       	adc	r31, r1
     f7c:	80 81       	ld	r24, Z
     f7e:	b7 01       	movw	r22, r14
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	0e 94 ef 07 	call	0xfde	; 0xfde <fputc>
     f86:	a1 10       	cpse	r10, r1
     f88:	f5 cf       	rjmp	.-22     	; 0xf74 <vfprintf+0x366>
     f8a:	33 20       	and	r3, r3
     f8c:	09 f4       	brne	.+2      	; 0xf90 <vfprintf+0x382>
     f8e:	51 ce       	rjmp	.-862    	; 0xc32 <vfprintf+0x24>
     f90:	b7 01       	movw	r22, r14
     f92:	80 e2       	ldi	r24, 0x20	; 32
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	0e 94 ef 07 	call	0xfde	; 0xfde <fputc>
     f9a:	3a 94       	dec	r3
     f9c:	f6 cf       	rjmp	.-20     	; 0xf8a <vfprintf+0x37c>
     f9e:	f7 01       	movw	r30, r14
     fa0:	86 81       	ldd	r24, Z+6	; 0x06
     fa2:	97 81       	ldd	r25, Z+7	; 0x07
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <vfprintf+0x39c>
     fa6:	8f ef       	ldi	r24, 0xFF	; 255
     fa8:	9f ef       	ldi	r25, 0xFF	; 255
     faa:	2c 96       	adiw	r28, 0x0c	; 12
     fac:	e2 e1       	ldi	r30, 0x12	; 18
     fae:	0c 94 a1 08 	jmp	0x1142	; 0x1142 <__epilogue_restores__>

00000fb2 <strnlen_P>:
     fb2:	fc 01       	movw	r30, r24
     fb4:	05 90       	lpm	r0, Z+
     fb6:	61 50       	subi	r22, 0x01	; 1
     fb8:	70 40       	sbci	r23, 0x00	; 0
     fba:	01 10       	cpse	r0, r1
     fbc:	d8 f7       	brcc	.-10     	; 0xfb4 <strnlen_P+0x2>
     fbe:	80 95       	com	r24
     fc0:	90 95       	com	r25
     fc2:	8e 0f       	add	r24, r30
     fc4:	9f 1f       	adc	r25, r31
     fc6:	08 95       	ret

00000fc8 <strnlen>:
     fc8:	fc 01       	movw	r30, r24
     fca:	61 50       	subi	r22, 0x01	; 1
     fcc:	70 40       	sbci	r23, 0x00	; 0
     fce:	01 90       	ld	r0, Z+
     fd0:	01 10       	cpse	r0, r1
     fd2:	d8 f7       	brcc	.-10     	; 0xfca <strnlen+0x2>
     fd4:	80 95       	com	r24
     fd6:	90 95       	com	r25
     fd8:	8e 0f       	add	r24, r30
     fda:	9f 1f       	adc	r25, r31
     fdc:	08 95       	ret

00000fde <fputc>:
     fde:	0f 93       	push	r16
     fe0:	1f 93       	push	r17
     fe2:	cf 93       	push	r28
     fe4:	df 93       	push	r29
     fe6:	fb 01       	movw	r30, r22
     fe8:	23 81       	ldd	r18, Z+3	; 0x03
     fea:	21 fd       	sbrc	r18, 1
     fec:	03 c0       	rjmp	.+6      	; 0xff4 <fputc+0x16>
     fee:	8f ef       	ldi	r24, 0xFF	; 255
     ff0:	9f ef       	ldi	r25, 0xFF	; 255
     ff2:	28 c0       	rjmp	.+80     	; 0x1044 <fputc+0x66>
     ff4:	22 ff       	sbrs	r18, 2
     ff6:	16 c0       	rjmp	.+44     	; 0x1024 <fputc+0x46>
     ff8:	46 81       	ldd	r20, Z+6	; 0x06
     ffa:	57 81       	ldd	r21, Z+7	; 0x07
     ffc:	24 81       	ldd	r18, Z+4	; 0x04
     ffe:	35 81       	ldd	r19, Z+5	; 0x05
    1000:	42 17       	cp	r20, r18
    1002:	53 07       	cpc	r21, r19
    1004:	44 f4       	brge	.+16     	; 0x1016 <fputc+0x38>
    1006:	a0 81       	ld	r26, Z
    1008:	b1 81       	ldd	r27, Z+1	; 0x01
    100a:	9d 01       	movw	r18, r26
    100c:	2f 5f       	subi	r18, 0xFF	; 255
    100e:	3f 4f       	sbci	r19, 0xFF	; 255
    1010:	31 83       	std	Z+1, r19	; 0x01
    1012:	20 83       	st	Z, r18
    1014:	8c 93       	st	X, r24
    1016:	26 81       	ldd	r18, Z+6	; 0x06
    1018:	37 81       	ldd	r19, Z+7	; 0x07
    101a:	2f 5f       	subi	r18, 0xFF	; 255
    101c:	3f 4f       	sbci	r19, 0xFF	; 255
    101e:	37 83       	std	Z+7, r19	; 0x07
    1020:	26 83       	std	Z+6, r18	; 0x06
    1022:	10 c0       	rjmp	.+32     	; 0x1044 <fputc+0x66>
    1024:	eb 01       	movw	r28, r22
    1026:	09 2f       	mov	r16, r25
    1028:	18 2f       	mov	r17, r24
    102a:	00 84       	ldd	r0, Z+8	; 0x08
    102c:	f1 85       	ldd	r31, Z+9	; 0x09
    102e:	e0 2d       	mov	r30, r0
    1030:	09 95       	icall
    1032:	89 2b       	or	r24, r25
    1034:	e1 f6       	brne	.-72     	; 0xfee <fputc+0x10>
    1036:	8e 81       	ldd	r24, Y+6	; 0x06
    1038:	9f 81       	ldd	r25, Y+7	; 0x07
    103a:	01 96       	adiw	r24, 0x01	; 1
    103c:	9f 83       	std	Y+7, r25	; 0x07
    103e:	8e 83       	std	Y+6, r24	; 0x06
    1040:	81 2f       	mov	r24, r17
    1042:	90 2f       	mov	r25, r16
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	1f 91       	pop	r17
    104a:	0f 91       	pop	r16
    104c:	08 95       	ret

0000104e <__ultoa_invert>:
    104e:	fa 01       	movw	r30, r20
    1050:	aa 27       	eor	r26, r26
    1052:	28 30       	cpi	r18, 0x08	; 8
    1054:	51 f1       	breq	.+84     	; 0x10aa <__ultoa_invert+0x5c>
    1056:	20 31       	cpi	r18, 0x10	; 16
    1058:	81 f1       	breq	.+96     	; 0x10ba <__ultoa_invert+0x6c>
    105a:	e8 94       	clt
    105c:	6f 93       	push	r22
    105e:	6e 7f       	andi	r22, 0xFE	; 254
    1060:	6e 5f       	subi	r22, 0xFE	; 254
    1062:	7f 4f       	sbci	r23, 0xFF	; 255
    1064:	8f 4f       	sbci	r24, 0xFF	; 255
    1066:	9f 4f       	sbci	r25, 0xFF	; 255
    1068:	af 4f       	sbci	r26, 0xFF	; 255
    106a:	b1 e0       	ldi	r27, 0x01	; 1
    106c:	3e d0       	rcall	.+124    	; 0x10ea <__ultoa_invert+0x9c>
    106e:	b4 e0       	ldi	r27, 0x04	; 4
    1070:	3c d0       	rcall	.+120    	; 0x10ea <__ultoa_invert+0x9c>
    1072:	67 0f       	add	r22, r23
    1074:	78 1f       	adc	r23, r24
    1076:	89 1f       	adc	r24, r25
    1078:	9a 1f       	adc	r25, r26
    107a:	a1 1d       	adc	r26, r1
    107c:	68 0f       	add	r22, r24
    107e:	79 1f       	adc	r23, r25
    1080:	8a 1f       	adc	r24, r26
    1082:	91 1d       	adc	r25, r1
    1084:	a1 1d       	adc	r26, r1
    1086:	6a 0f       	add	r22, r26
    1088:	71 1d       	adc	r23, r1
    108a:	81 1d       	adc	r24, r1
    108c:	91 1d       	adc	r25, r1
    108e:	a1 1d       	adc	r26, r1
    1090:	20 d0       	rcall	.+64     	; 0x10d2 <__ultoa_invert+0x84>
    1092:	09 f4       	brne	.+2      	; 0x1096 <__ultoa_invert+0x48>
    1094:	68 94       	set
    1096:	3f 91       	pop	r19
    1098:	2a e0       	ldi	r18, 0x0A	; 10
    109a:	26 9f       	mul	r18, r22
    109c:	11 24       	eor	r1, r1
    109e:	30 19       	sub	r19, r0
    10a0:	30 5d       	subi	r19, 0xD0	; 208
    10a2:	31 93       	st	Z+, r19
    10a4:	de f6       	brtc	.-74     	; 0x105c <__ultoa_invert+0xe>
    10a6:	cf 01       	movw	r24, r30
    10a8:	08 95       	ret
    10aa:	46 2f       	mov	r20, r22
    10ac:	47 70       	andi	r20, 0x07	; 7
    10ae:	40 5d       	subi	r20, 0xD0	; 208
    10b0:	41 93       	st	Z+, r20
    10b2:	b3 e0       	ldi	r27, 0x03	; 3
    10b4:	0f d0       	rcall	.+30     	; 0x10d4 <__ultoa_invert+0x86>
    10b6:	c9 f7       	brne	.-14     	; 0x10aa <__ultoa_invert+0x5c>
    10b8:	f6 cf       	rjmp	.-20     	; 0x10a6 <__ultoa_invert+0x58>
    10ba:	46 2f       	mov	r20, r22
    10bc:	4f 70       	andi	r20, 0x0F	; 15
    10be:	40 5d       	subi	r20, 0xD0	; 208
    10c0:	4a 33       	cpi	r20, 0x3A	; 58
    10c2:	18 f0       	brcs	.+6      	; 0x10ca <__ultoa_invert+0x7c>
    10c4:	49 5d       	subi	r20, 0xD9	; 217
    10c6:	31 fd       	sbrc	r19, 1
    10c8:	40 52       	subi	r20, 0x20	; 32
    10ca:	41 93       	st	Z+, r20
    10cc:	02 d0       	rcall	.+4      	; 0x10d2 <__ultoa_invert+0x84>
    10ce:	a9 f7       	brne	.-22     	; 0x10ba <__ultoa_invert+0x6c>
    10d0:	ea cf       	rjmp	.-44     	; 0x10a6 <__ultoa_invert+0x58>
    10d2:	b4 e0       	ldi	r27, 0x04	; 4
    10d4:	a6 95       	lsr	r26
    10d6:	97 95       	ror	r25
    10d8:	87 95       	ror	r24
    10da:	77 95       	ror	r23
    10dc:	67 95       	ror	r22
    10de:	ba 95       	dec	r27
    10e0:	c9 f7       	brne	.-14     	; 0x10d4 <__ultoa_invert+0x86>
    10e2:	00 97       	sbiw	r24, 0x00	; 0
    10e4:	61 05       	cpc	r22, r1
    10e6:	71 05       	cpc	r23, r1
    10e8:	08 95       	ret
    10ea:	9b 01       	movw	r18, r22
    10ec:	ac 01       	movw	r20, r24
    10ee:	0a 2e       	mov	r0, r26
    10f0:	06 94       	lsr	r0
    10f2:	57 95       	ror	r21
    10f4:	47 95       	ror	r20
    10f6:	37 95       	ror	r19
    10f8:	27 95       	ror	r18
    10fa:	ba 95       	dec	r27
    10fc:	c9 f7       	brne	.-14     	; 0x10f0 <__ultoa_invert+0xa2>
    10fe:	62 0f       	add	r22, r18
    1100:	73 1f       	adc	r23, r19
    1102:	84 1f       	adc	r24, r20
    1104:	95 1f       	adc	r25, r21
    1106:	a0 1d       	adc	r26, r0
    1108:	08 95       	ret

0000110a <__prologue_saves__>:
    110a:	2f 92       	push	r2
    110c:	3f 92       	push	r3
    110e:	4f 92       	push	r4
    1110:	5f 92       	push	r5
    1112:	6f 92       	push	r6
    1114:	7f 92       	push	r7
    1116:	8f 92       	push	r8
    1118:	9f 92       	push	r9
    111a:	af 92       	push	r10
    111c:	bf 92       	push	r11
    111e:	cf 92       	push	r12
    1120:	df 92       	push	r13
    1122:	ef 92       	push	r14
    1124:	ff 92       	push	r15
    1126:	0f 93       	push	r16
    1128:	1f 93       	push	r17
    112a:	cf 93       	push	r28
    112c:	df 93       	push	r29
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    1132:	ca 1b       	sub	r28, r26
    1134:	db 0b       	sbc	r29, r27
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	f8 94       	cli
    113a:	de bf       	out	0x3e, r29	; 62
    113c:	0f be       	out	0x3f, r0	; 63
    113e:	cd bf       	out	0x3d, r28	; 61
    1140:	09 94       	ijmp

00001142 <__epilogue_restores__>:
    1142:	2a 88       	ldd	r2, Y+18	; 0x12
    1144:	39 88       	ldd	r3, Y+17	; 0x11
    1146:	48 88       	ldd	r4, Y+16	; 0x10
    1148:	5f 84       	ldd	r5, Y+15	; 0x0f
    114a:	6e 84       	ldd	r6, Y+14	; 0x0e
    114c:	7d 84       	ldd	r7, Y+13	; 0x0d
    114e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1150:	9b 84       	ldd	r9, Y+11	; 0x0b
    1152:	aa 84       	ldd	r10, Y+10	; 0x0a
    1154:	b9 84       	ldd	r11, Y+9	; 0x09
    1156:	c8 84       	ldd	r12, Y+8	; 0x08
    1158:	df 80       	ldd	r13, Y+7	; 0x07
    115a:	ee 80       	ldd	r14, Y+6	; 0x06
    115c:	fd 80       	ldd	r15, Y+5	; 0x05
    115e:	0c 81       	ldd	r16, Y+4	; 0x04
    1160:	1b 81       	ldd	r17, Y+3	; 0x03
    1162:	aa 81       	ldd	r26, Y+2	; 0x02
    1164:	b9 81       	ldd	r27, Y+1	; 0x01
    1166:	ce 0f       	add	r28, r30
    1168:	d1 1d       	adc	r29, r1
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
    1174:	ed 01       	movw	r28, r26
    1176:	08 95       	ret

00001178 <_exit>:
    1178:	f8 94       	cli

0000117a <__stop_program>:
    117a:	ff cf       	rjmp	.-2      	; 0x117a <__stop_program>
