
FanCtl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  000010e4  00001178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012c  00800136  00800136  000011ae  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000120c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00001248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000963  00000000  00000000  00001318  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000030e  00000000  00000000  00001c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000075c  00000000  00000000  00001f89  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000378  00000000  00000000  000026e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039a  00000000  00000000  00002a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009e6  00000000  00000000  00002dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000037e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	6c c3       	rjmp	.+1752   	; 0x6e0 <__vector_3>
       8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
       a:	9e c3       	rjmp	.+1852   	; 0x748 <__vector_5>
       c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
       e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
      16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	48 c3       	rjmp	.+1680   	; 0x6b2 <__vector_16>
      22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
      24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
      26:	0a c1       	rjmp	.+532    	; 0x23c <__vector_19>
      28:	b2 c0       	rjmp	.+356    	; 0x18e <__vector_20>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	bf c3       	rjmp	.+1918   	; 0x7b0 <__vector_24>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	d4 e0       	ldi	r29, 0x04	; 4
      3c:	de bf       	out	0x3e, r29	; 62
      3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
      40:	11 e0       	ldi	r17, 0x01	; 1
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	b1 e0       	ldi	r27, 0x01	; 1
      46:	e4 ee       	ldi	r30, 0xE4	; 228
      48:	f0 e1       	ldi	r31, 0x10	; 16
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	a6 33       	cpi	r26, 0x36	; 54
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	22 e0       	ldi	r18, 0x02	; 2
      58:	a6 e3       	ldi	r26, 0x36	; 54
      5a:	b1 e0       	ldi	r27, 0x01	; 1
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	a2 36       	cpi	r26, 0x62	; 98
      62:	b2 07       	cpc	r27, r18
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	21 d1       	rcall	.+578    	; 0x2aa <main>
      68:	3b c8       	rjmp	.-3978   	; 0xfffff0e0 <__eeprom_end+0xff7ef0e0>

0000006a <__bad_interrupt>:
      6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <uart_init>:
	{
		uart_send_byte(*data);
		data++;
	}
	UCSR0B |= (1<<TXCIE0); //uart0: Enable tx complete interrupt
}
      6c:	89 e1       	ldi	r24, 0x19	; 25
      6e:	90 e0       	ldi	r25, 0x00	; 0
      70:	90 93 c5 00 	sts	0x00C5, r25
      74:	80 93 c4 00 	sts	0x00C4, r24
      78:	8e e0       	ldi	r24, 0x0E	; 14
      7a:	80 93 c2 00 	sts	0x00C2, r24
      7e:	08 95       	ret

00000080 <uart_init_tx>:
      80:	e1 ec       	ldi	r30, 0xC1	; 193
      82:	f0 e0       	ldi	r31, 0x00	; 0
      84:	80 81       	ld	r24, Z
      86:	88 64       	ori	r24, 0x48	; 72
      88:	80 83       	st	Z, r24
      8a:	08 95       	ret

0000008c <uart_send_byte>:
      8c:	e0 91 07 01 	lds	r30, 0x0107
      90:	f0 91 08 01 	lds	r31, 0x0108
      94:	81 93       	st	Z+, r24
      96:	82 e0       	ldi	r24, 0x02	; 2
      98:	ec 33       	cpi	r30, 0x3C	; 60
      9a:	f8 07       	cpc	r31, r24
      9c:	10 f0       	brcs	.+4      	; 0xa2 <uart_send_byte+0x16>
      9e:	ec e3       	ldi	r30, 0x3C	; 60
      a0:	f1 e0       	ldi	r31, 0x01	; 1
      a2:	20 91 07 01 	lds	r18, 0x0107
      a6:	30 91 08 01 	lds	r19, 0x0108
      aa:	80 91 09 01 	lds	r24, 0x0109
      ae:	90 91 0a 01 	lds	r25, 0x010A
      b2:	28 17       	cp	r18, r24
      b4:	39 07       	cpc	r19, r25
      b6:	29 f4       	brne	.+10     	; 0xc2 <uart_send_byte+0x36>
      b8:	a1 ec       	ldi	r26, 0xC1	; 193
      ba:	b0 e0       	ldi	r27, 0x00	; 0
      bc:	8c 91       	ld	r24, X
      be:	80 62       	ori	r24, 0x20	; 32
      c0:	8c 93       	st	X, r24
      c2:	f0 93 08 01 	sts	0x0108, r31
      c6:	e0 93 07 01 	sts	0x0107, r30
      ca:	80 91 38 01 	lds	r24, 0x0138
      ce:	90 91 39 01 	lds	r25, 0x0139
      d2:	a0 91 3a 01 	lds	r26, 0x013A
      d6:	b0 91 3b 01 	lds	r27, 0x013B
      da:	01 96       	adiw	r24, 0x01	; 1
      dc:	a1 1d       	adc	r26, r1
      de:	b1 1d       	adc	r27, r1
      e0:	80 93 38 01 	sts	0x0138, r24
      e4:	90 93 39 01 	sts	0x0139, r25
      e8:	a0 93 3a 01 	sts	0x013A, r26
      ec:	b0 93 3b 01 	sts	0x013B, r27
      f0:	08 95       	ret

000000f2 <uart_write_async>:

///Asynchronously transmits the given null terminated string via the UART
void uart_write_async(char* str)
{
      f2:	cf 93       	push	r28
      f4:	df 93       	push	r29
      f6:	ec 01       	movw	r28, r24
	UCSR0B &= ~(1<<TXCIE0); //uart0: Disable tx complete interrupt
      f8:	e1 ec       	ldi	r30, 0xC1	; 193
      fa:	f0 e0       	ldi	r31, 0x00	; 0
      fc:	80 81       	ld	r24, Z
      fe:	8f 7b       	andi	r24, 0xBF	; 191
     100:	80 83       	st	Z, r24
	while(*str)
     102:	88 81       	ld	r24, Y
     104:	88 23       	and	r24, r24
     106:	29 f0       	breq	.+10     	; 0x112 <uart_write_async+0x20>
     108:	21 96       	adiw	r28, 0x01	; 1
	{
		uart_send_byte((unsigned char)*str);
     10a:	c0 df       	rcall	.-128    	; 0x8c <uart_send_byte>

///Asynchronously transmits the given null terminated string via the UART
void uart_write_async(char* str)
{
	UCSR0B &= ~(1<<TXCIE0); //uart0: Disable tx complete interrupt
	while(*str)
     10c:	89 91       	ld	r24, Y+
     10e:	81 11       	cpse	r24, r1
     110:	fc cf       	rjmp	.-8      	; 0x10a <uart_write_async+0x18>
	{
		uart_send_byte((unsigned char)*str);
		str++;
	}
	UCSR0B |= (1<<TXCIE0); //uart0: Enable tx complete interrupt
     112:	e1 ec       	ldi	r30, 0xC1	; 193
     114:	f0 e0       	ldi	r31, 0x00	; 0
     116:	80 81       	ld	r24, Z
     118:	80 64       	ori	r24, 0x40	; 64
     11a:	80 83       	st	Z, r24
}
     11c:	df 91       	pop	r29
     11e:	cf 91       	pop	r28
     120:	08 95       	ret

00000122 <uart_irq_tx>:

///This function must be called when the overlying application handles the
///UART tx interrupt.
void uart_irq_tx(void)
{
	if(uart_tx_curpos_ring != uart_tx_targpos_ring)
     122:	e0 91 09 01 	lds	r30, 0x0109
     126:	f0 91 0a 01 	lds	r31, 0x010A
     12a:	80 91 07 01 	lds	r24, 0x0107
     12e:	90 91 08 01 	lds	r25, 0x0108
     132:	e8 17       	cp	r30, r24
     134:	f9 07       	cpc	r31, r25
     136:	51 f1       	breq	.+84     	; 0x18c <uart_irq_tx+0x6a>
	{
		UDR0 = *uart_tx_curpos_ring; //Write byte from ringbuffer to UART
     138:	80 81       	ld	r24, Z
     13a:	80 93 c6 00 	sts	0x00C6, r24
		uart_tx_curpos_ring++;
     13e:	80 91 09 01 	lds	r24, 0x0109
     142:	90 91 0a 01 	lds	r25, 0x010A
     146:	01 96       	adiw	r24, 0x01	; 1
		if(uart_tx_curpos_ring >= UART_BUFF_LEN_TX + uart_tx_ring) //Wrap pointer if necessary
     148:	22 e0       	ldi	r18, 0x02	; 2
     14a:	8c 33       	cpi	r24, 0x3C	; 60
     14c:	92 07       	cpc	r25, r18
     14e:	28 f4       	brcc	.+10     	; 0x15a <uart_irq_tx+0x38>
void uart_irq_tx(void)
{
	if(uart_tx_curpos_ring != uart_tx_targpos_ring)
	{
		UDR0 = *uart_tx_curpos_ring; //Write byte from ringbuffer to UART
		uart_tx_curpos_ring++;
     150:	90 93 0a 01 	sts	0x010A, r25
     154:	80 93 09 01 	sts	0x0109, r24
     158:	06 c0       	rjmp	.+12     	; 0x166 <uart_irq_tx+0x44>
		if(uart_tx_curpos_ring >= UART_BUFF_LEN_TX + uart_tx_ring) //Wrap pointer if necessary
		{
			uart_tx_curpos_ring = uart_tx_ring;
     15a:	8c e3       	ldi	r24, 0x3C	; 60
     15c:	91 e0       	ldi	r25, 0x01	; 1
     15e:	90 93 0a 01 	sts	0x010A, r25
     162:	80 93 09 01 	sts	0x0109, r24
		}
		uart_tx_data_len--;
     166:	80 91 38 01 	lds	r24, 0x0138
     16a:	90 91 39 01 	lds	r25, 0x0139
     16e:	a0 91 3a 01 	lds	r26, 0x013A
     172:	b0 91 3b 01 	lds	r27, 0x013B
     176:	01 97       	sbiw	r24, 0x01	; 1
     178:	a1 09       	sbc	r26, r1
     17a:	b1 09       	sbc	r27, r1
     17c:	80 93 38 01 	sts	0x0138, r24
     180:	90 93 39 01 	sts	0x0139, r25
     184:	a0 93 3a 01 	sts	0x013A, r26
     188:	b0 93 3b 01 	sts	0x013B, r27
     18c:	08 95       	ret

0000018e <__vector_20>:
	}
}

#if UART_IRQ_HOOK_TX != TRUE
ISR(USART_TX_vect)
{
     18e:	1f 92       	push	r1
     190:	0f 92       	push	r0
     192:	0f b6       	in	r0, 0x3f	; 63
     194:	0f 92       	push	r0
     196:	11 24       	eor	r1, r1
     198:	2f 93       	push	r18
     19a:	3f 93       	push	r19
     19c:	4f 93       	push	r20
     19e:	5f 93       	push	r21
     1a0:	6f 93       	push	r22
     1a2:	7f 93       	push	r23
     1a4:	8f 93       	push	r24
     1a6:	9f 93       	push	r25
     1a8:	af 93       	push	r26
     1aa:	bf 93       	push	r27
     1ac:	ef 93       	push	r30
     1ae:	ff 93       	push	r31
	uart_irq_tx();
     1b0:	b8 df       	rcall	.-144    	; 0x122 <uart_irq_tx>
}
     1b2:	ff 91       	pop	r31
     1b4:	ef 91       	pop	r30
     1b6:	bf 91       	pop	r27
     1b8:	af 91       	pop	r26
     1ba:	9f 91       	pop	r25
     1bc:	8f 91       	pop	r24
     1be:	7f 91       	pop	r23
     1c0:	6f 91       	pop	r22
     1c2:	5f 91       	pop	r21
     1c4:	4f 91       	pop	r20
     1c6:	3f 91       	pop	r19
     1c8:	2f 91       	pop	r18
     1ca:	0f 90       	pop	r0
     1cc:	0f be       	out	0x3f, r0	; 63
     1ce:	0f 90       	pop	r0
     1d0:	1f 90       	pop	r1
     1d2:	18 95       	reti

000001d4 <uart_irq_udre>:

///This function must be called when the overlying application handles the
///UART data register empty interrupt.
void uart_irq_udre(void)
{
	UDR0 = *uart_tx_curpos_ring; //Push first byte to UDR to start the transmission
     1d4:	e0 91 09 01 	lds	r30, 0x0109
     1d8:	f0 91 0a 01 	lds	r31, 0x010A
     1dc:	80 81       	ld	r24, Z
     1de:	80 93 c6 00 	sts	0x00C6, r24
	uart_tx_curpos_ring++;
     1e2:	80 91 09 01 	lds	r24, 0x0109
     1e6:	90 91 0a 01 	lds	r25, 0x010A
     1ea:	01 96       	adiw	r24, 0x01	; 1
	if(uart_tx_curpos_ring >= UART_BUFF_LEN_TX + uart_tx_ring) //Wrap pointer if necessary
     1ec:	22 e0       	ldi	r18, 0x02	; 2
     1ee:	8c 33       	cpi	r24, 0x3C	; 60
     1f0:	92 07       	cpc	r25, r18
     1f2:	28 f4       	brcc	.+10     	; 0x1fe <uart_irq_udre+0x2a>
///This function must be called when the overlying application handles the
///UART data register empty interrupt.
void uart_irq_udre(void)
{
	UDR0 = *uart_tx_curpos_ring; //Push first byte to UDR to start the transmission
	uart_tx_curpos_ring++;
     1f4:	90 93 0a 01 	sts	0x010A, r25
     1f8:	80 93 09 01 	sts	0x0109, r24
     1fc:	06 c0       	rjmp	.+12     	; 0x20a <uart_irq_udre+0x36>
	if(uart_tx_curpos_ring >= UART_BUFF_LEN_TX + uart_tx_ring) //Wrap pointer if necessary
	{
		uart_tx_curpos_ring = uart_tx_ring;
     1fe:	8c e3       	ldi	r24, 0x3C	; 60
     200:	91 e0       	ldi	r25, 0x01	; 1
     202:	90 93 0a 01 	sts	0x010A, r25
     206:	80 93 09 01 	sts	0x0109, r24
	}
	UCSR0B &= ~(1<<UDRIE0); //uart0: Disable uart data-register-empty interrupt
     20a:	e1 ec       	ldi	r30, 0xC1	; 193
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	80 81       	ld	r24, Z
     210:	8f 7d       	andi	r24, 0xDF	; 223
     212:	80 83       	st	Z, r24
	uart_tx_data_len--;
     214:	80 91 38 01 	lds	r24, 0x0138
     218:	90 91 39 01 	lds	r25, 0x0139
     21c:	a0 91 3a 01 	lds	r26, 0x013A
     220:	b0 91 3b 01 	lds	r27, 0x013B
     224:	01 97       	sbiw	r24, 0x01	; 1
     226:	a1 09       	sbc	r26, r1
     228:	b1 09       	sbc	r27, r1
     22a:	80 93 38 01 	sts	0x0138, r24
     22e:	90 93 39 01 	sts	0x0139, r25
     232:	a0 93 3a 01 	sts	0x013A, r26
     236:	b0 93 3b 01 	sts	0x013B, r27
     23a:	08 95       	ret

0000023c <__vector_19>:
}

#if UART_IRQ_HOOK_UDRE != TRUE
ISR(USART_UDRE_vect)
{
     23c:	1f 92       	push	r1
     23e:	0f 92       	push	r0
     240:	0f b6       	in	r0, 0x3f	; 63
     242:	0f 92       	push	r0
     244:	11 24       	eor	r1, r1
     246:	2f 93       	push	r18
     248:	3f 93       	push	r19
     24a:	4f 93       	push	r20
     24c:	5f 93       	push	r21
     24e:	6f 93       	push	r22
     250:	7f 93       	push	r23
     252:	8f 93       	push	r24
     254:	9f 93       	push	r25
     256:	af 93       	push	r26
     258:	bf 93       	push	r27
     25a:	ef 93       	push	r30
     25c:	ff 93       	push	r31
	uart_irq_udre();
     25e:	ba df       	rcall	.-140    	; 0x1d4 <uart_irq_udre>
}
     260:	ff 91       	pop	r31
     262:	ef 91       	pop	r30
     264:	bf 91       	pop	r27
     266:	af 91       	pop	r26
     268:	9f 91       	pop	r25
     26a:	8f 91       	pop	r24
     26c:	7f 91       	pop	r23
     26e:	6f 91       	pop	r22
     270:	5f 91       	pop	r21
     272:	4f 91       	pop	r20
     274:	3f 91       	pop	r19
     276:	2f 91       	pop	r18
     278:	0f 90       	pop	r0
     27a:	0f be       	out	0x3f, r0	; 63
     27c:	0f 90       	pop	r0
     27e:	1f 90       	pop	r1
     280:	18 95       	reti

00000282 <alloc_i2c_reg>:
fan_t* fans[NUM_FANS];

#define I2C_ADDRESS 42

i2c_reg_t* alloc_i2c_reg(uint8_t size, uint8_t addr, void* target)
{
     282:	0f 93       	push	r16
     284:	1f 93       	push	r17
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	18 2f       	mov	r17, r24
     28c:	06 2f       	mov	r16, r22
     28e:	ea 01       	movw	r28, r20
	i2c_reg_t* reg = malloc(sizeof(i2c_reg_t));
     290:	84 e0       	ldi	r24, 0x04	; 4
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	32 d3       	rcall	.+1636   	; 0x8fa <malloc>
	reg->address = addr;
     296:	fc 01       	movw	r30, r24
     298:	00 83       	st	Z, r16
	reg->length = size;
     29a:	11 83       	std	Z+1, r17	; 0x01
	reg->target = target;
     29c:	d3 83       	std	Z+3, r29	; 0x03
     29e:	c2 83       	std	Z+2, r28	; 0x02
	return reg;
}
     2a0:	df 91       	pop	r29
     2a2:	cf 91       	pop	r28
     2a4:	1f 91       	pop	r17
     2a6:	0f 91       	pop	r16
     2a8:	08 95       	ret

000002aa <main>:

int main(void)
{
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
     2b2:	64 97       	sbiw	r28, 0x14	; 20
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	f8 94       	cli
     2b8:	de bf       	out	0x3e, r29	; 62
     2ba:	0f be       	out	0x3f, r0	; 63
     2bc:	cd bf       	out	0x3d, r28	; 61
	// Allocate fan structs
	i2c_num_regs = NUM_FANS * 2 + 1;
     2be:	89 e0       	ldi	r24, 0x09	; 9
     2c0:	80 93 3c 02 	sts	0x023C, r24
	i2c_regs = malloc(i2c_num_regs * sizeof(i2c_reg_t**));
     2c4:	82 e1       	ldi	r24, 0x12	; 18
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	18 d3       	rcall	.+1584   	; 0x8fa <malloc>
     2ca:	8c 01       	movw	r16, r24
     2cc:	90 93 55 02 	sts	0x0255, r25
     2d0:	80 93 54 02 	sts	0x0254, r24
	i2c_regs[0] = alloc_i2c_reg(1, 0, &num_fans);
     2d4:	46 e0       	ldi	r20, 0x06	; 6
     2d6:	51 e0       	ldi	r21, 0x01	; 1
     2d8:	60 e0       	ldi	r22, 0x00	; 0
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	d2 df       	rcall	.-92     	; 0x282 <alloc_i2c_reg>
     2de:	d8 01       	movw	r26, r16
     2e0:	8d 93       	st	X+, r24
     2e2:	9c 93       	st	X, r25
     2e4:	0f 2e       	mov	r0, r31
     2e6:	f6 e5       	ldi	r31, 0x56	; 86
     2e8:	af 2e       	mov	r10, r31
     2ea:	f2 e0       	ldi	r31, 0x02	; 2
     2ec:	bf 2e       	mov	r11, r31
     2ee:	f0 2d       	mov	r31, r0
     2f0:	0f 2e       	mov	r0, r31
     2f2:	fe e5       	ldi	r31, 0x5E	; 94
     2f4:	ef 2e       	mov	r14, r31
     2f6:	f2 e0       	ldi	r31, 0x02	; 2
     2f8:	ff 2e       	mov	r15, r31
     2fa:	f0 2d       	mov	r31, r0
     2fc:	85 01       	movw	r16, r10
	for(uint8_t i = 0; i < NUM_FANS; i++)
	{
		fans[i] = malloc(sizeof(fan_t));
     2fe:	88 e0       	ldi	r24, 0x08	; 8
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	fb d2       	rcall	.+1526   	; 0x8fa <malloc>
     304:	fc 01       	movw	r30, r24
     306:	d8 01       	movw	r26, r16
     308:	8d 93       	st	X+, r24
     30a:	9d 93       	st	X+, r25
     30c:	8d 01       	movw	r16, r26
		fans[i]->pulsecount = 0;
     30e:	16 82       	std	Z+6, r1	; 0x06
     310:	15 82       	std	Z+5, r1	; 0x05
		fans[i]->fault = 0;
     312:	14 82       	std	Z+4, r1	; 0x04
		fans[i]->sense = 0;
     314:	17 82       	std	Z+7, r1	; 0x07
{
	// Allocate fan structs
	i2c_num_regs = NUM_FANS * 2 + 1;
	i2c_regs = malloc(i2c_num_regs * sizeof(i2c_reg_t**));
	i2c_regs[0] = alloc_i2c_reg(1, 0, &num_fans);
	for(uint8_t i = 0; i < NUM_FANS; i++)
     316:	ae 15       	cp	r26, r14
     318:	bf 05       	cpc	r27, r15
     31a:	89 f7       	brne	.-30     	; 0x2fe <main+0x54>
		fans[i]->pulsecount = 0;
		fans[i]->fault = 0;
		fans[i]->sense = 0;
	}
	// Timer 0
	TCCR0A = (1<<COM0A0) | (1<<COM0A1) | (1<<COM0B0) | (1<<COM0B1) | (1<<WGM00) | (1<<WGM01); // Fast PWM, OC0A and OC0B inverted
     31c:	93 ef       	ldi	r25, 0xF3	; 243
     31e:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1<<CS01); // Prescaler = 8 => 3906 Hz
     320:	82 e0       	ldi	r24, 0x02	; 2
     322:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<TOIE0);
     324:	21 e0       	ldi	r18, 0x01	; 1
     326:	20 93 6e 00 	sts	0x006E, r18
	fans[0]->pwm_reg = &OCR0A;
     32a:	e6 e5       	ldi	r30, 0x56	; 86
     32c:	f2 e0       	ldi	r31, 0x02	; 2
     32e:	a0 81       	ld	r26, Z
     330:	b1 81       	ldd	r27, Z+1	; 0x01
     332:	27 e4       	ldi	r18, 0x47	; 71
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	2d 93       	st	X+, r18
     338:	3c 93       	st	X, r19
	fans[1]->pwm_reg = &OCR0B;
     33a:	a2 81       	ldd	r26, Z+2	; 0x02
     33c:	b3 81       	ldd	r27, Z+3	; 0x03
     33e:	28 e4       	ldi	r18, 0x48	; 72
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	2d 93       	st	X+, r18
     344:	3c 93       	st	X, r19
	// Timer 2
	TCCR2A = (1<<COM2A0) | (1<<COM2A1) | (1<<COM2B0) | (1<<COM2B1) | (1<<WGM20) | (1<<WGM21); // Fast PWM, OC0A and OC0B inverted
     346:	90 93 b0 00 	sts	0x00B0, r25
	TCCR2B = (1<<CS21); // Prescaler = 8 => 3906 Hz
     34a:	80 93 b1 00 	sts	0x00B1, r24
	fans[2]->pwm_reg = &OCR2A;
     34e:	a4 81       	ldd	r26, Z+4	; 0x04
     350:	b5 81       	ldd	r27, Z+5	; 0x05
     352:	83 eb       	ldi	r24, 0xB3	; 179
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	8d 93       	st	X+, r24
     358:	9c 93       	st	X, r25
	fans[3]->pwm_reg = &OCR2B;
     35a:	a6 81       	ldd	r26, Z+6	; 0x06
     35c:	b7 81       	ldd	r27, Z+7	; 0x07
     35e:	84 eb       	ldi	r24, 0xB4	; 180
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	8d 93       	st	X+, r24
     364:	9c 93       	st	X, r25
	// Enable output drivers on timer compare match outputs
	DDRB = (1<<PINB3);
     366:	88 e0       	ldi	r24, 0x08	; 8
     368:	84 b9       	out	0x04, r24	; 4
	DDRD = (1<<PIND3) | (1<<PIND5) | (1<<PIND6);
     36a:	88 e6       	ldi	r24, 0x68	; 104
     36c:	8a b9       	out	0x0a, r24	; 10
	// Set PWM levels on all outputs
	*(fans[0]->pwm_reg) = 0;
     36e:	a0 81       	ld	r26, Z
     370:	b1 81       	ldd	r27, Z+1	; 0x01
     372:	0d 90       	ld	r0, X+
     374:	bc 91       	ld	r27, X
     376:	a0 2d       	mov	r26, r0
     378:	1c 92       	st	X, r1
	*(fans[1]->pwm_reg) = 0;
     37a:	a2 81       	ldd	r26, Z+2	; 0x02
     37c:	b3 81       	ldd	r27, Z+3	; 0x03
     37e:	0d 90       	ld	r0, X+
     380:	bc 91       	ld	r27, X
     382:	a0 2d       	mov	r26, r0
     384:	1c 92       	st	X, r1
	*(fans[2]->pwm_reg) = 0;
     386:	a4 81       	ldd	r26, Z+4	; 0x04
     388:	b5 81       	ldd	r27, Z+5	; 0x05
     38a:	0d 90       	ld	r0, X+
     38c:	bc 91       	ld	r27, X
     38e:	a0 2d       	mov	r26, r0
     390:	1c 92       	st	X, r1
	*(fans[3]->pwm_reg) = 0;
     392:	06 80       	ldd	r0, Z+6	; 0x06
     394:	f7 81       	ldd	r31, Z+7	; 0x07
     396:	e0 2d       	mov	r30, r0
     398:	01 90       	ld	r0, Z+
     39a:	f0 81       	ld	r31, Z
     39c:	e0 2d       	mov	r30, r0
     39e:	10 82       	st	Z, r1
	
	PORTB = (1<<PINB6) | (1<<PINB7);
     3a0:	90 ec       	ldi	r25, 0xC0	; 192
     3a2:	95 b9       	out	0x05, r25	; 5
	PORTD = (1<<PIND2) | (1<<PIND4);
     3a4:	84 e1       	ldi	r24, 0x14	; 20
     3a6:	8b b9       	out	0x0b, r24	; 11

	// Enable pin change interrupts on PCINT 6, 7, 18, 20
	PCICR = (1<<PCIE2) | (1<<PCIE0);
     3a8:	25 e0       	ldi	r18, 0x05	; 5
     3aa:	20 93 68 00 	sts	0x0068, r18
	PCMSK0 = (1<<PCINT6) | (1<<PCINT7);
     3ae:	90 93 6b 00 	sts	0x006B, r25
	PCMSK2 = (1<<PCINT18) | (1<<PCINT20);
     3b2:	80 93 6d 00 	sts	0x006D, r24
	
	// Init I2C
	TWCR = (1<<TWIE) | (1<<TWEA) | (1<<TWEN);
     3b6:	85 e4       	ldi	r24, 0x45	; 69
     3b8:	80 93 bc 00 	sts	0x00BC, r24
	TWAR = (I2C_ADDRESS<<1);
     3bc:	84 e5       	ldi	r24, 0x54	; 84
     3be:	80 93 ba 00 	sts	0x00BA, r24
	i2c.state = I2C_STATE_IDLE;
     3c2:	ed e3       	ldi	r30, 0x3D	; 61
     3c4:	f2 e0       	ldi	r31, 0x02	; 2
     3c6:	80 81       	ld	r24, Z
	i2c.mode = I2C_MODE_R;
     3c8:	89 7f       	andi	r24, 0xF9	; 249
     3ca:	8e 7f       	andi	r24, 0xFE	; 254
     3cc:	80 83       	st	Z, r24
	i2c.buff_r = i2c.buff;
     3ce:	80 e4       	ldi	r24, 0x40	; 64
     3d0:	92 e0       	ldi	r25, 0x02	; 2
     3d2:	94 8b       	std	Z+20, r25	; 0x14
     3d4:	83 8b       	std	Z+19, r24	; 0x13
	i2c.buff_w = i2c.buff;
     3d6:	96 8b       	std	Z+22, r25	; 0x16
     3d8:	85 8b       	std	Z+21, r24	; 0x15
     3da:	06 e5       	ldi	r16, 0x56	; 86
     3dc:	12 e0       	ldi	r17, 0x02	; 2
     3de:	77 24       	eor	r7, r7
     3e0:	73 94       	inc	r7
     3e2:	68 94       	set
     3e4:	ee 24       	eor	r14, r14
     3e6:	e1 f8       	bld	r14, 1
     3e8:	f1 2c       	mov	r15, r1
	for(uint8_t i = 0; i < NUM_FANS; i++)
	{
		i2c_regs[i * 2 + 1] =  alloc_i2c_reg(1, i * 2, fans[i]->pwm_reg);
     3ea:	c0 90 54 02 	lds	r12, 0x0254
     3ee:	d0 90 55 02 	lds	r13, 0x0255
     3f2:	ce 0c       	add	r12, r14
     3f4:	df 1c       	adc	r13, r15
     3f6:	d8 01       	movw	r26, r16
     3f8:	ed 91       	ld	r30, X+
     3fa:	fc 91       	ld	r31, X
     3fc:	40 81       	ld	r20, Z
     3fe:	51 81       	ldd	r21, Z+1	; 0x01
     400:	60 2f       	mov	r22, r16
     402:	6a 19       	sub	r22, r10
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	3d df       	rcall	.-390    	; 0x282 <alloc_i2c_reg>
     408:	f6 01       	movw	r30, r12
     40a:	91 83       	std	Z+1, r25	; 0x01
     40c:	80 83       	st	Z, r24
		i2c_regs[i * 2 + 2] =  alloc_i2c_reg(2, i * 2 + 1, &fans[i]->rpm);
     40e:	c7 01       	movw	r24, r14
     410:	02 96       	adiw	r24, 0x02	; 2
     412:	c0 90 54 02 	lds	r12, 0x0254
     416:	d0 90 55 02 	lds	r13, 0x0255
     41a:	c8 0e       	add	r12, r24
     41c:	d9 1e       	adc	r13, r25
     41e:	f8 01       	movw	r30, r16
     420:	40 81       	ld	r20, Z
     422:	51 81       	ldd	r21, Z+1	; 0x01
     424:	0e 5f       	subi	r16, 0xFE	; 254
     426:	1f 4f       	sbci	r17, 0xFF	; 255
     428:	4e 5f       	subi	r20, 0xFE	; 254
     42a:	5f 4f       	sbci	r21, 0xFF	; 255
     42c:	67 2d       	mov	r22, r7
     42e:	82 e0       	ldi	r24, 0x02	; 2
     430:	28 df       	rcall	.-432    	; 0x282 <alloc_i2c_reg>
     432:	d6 01       	movw	r26, r12
     434:	8d 93       	st	X+, r24
     436:	9c 93       	st	X, r25
     438:	b4 e0       	ldi	r27, 0x04	; 4
     43a:	eb 0e       	add	r14, r27
     43c:	f1 1c       	adc	r15, r1
     43e:	73 94       	inc	r7
     440:	73 94       	inc	r7
	TWAR = (I2C_ADDRESS<<1);
	i2c.state = I2C_STATE_IDLE;
	i2c.mode = I2C_MODE_R;
	i2c.buff_r = i2c.buff;
	i2c.buff_w = i2c.buff;
	for(uint8_t i = 0; i < NUM_FANS; i++)
     442:	e9 e0       	ldi	r30, 0x09	; 9
     444:	7e 12       	cpse	r7, r30
     446:	d1 cf       	rjmp	.-94     	; 0x3ea <main+0x140>
	{
		i2c_regs[i * 2 + 1] =  alloc_i2c_reg(1, i * 2, fans[i]->pwm_reg);
		i2c_regs[i * 2 + 2] =  alloc_i2c_reg(2, i * 2 + 1, &fans[i]->rpm);
	}
			
	DDRB |= (1<<PINB0);
     448:	20 9a       	sbi	0x04, 0	; 4
		
	// Init UART
	char str[20];
	uart_init();
     44a:	10 de       	rcall	.-992    	; 0x6c <uart_init>
	uart_init_tx();
     44c:	19 de       	rcall	.-974    	; 0x80 <uart_init_tx>
	uart_write_async("Hello World\n");	
     44e:	8b e0       	ldi	r24, 0x0B	; 11
     450:	91 e0       	ldi	r25, 0x01	; 1
     452:	4f de       	rcall	.-866    	; 0xf2 <uart_write_async>
	sprintf(str, "Num fans  %u \n", *((uint8_t*)i2c_regs[0]->target));
     454:	e0 91 54 02 	lds	r30, 0x0254
     458:	f0 91 55 02 	lds	r31, 0x0255
     45c:	01 90       	ld	r0, Z+
     45e:	f0 81       	ld	r31, Z
     460:	e0 2d       	mov	r30, r0
     462:	02 80       	ldd	r0, Z+2	; 0x02
     464:	f3 81       	ldd	r31, Z+3	; 0x03
     466:	e0 2d       	mov	r30, r0
     468:	80 81       	ld	r24, Z
     46a:	1f 92       	push	r1
     46c:	8f 93       	push	r24
     46e:	88 e1       	ldi	r24, 0x18	; 24
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	9f 93       	push	r25
     474:	8f 93       	push	r24
     476:	8e 01       	movw	r16, r28
     478:	0f 5f       	subi	r16, 0xFF	; 255
     47a:	1f 4f       	sbci	r17, 0xFF	; 255
     47c:	1f 93       	push	r17
     47e:	0f 93       	push	r16
     480:	69 d3       	rcall	.+1746   	; 0xb54 <sprintf>
	uart_write_async(str);
     482:	c8 01       	movw	r24, r16
     484:	36 de       	rcall	.-916    	; 0xf2 <uart_write_async>

	sei();
     486:	78 94       	sei
     488:	0f 90       	pop	r0
     48a:	0f 90       	pop	r0
     48c:	0f 90       	pop	r0
     48e:	0f 90       	pop	r0
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
    while (1)
    {
		PORTB = PORTB ^ (1<<0);
     494:	dd 24       	eor	r13, r13
     496:	d3 94       	inc	r13
     498:	3a 2c       	mov	r3, r10
     49a:	4b 2c       	mov	r4, r11
     49c:	51 2c       	mov	r5, r1
     49e:	61 2c       	mov	r6, r1
		{
			for(uint8_t i = 0; i < NUM_FANS; i++)
			{
				fans[i]->rpm = fans[i]->pulsecount * (20 / 4);
				fans[i]->pulsecount = 0;
				sprintf(str, "FAN%u: %u rpm\n", i, fans[i]->rpm);
     4a0:	0f 2e       	mov	r0, r31
     4a2:	f7 e2       	ldi	r31, 0x27	; 39
     4a4:	af 2e       	mov	r10, r31
     4a6:	f1 e0       	ldi	r31, 0x01	; 1
     4a8:	bf 2e       	mov	r11, r31
     4aa:	f0 2d       	mov	r31, r0
     4ac:	48 01       	movw	r8, r16
     4ae:	70 2e       	mov	r7, r16
     4b0:	c9 2c       	mov	r12, r9
	uart_write_async(str);

	sei();
    while (1)
    {
		PORTB = PORTB ^ (1<<0);
     4b2:	85 b1       	in	r24, 0x05	; 5
     4b4:	8d 25       	eor	r24, r13
     4b6:	85 b9       	out	0x05, r24	; 5
		set_sleep_mode(SLEEP_MODE_IDLE);
     4b8:	83 b7       	in	r24, 0x33	; 51
     4ba:	81 7f       	andi	r24, 0xF1	; 241
     4bc:	83 bf       	out	0x33, r24	; 51
		sleep_enable();
     4be:	23 b7       	in	r18, 0x33	; 51
     4c0:	21 60       	ori	r18, 0x01	; 1
     4c2:	23 bf       	out	0x33, r18	; 51
		sleep_cpu();
     4c4:	88 95       	sleep
		if(tm0_cnt == THREE_SECONDS)
     4c6:	80 91 36 01 	lds	r24, 0x0136
     4ca:	90 91 37 01 	lds	r25, 0x0137
     4ce:	87 3c       	cpi	r24, 0xC7	; 199
     4d0:	9d 42       	sbci	r25, 0x2D	; 45
     4d2:	79 f7       	brne	.-34     	; 0x4b2 <__FUSE_REGION_LENGTH__+0xb2>
     4d4:	e3 2c       	mov	r14, r3
     4d6:	f4 2c       	mov	r15, r4
     4d8:	05 2d       	mov	r16, r5
     4da:	16 2d       	mov	r17, r6
     4dc:	a7 01       	movw	r20, r14
		{
			for(uint8_t i = 0; i < NUM_FANS; i++)
			{
				fans[i]->rpm = fans[i]->pulsecount * (20 / 4);
     4de:	d7 01       	movw	r26, r14
     4e0:	ed 91       	ld	r30, X+
     4e2:	fc 91       	ld	r31, X
     4e4:	11 97       	sbiw	r26, 0x01	; 1
     4e6:	85 81       	ldd	r24, Z+5	; 0x05
     4e8:	96 81       	ldd	r25, Z+6	; 0x06
     4ea:	9c 01       	movw	r18, r24
     4ec:	22 0f       	add	r18, r18
     4ee:	33 1f       	adc	r19, r19
     4f0:	22 0f       	add	r18, r18
     4f2:	33 1f       	adc	r19, r19
     4f4:	82 0f       	add	r24, r18
     4f6:	93 1f       	adc	r25, r19
     4f8:	93 83       	std	Z+3, r25	; 0x03
     4fa:	82 83       	std	Z+2, r24	; 0x02
				fans[i]->pulsecount = 0;
     4fc:	ed 91       	ld	r30, X+
     4fe:	fd 91       	ld	r31, X+
     500:	7d 01       	movw	r14, r26
     502:	16 82       	std	Z+6, r1	; 0x06
     504:	15 82       	std	Z+5, r1	; 0x05
				sprintf(str, "FAN%u: %u rpm\n", i, fans[i]->rpm);
     506:	da 01       	movw	r26, r20
     508:	ed 91       	ld	r30, X+
     50a:	fc 91       	ld	r31, X
     50c:	83 81       	ldd	r24, Z+3	; 0x03
     50e:	8f 93       	push	r24
     510:	82 81       	ldd	r24, Z+2	; 0x02
     512:	8f 93       	push	r24
     514:	1f 93       	push	r17
     516:	0f 93       	push	r16
     518:	bf 92       	push	r11
     51a:	af 92       	push	r10
     51c:	9f 92       	push	r9
     51e:	8f 92       	push	r8
     520:	19 d3       	rcall	.+1586   	; 0xb54 <sprintf>
				uart_write_async(str);
     522:	87 2d       	mov	r24, r7
     524:	9c 2d       	mov	r25, r12
     526:	e5 dd       	rcall	.-1078   	; 0xf2 <uart_write_async>
     528:	0f 5f       	subi	r16, 0xFF	; 255
     52a:	1f 4f       	sbci	r17, 0xFF	; 255
		set_sleep_mode(SLEEP_MODE_IDLE);
		sleep_enable();
		sleep_cpu();
		if(tm0_cnt == THREE_SECONDS)
		{
			for(uint8_t i = 0; i < NUM_FANS; i++)
     52c:	0f b6       	in	r0, 0x3f	; 63
     52e:	f8 94       	cli
     530:	de bf       	out	0x3e, r29	; 62
     532:	0f be       	out	0x3f, r0	; 63
     534:	cd bf       	out	0x3d, r28	; 61
     536:	04 30       	cpi	r16, 0x04	; 4
     538:	11 05       	cpc	r17, r1
     53a:	81 f6       	brne	.-96     	; 0x4dc <__FUSE_REGION_LENGTH__+0xdc>
				fans[i]->rpm = fans[i]->pulsecount * (20 / 4);
				fans[i]->pulsecount = 0;
				sprintf(str, "FAN%u: %u rpm\n", i, fans[i]->rpm);
				uart_write_async(str);
			}
			tm0_cnt = 0;
     53c:	50 92 36 01 	sts	0x0136, r5
     540:	60 92 37 01 	sts	0x0137, r6
     544:	b6 cf       	rjmp	.-148    	; 0x4b2 <__FUSE_REGION_LENGTH__+0xb2>

00000546 <handle_counter>:
		}
    }
}

void handle_counter(fan_t* fan, uint8_t* port, uint8_t bit)
{
     546:	fc 01       	movw	r30, r24
	uint8_t state = *port>>bit & 0b1;
     548:	db 01       	movw	r26, r22
     54a:	2c 91       	ld	r18, X
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	02 c0       	rjmp	.+4      	; 0x554 <handle_counter+0xe>
     550:	35 95       	asr	r19
     552:	27 95       	ror	r18
     554:	4a 95       	dec	r20
     556:	e2 f7       	brpl	.-8      	; 0x550 <handle_counter+0xa>
     558:	21 70       	andi	r18, 0x01	; 1
	if(fan->sense != state)
     55a:	87 81       	ldd	r24, Z+7	; 0x07
     55c:	82 17       	cp	r24, r18
     55e:	31 f0       	breq	.+12     	; 0x56c <handle_counter+0x26>
	{
		fan->pulsecount++;
     560:	85 81       	ldd	r24, Z+5	; 0x05
     562:	96 81       	ldd	r25, Z+6	; 0x06
     564:	01 96       	adiw	r24, 0x01	; 1
     566:	96 83       	std	Z+6, r25	; 0x06
     568:	85 83       	std	Z+5, r24	; 0x05
		fan->sense = state;
     56a:	27 83       	std	Z+7, r18	; 0x07
     56c:	08 95       	ret

0000056e <i2c_buff_write>:
	}
}

void i2c_buff_write(uint8_t* data, uint8_t len)
{
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
	for(uint8_t i = 0; i < len; i++)
     572:	66 23       	and	r22, r22
     574:	f1 f0       	breq	.+60     	; 0x5b2 <i2c_buff_write+0x44>
     576:	dc 01       	movw	r26, r24
     578:	61 50       	subi	r22, 0x01	; 1
     57a:	46 2f       	mov	r20, r22
     57c:	50 e0       	ldi	r21, 0x00	; 0
     57e:	4f 5f       	subi	r20, 0xFF	; 255
     580:	5f 4f       	sbci	r21, 0xFF	; 255
     582:	48 0f       	add	r20, r24
     584:	59 1f       	adc	r21, r25
	{
		*i2c.buff_w = data[i];
     586:	ed e3       	ldi	r30, 0x3D	; 61
     588:	f2 e0       	ldi	r31, 0x02	; 2
		if(++i2c.buff_w == i2c.buff + I2C_BUFF_SIZE)
			i2c.buff_w = i2c.buff;
     58a:	60 e4       	ldi	r22, 0x40	; 64
     58c:	72 e0       	ldi	r23, 0x02	; 2

void i2c_buff_write(uint8_t* data, uint8_t len)
{
	for(uint8_t i = 0; i < len; i++)
	{
		*i2c.buff_w = data[i];
     58e:	c5 89       	ldd	r28, Z+21	; 0x15
     590:	d6 89       	ldd	r29, Z+22	; 0x16
     592:	9d 91       	ld	r25, X+
     594:	98 83       	st	Y, r25
		if(++i2c.buff_w == i2c.buff + I2C_BUFF_SIZE)
     596:	25 89       	ldd	r18, Z+21	; 0x15
     598:	36 89       	ldd	r19, Z+22	; 0x16
     59a:	2f 5f       	subi	r18, 0xFF	; 255
     59c:	3f 4f       	sbci	r19, 0xFF	; 255
     59e:	36 8b       	std	Z+22, r19	; 0x16
     5a0:	25 8b       	std	Z+21, r18	; 0x15
     5a2:	20 55       	subi	r18, 0x50	; 80
     5a4:	32 40       	sbci	r19, 0x02	; 2
     5a6:	11 f4       	brne	.+4      	; 0x5ac <i2c_buff_write+0x3e>
			i2c.buff_w = i2c.buff;
     5a8:	76 8b       	std	Z+22, r23	; 0x16
     5aa:	65 8b       	std	Z+21, r22	; 0x15
	}
}

void i2c_buff_write(uint8_t* data, uint8_t len)
{
	for(uint8_t i = 0; i < len; i++)
     5ac:	a4 17       	cp	r26, r20
     5ae:	b5 07       	cpc	r27, r21
     5b0:	71 f7       	brne	.-36     	; 0x58e <i2c_buff_write+0x20>
	{
		*i2c.buff_w = data[i];
		if(++i2c.buff_w == i2c.buff + I2C_BUFF_SIZE)
			i2c.buff_w = i2c.buff;
	}
}
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	08 95       	ret

000005b8 <i2c_buff_load_byte>:

uint8_t i2c_buff_load_byte(uint8_t* dst)
{
	*dst = *i2c.buff_r;
     5b8:	ed e3       	ldi	r30, 0x3D	; 61
     5ba:	f2 e0       	ldi	r31, 0x02	; 2
     5bc:	a3 89       	ldd	r26, Z+19	; 0x13
     5be:	b4 89       	ldd	r27, Z+20	; 0x14
     5c0:	2c 91       	ld	r18, X
     5c2:	dc 01       	movw	r26, r24
     5c4:	2c 93       	st	X, r18
	if(i2c.buff_r != i2c.buff_w)
     5c6:	83 89       	ldd	r24, Z+19	; 0x13
     5c8:	94 89       	ldd	r25, Z+20	; 0x14
     5ca:	25 89       	ldd	r18, Z+21	; 0x15
     5cc:	36 89       	ldd	r19, Z+22	; 0x16
     5ce:	82 17       	cp	r24, r18
     5d0:	93 07       	cpc	r25, r19
     5d2:	99 f0       	breq	.+38     	; 0x5fa <i2c_buff_load_byte+0x42>
	{
		i2c.buff_r++;
     5d4:	01 96       	adiw	r24, 0x01	; 1
		if(i2c.buff_r == i2c.buff + I2C_BUFF_SIZE)
     5d6:	b2 e0       	ldi	r27, 0x02	; 2
     5d8:	80 35       	cpi	r24, 0x50	; 80
     5da:	9b 07       	cpc	r25, r27
     5dc:	31 f0       	breq	.+12     	; 0x5ea <i2c_buff_load_byte+0x32>
uint8_t i2c_buff_load_byte(uint8_t* dst)
{
	*dst = *i2c.buff_r;
	if(i2c.buff_r != i2c.buff_w)
	{
		i2c.buff_r++;
     5de:	90 93 51 02 	sts	0x0251, r25
     5e2:	80 93 50 02 	sts	0x0250, r24
		if(i2c.buff_r == i2c.buff + I2C_BUFF_SIZE)
			i2c.buff_r = i2c.buff;
		return 0;
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	08 95       	ret
	*dst = *i2c.buff_r;
	if(i2c.buff_r != i2c.buff_w)
	{
		i2c.buff_r++;
		if(i2c.buff_r == i2c.buff + I2C_BUFF_SIZE)
			i2c.buff_r = i2c.buff;
     5ea:	80 e4       	ldi	r24, 0x40	; 64
     5ec:	92 e0       	ldi	r25, 0x02	; 2
     5ee:	90 93 51 02 	sts	0x0251, r25
     5f2:	80 93 50 02 	sts	0x0250, r24
		return 0;
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	08 95       	ret
	}
	
	return 1;
     5fa:	81 e0       	ldi	r24, 0x01	; 1
}
     5fc:	08 95       	ret

000005fe <i2c_buff_flush>:

void i2c_buff_flush()
{
	i2c.buff_r = i2c.buff_w;
     5fe:	ed e3       	ldi	r30, 0x3D	; 61
     600:	f2 e0       	ldi	r31, 0x02	; 2
     602:	85 89       	ldd	r24, Z+21	; 0x15
     604:	96 89       	ldd	r25, Z+22	; 0x16
     606:	94 8b       	std	Z+20, r25	; 0x14
     608:	83 8b       	std	Z+19, r24	; 0x13
     60a:	08 95       	ret

0000060c <i2c_write_reg>:
}

void i2c_write_reg(uint8_t reg)
{
     60c:	0f 93       	push	r16
     60e:	1f 93       	push	r17
     610:	cf 93       	push	r28
	if(reg >= i2c_num_regs)
     612:	90 91 3c 02 	lds	r25, 0x023C
     616:	89 17       	cp	r24, r25
     618:	18 f5       	brcc	.+70     	; 0x660 <i2c_write_reg+0x54>
		return;
	for(uint8_t i = 0; i < i2c_regs[reg]->length; i++)
     61a:	08 2f       	mov	r16, r24
     61c:	10 e0       	ldi	r17, 0x00	; 0
     61e:	00 0f       	add	r16, r16
     620:	11 1f       	adc	r17, r17
     622:	e0 91 54 02 	lds	r30, 0x0254
     626:	f0 91 55 02 	lds	r31, 0x0255
     62a:	e0 0f       	add	r30, r16
     62c:	f1 1f       	adc	r31, r17
     62e:	01 90       	ld	r0, Z+
     630:	f0 81       	ld	r31, Z
     632:	e0 2d       	mov	r30, r0
     634:	81 81       	ldd	r24, Z+1	; 0x01
     636:	88 23       	and	r24, r24
     638:	99 f0       	breq	.+38     	; 0x660 <i2c_write_reg+0x54>
     63a:	c0 e0       	ldi	r28, 0x00	; 0
	{
		i2c_buff_load_byte(i2c_regs[reg]->target + i);
     63c:	82 81       	ldd	r24, Z+2	; 0x02
     63e:	93 81       	ldd	r25, Z+3	; 0x03
     640:	8c 0f       	add	r24, r28
     642:	91 1d       	adc	r25, r1
     644:	b9 df       	rcall	.-142    	; 0x5b8 <i2c_buff_load_byte>

void i2c_write_reg(uint8_t reg)
{
	if(reg >= i2c_num_regs)
		return;
	for(uint8_t i = 0; i < i2c_regs[reg]->length; i++)
     646:	cf 5f       	subi	r28, 0xFF	; 255
     648:	e0 91 54 02 	lds	r30, 0x0254
     64c:	f0 91 55 02 	lds	r31, 0x0255
     650:	e0 0f       	add	r30, r16
     652:	f1 1f       	adc	r31, r17
     654:	01 90       	ld	r0, Z+
     656:	f0 81       	ld	r31, Z
     658:	e0 2d       	mov	r30, r0
     65a:	91 81       	ldd	r25, Z+1	; 0x01
     65c:	c9 17       	cp	r28, r25
     65e:	70 f3       	brcs	.-36     	; 0x63c <i2c_write_reg+0x30>
	{
		i2c_buff_load_byte(i2c_regs[reg]->target + i);
	}
}
     660:	cf 91       	pop	r28
     662:	1f 91       	pop	r17
     664:	0f 91       	pop	r16
     666:	08 95       	ret

00000668 <i2c_buff_empty>:

uint8_t i2c_buff_empty()
{
	return i2c.buff_r == i2c.buff_w;
     668:	ed e3       	ldi	r30, 0x3D	; 61
     66a:	f2 e0       	ldi	r31, 0x02	; 2
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	43 89       	ldd	r20, Z+19	; 0x13
     670:	54 89       	ldd	r21, Z+20	; 0x14
     672:	25 89       	ldd	r18, Z+21	; 0x15
     674:	36 89       	ldd	r19, Z+22	; 0x16
     676:	42 17       	cp	r20, r18
     678:	53 07       	cpc	r21, r19
     67a:	09 f0       	breq	.+2      	; 0x67e <i2c_buff_empty+0x16>
     67c:	80 e0       	ldi	r24, 0x00	; 0
}
     67e:	08 95       	ret

00000680 <i2c_load_reg>:

uint8_t i2c_load_reg(uint8_t reg_addr)
{
	if(reg_addr >= i2c_num_regs)
     680:	90 91 3c 02 	lds	r25, 0x023C
     684:	89 17       	cp	r24, r25
     686:	98 f4       	brcc	.+38     	; 0x6ae <i2c_load_reg+0x2e>
		return 1;
	i2c_buff_write(((uint8_t*)i2c_regs[reg_addr]->target), i2c_regs[reg_addr]->length);
     688:	e8 2f       	mov	r30, r24
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	ee 0f       	add	r30, r30
     68e:	ff 1f       	adc	r31, r31
     690:	80 91 54 02 	lds	r24, 0x0254
     694:	90 91 55 02 	lds	r25, 0x0255
     698:	e8 0f       	add	r30, r24
     69a:	f9 1f       	adc	r31, r25
     69c:	01 90       	ld	r0, Z+
     69e:	f0 81       	ld	r31, Z
     6a0:	e0 2d       	mov	r30, r0
     6a2:	61 81       	ldd	r22, Z+1	; 0x01
     6a4:	82 81       	ldd	r24, Z+2	; 0x02
     6a6:	93 81       	ldd	r25, Z+3	; 0x03
     6a8:	62 df       	rcall	.-316    	; 0x56e <i2c_buff_write>
	return 0;
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	08 95       	ret
}

uint8_t i2c_load_reg(uint8_t reg_addr)
{
	if(reg_addr >= i2c_num_regs)
		return 1;
     6ae:	81 e0       	ldi	r24, 0x01	; 1
	i2c_buff_write(((uint8_t*)i2c_regs[reg_addr]->target), i2c_regs[reg_addr]->length);
	return 0;
}
     6b0:	08 95       	ret

000006b2 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
     6b2:	1f 92       	push	r1
     6b4:	0f 92       	push	r0
     6b6:	0f b6       	in	r0, 0x3f	; 63
     6b8:	0f 92       	push	r0
     6ba:	11 24       	eor	r1, r1
     6bc:	8f 93       	push	r24
     6be:	9f 93       	push	r25
	tm0_cnt++;
     6c0:	80 91 36 01 	lds	r24, 0x0136
     6c4:	90 91 37 01 	lds	r25, 0x0137
     6c8:	01 96       	adiw	r24, 0x01	; 1
     6ca:	90 93 37 01 	sts	0x0137, r25
     6ce:	80 93 36 01 	sts	0x0136, r24
}
     6d2:	9f 91       	pop	r25
     6d4:	8f 91       	pop	r24
     6d6:	0f 90       	pop	r0
     6d8:	0f be       	out	0x3f, r0	; 63
     6da:	0f 90       	pop	r0
     6dc:	1f 90       	pop	r1
     6de:	18 95       	reti

000006e0 <__vector_3>:

ISR(PCINT0_vect)
{
     6e0:	1f 92       	push	r1
     6e2:	0f 92       	push	r0
     6e4:	0f b6       	in	r0, 0x3f	; 63
     6e6:	0f 92       	push	r0
     6e8:	11 24       	eor	r1, r1
     6ea:	2f 93       	push	r18
     6ec:	3f 93       	push	r19
     6ee:	4f 93       	push	r20
     6f0:	5f 93       	push	r21
     6f2:	6f 93       	push	r22
     6f4:	7f 93       	push	r23
     6f6:	8f 93       	push	r24
     6f8:	9f 93       	push	r25
     6fa:	af 93       	push	r26
     6fc:	bf 93       	push	r27
     6fe:	cf 93       	push	r28
     700:	df 93       	push	r29
     702:	ef 93       	push	r30
     704:	ff 93       	push	r31
	handle_counter(fans[0], &PINB, PINB6);
     706:	c6 e5       	ldi	r28, 0x56	; 86
     708:	d2 e0       	ldi	r29, 0x02	; 2
     70a:	46 e0       	ldi	r20, 0x06	; 6
     70c:	63 e2       	ldi	r22, 0x23	; 35
     70e:	70 e0       	ldi	r23, 0x00	; 0
     710:	88 81       	ld	r24, Y
     712:	99 81       	ldd	r25, Y+1	; 0x01
     714:	18 df       	rcall	.-464    	; 0x546 <handle_counter>
	handle_counter(fans[1], &PINB, PINB7);
     716:	47 e0       	ldi	r20, 0x07	; 7
     718:	63 e2       	ldi	r22, 0x23	; 35
     71a:	70 e0       	ldi	r23, 0x00	; 0
     71c:	8a 81       	ldd	r24, Y+2	; 0x02
     71e:	9b 81       	ldd	r25, Y+3	; 0x03
     720:	12 df       	rcall	.-476    	; 0x546 <handle_counter>
}
     722:	ff 91       	pop	r31
     724:	ef 91       	pop	r30
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	bf 91       	pop	r27
     72c:	af 91       	pop	r26
     72e:	9f 91       	pop	r25
     730:	8f 91       	pop	r24
     732:	7f 91       	pop	r23
     734:	6f 91       	pop	r22
     736:	5f 91       	pop	r21
     738:	4f 91       	pop	r20
     73a:	3f 91       	pop	r19
     73c:	2f 91       	pop	r18
     73e:	0f 90       	pop	r0
     740:	0f be       	out	0x3f, r0	; 63
     742:	0f 90       	pop	r0
     744:	1f 90       	pop	r1
     746:	18 95       	reti

00000748 <__vector_5>:

ISR(PCINT2_vect)
{
     748:	1f 92       	push	r1
     74a:	0f 92       	push	r0
     74c:	0f b6       	in	r0, 0x3f	; 63
     74e:	0f 92       	push	r0
     750:	11 24       	eor	r1, r1
     752:	2f 93       	push	r18
     754:	3f 93       	push	r19
     756:	4f 93       	push	r20
     758:	5f 93       	push	r21
     75a:	6f 93       	push	r22
     75c:	7f 93       	push	r23
     75e:	8f 93       	push	r24
     760:	9f 93       	push	r25
     762:	af 93       	push	r26
     764:	bf 93       	push	r27
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	ef 93       	push	r30
     76c:	ff 93       	push	r31
	handle_counter(fans[2], &PIND, PIND2);
     76e:	c6 e5       	ldi	r28, 0x56	; 86
     770:	d2 e0       	ldi	r29, 0x02	; 2
     772:	42 e0       	ldi	r20, 0x02	; 2
     774:	69 e2       	ldi	r22, 0x29	; 41
     776:	70 e0       	ldi	r23, 0x00	; 0
     778:	8c 81       	ldd	r24, Y+4	; 0x04
     77a:	9d 81       	ldd	r25, Y+5	; 0x05
     77c:	e4 de       	rcall	.-568    	; 0x546 <handle_counter>
	handle_counter(fans[3], &PIND, PIND4);
     77e:	44 e0       	ldi	r20, 0x04	; 4
     780:	69 e2       	ldi	r22, 0x29	; 41
     782:	70 e0       	ldi	r23, 0x00	; 0
     784:	8e 81       	ldd	r24, Y+6	; 0x06
     786:	9f 81       	ldd	r25, Y+7	; 0x07
     788:	de de       	rcall	.-580    	; 0x546 <handle_counter>
}
     78a:	ff 91       	pop	r31
     78c:	ef 91       	pop	r30
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	bf 91       	pop	r27
     794:	af 91       	pop	r26
     796:	9f 91       	pop	r25
     798:	8f 91       	pop	r24
     79a:	7f 91       	pop	r23
     79c:	6f 91       	pop	r22
     79e:	5f 91       	pop	r21
     7a0:	4f 91       	pop	r20
     7a2:	3f 91       	pop	r19
     7a4:	2f 91       	pop	r18
     7a6:	0f 90       	pop	r0
     7a8:	0f be       	out	0x3f, r0	; 63
     7aa:	0f 90       	pop	r0
     7ac:	1f 90       	pop	r1
     7ae:	18 95       	reti

000007b0 <__vector_24>:

ISR(TWI_vect)
{
     7b0:	1f 92       	push	r1
     7b2:	0f 92       	push	r0
     7b4:	0f b6       	in	r0, 0x3f	; 63
     7b6:	0f 92       	push	r0
     7b8:	11 24       	eor	r1, r1
     7ba:	2f 93       	push	r18
     7bc:	3f 93       	push	r19
     7be:	4f 93       	push	r20
     7c0:	5f 93       	push	r21
     7c2:	6f 93       	push	r22
     7c4:	7f 93       	push	r23
     7c6:	8f 93       	push	r24
     7c8:	9f 93       	push	r25
     7ca:	af 93       	push	r26
     7cc:	bf 93       	push	r27
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	ef 93       	push	r30
     7d4:	ff 93       	push	r31
	uint8_t status = TWSR & 0b11111000;
     7d6:	80 91 b9 00 	lds	r24, 0x00B9
     7da:	88 7f       	andi	r24, 0xF8	; 248
	switch(i2c.mode)
     7dc:	90 91 3d 02 	lds	r25, 0x023D
     7e0:	90 fd       	sbrc	r25, 0
     7e2:	4c c0       	rjmp	.+152    	; 0x87c <__vector_24+0xcc>
	{
		case I2C_MODE_R:
			switch(status)
     7e4:	80 38       	cpi	r24, 0x80	; 128
     7e6:	61 f0       	breq	.+24     	; 0x800 <__vector_24+0x50>
     7e8:	80 3a       	cpi	r24, 0xA0	; 160
     7ea:	71 f1       	breq	.+92     	; 0x848 <__vector_24+0x98>
     7ec:	80 36       	cpi	r24, 0x60	; 96
     7ee:	c9 f5       	brne	.+114    	; 0x862 <__vector_24+0xb2>
			{
				case I2C_STATUS_START_W:
					i2c.state = I2C_STATE_ADDRESS;
     7f0:	ed e3       	ldi	r30, 0x3D	; 61
     7f2:	f2 e0       	ldi	r31, 0x02	; 2
     7f4:	89 2f       	mov	r24, r25
     7f6:	89 7f       	andi	r24, 0xF9	; 249
     7f8:	82 60       	ori	r24, 0x02	; 2
     7fa:	80 83       	st	Z, r24
					i2c.num_bytes = 0;
     7fc:	12 82       	std	Z+2, r1	; 0x02
					break;
     7fe:	65 c0       	rjmp	.+202    	; 0x8ca <__vector_24+0x11a>
				case I2C_STATUS_BYTE_R:
					i2c.num_bytes++;
     800:	ed e3       	ldi	r30, 0x3D	; 61
     802:	f2 e0       	ldi	r31, 0x02	; 2
     804:	82 81       	ldd	r24, Z+2	; 0x02
     806:	8f 5f       	subi	r24, 0xFF	; 255
     808:	82 83       	std	Z+2, r24	; 0x02
					switch(i2c.state)
     80a:	80 81       	ld	r24, Z
     80c:	86 95       	lsr	r24
     80e:	83 70       	andi	r24, 0x03	; 3
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	81 30       	cpi	r24, 0x01	; 1
     814:	91 05       	cpc	r25, r1
     816:	19 f0       	breq	.+6      	; 0x81e <__vector_24+0x6e>
     818:	02 97       	sbiw	r24, 0x02	; 2
     81a:	59 f0       	breq	.+22     	; 0x832 <__vector_24+0x82>
     81c:	0f c0       	rjmp	.+30     	; 0x83c <__vector_24+0x8c>
					{
						case I2C_STATE_ADDRESS:
							i2c.reg_addr = TWDR;
     81e:	80 91 bb 00 	lds	r24, 0x00BB
     822:	ed e3       	ldi	r30, 0x3D	; 61
     824:	f2 e0       	ldi	r31, 0x02	; 2
     826:	81 83       	std	Z+1, r24	; 0x01
							i2c.state = I2C_STATE_DATA;
     828:	80 81       	ld	r24, Z
     82a:	89 7f       	andi	r24, 0xF9	; 249
     82c:	84 60       	ori	r24, 0x04	; 4
     82e:	80 83       	st	Z, r24
							break;
     830:	4c c0       	rjmp	.+152    	; 0x8ca <__vector_24+0x11a>
						case I2C_STATE_DATA:
							i2c_buff_write(&TWDR, 1);
     832:	61 e0       	ldi	r22, 0x01	; 1
     834:	8b eb       	ldi	r24, 0xBB	; 187
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	9a de       	rcall	.-716    	; 0x56e <i2c_buff_write>
							break;
     83a:	47 c0       	rjmp	.+142    	; 0x8ca <__vector_24+0x11a>
						default:
							i2c.state = I2C_STATE_IDLE;
     83c:	ed e3       	ldi	r30, 0x3D	; 61
     83e:	f2 e0       	ldi	r31, 0x02	; 2
     840:	80 81       	ld	r24, Z
     842:	89 7f       	andi	r24, 0xF9	; 249
     844:	80 83       	st	Z, r24
     846:	41 c0       	rjmp	.+130    	; 0x8ca <__vector_24+0x11a>
					}
					break;
				case I2C_STATUS_STOP_W:
					if(i2c.num_bytes == 1)
     848:	80 91 3f 02 	lds	r24, 0x023F
     84c:	81 30       	cpi	r24, 0x01	; 1
     84e:	31 f4       	brne	.+12     	; 0x85c <__vector_24+0xac>
					{
						i2c.mode = I2C_MODE_W;
     850:	ed e3       	ldi	r30, 0x3D	; 61
     852:	f2 e0       	ldi	r31, 0x02	; 2
     854:	80 81       	ld	r24, Z
     856:	81 60       	ori	r24, 0x01	; 1
     858:	80 83       	st	Z, r24
     85a:	03 c0       	rjmp	.+6      	; 0x862 <__vector_24+0xb2>
					}
					else
					{
						i2c_write_reg(i2c.reg_addr);
     85c:	80 91 3e 02 	lds	r24, 0x023E
     860:	d5 de       	rcall	.-598    	; 0x60c <i2c_write_reg>
					}
				default: // Reset I2C
					TWCR |= (1<<TWEA) | (1<<TWSTO);
     862:	ec eb       	ldi	r30, 0xBC	; 188
     864:	f0 e0       	ldi	r31, 0x00	; 0
     866:	80 81       	ld	r24, Z
     868:	80 65       	ori	r24, 0x50	; 80
     86a:	80 83       	st	Z, r24
					i2c.num_bytes = 0;
     86c:	cd e3       	ldi	r28, 0x3D	; 61
     86e:	d2 e0       	ldi	r29, 0x02	; 2
     870:	1a 82       	std	Y+2, r1	; 0x02
					i2c_buff_flush();
     872:	c5 de       	rcall	.-630    	; 0x5fe <i2c_buff_flush>
					i2c.state = I2C_STATE_IDLE;
     874:	88 81       	ld	r24, Y
     876:	89 7f       	andi	r24, 0xF9	; 249
     878:	88 83       	st	Y, r24
     87a:	27 c0       	rjmp	.+78     	; 0x8ca <__vector_24+0x11a>
			}
			break;
		case I2C_MODE_W:
			switch(status)
     87c:	88 3a       	cpi	r24, 0xA8	; 168
     87e:	19 f0       	breq	.+6      	; 0x886 <__vector_24+0xd6>
     880:	88 3b       	cpi	r24, 0xB8	; 184
     882:	49 f0       	breq	.+18     	; 0x896 <__vector_24+0xe6>
     884:	16 c0       	rjmp	.+44     	; 0x8b2 <__vector_24+0x102>
			{
				case I2C_STATUS_START_R:
					i2c_load_reg(i2c.reg_addr);
     886:	cd e3       	ldi	r28, 0x3D	; 61
     888:	d2 e0       	ldi	r29, 0x02	; 2
     88a:	89 81       	ldd	r24, Y+1	; 0x01
     88c:	f9 de       	rcall	.-526    	; 0x680 <i2c_load_reg>
					i2c.state = I2C_STATE_DATA;
     88e:	88 81       	ld	r24, Y
     890:	89 7f       	andi	r24, 0xF9	; 249
     892:	84 60       	ori	r24, 0x04	; 4
     894:	88 83       	st	Y, r24
				case I2C_STATUS_BYTE_W:
					if(i2c_buff_load_byte(&TWDR) || i2c_buff_empty())
     896:	8b eb       	ldi	r24, 0xBB	; 187
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	8e de       	rcall	.-740    	; 0x5b8 <i2c_buff_load_byte>
     89c:	81 11       	cpse	r24, r1
     89e:	03 c0       	rjmp	.+6      	; 0x8a6 <__vector_24+0xf6>
     8a0:	e3 de       	rcall	.-570    	; 0x668 <i2c_buff_empty>
     8a2:	88 23       	and	r24, r24
     8a4:	91 f0       	breq	.+36     	; 0x8ca <__vector_24+0x11a>
					{
						TWCR &= ~(1<<TWEA);
     8a6:	ec eb       	ldi	r30, 0xBC	; 188
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	80 81       	ld	r24, Z
     8ac:	8f 7b       	andi	r24, 0xBF	; 191
     8ae:	80 83       	st	Z, r24
     8b0:	0c c0       	rjmp	.+24     	; 0x8ca <__vector_24+0x11a>
					}
					break;
				case I2C_STATUS_NAK_W:
				case I2C_STATUS_STOP_R:
				default:
					i2c_buff_flush();
     8b2:	a5 de       	rcall	.-694    	; 0x5fe <i2c_buff_flush>
					TWCR |= (1<<TWEA) | (1<<TWSTO);
     8b4:	ec eb       	ldi	r30, 0xBC	; 188
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	80 81       	ld	r24, Z
     8ba:	80 65       	ori	r24, 0x50	; 80
     8bc:	80 83       	st	Z, r24
					i2c.mode = I2C_MODE_R;
     8be:	ed e3       	ldi	r30, 0x3D	; 61
     8c0:	f2 e0       	ldi	r31, 0x02	; 2
     8c2:	80 81       	ld	r24, Z
					i2c.state = I2C_STATE_IDLE;
     8c4:	88 7f       	andi	r24, 0xF8	; 248
     8c6:	80 83       	st	Z, r24
					i2c.num_bytes = 0;
     8c8:	12 82       	std	Z+2, r1	; 0x02
			}
	}
	TWCR |= (1<<TWINT);
     8ca:	ec eb       	ldi	r30, 0xBC	; 188
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	80 81       	ld	r24, Z
     8d0:	80 68       	ori	r24, 0x80	; 128
     8d2:	80 83       	st	Z, r24
     8d4:	ff 91       	pop	r31
     8d6:	ef 91       	pop	r30
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	bf 91       	pop	r27
     8de:	af 91       	pop	r26
     8e0:	9f 91       	pop	r25
     8e2:	8f 91       	pop	r24
     8e4:	7f 91       	pop	r23
     8e6:	6f 91       	pop	r22
     8e8:	5f 91       	pop	r21
     8ea:	4f 91       	pop	r20
     8ec:	3f 91       	pop	r19
     8ee:	2f 91       	pop	r18
     8f0:	0f 90       	pop	r0
     8f2:	0f be       	out	0x3f, r0	; 63
     8f4:	0f 90       	pop	r0
     8f6:	1f 90       	pop	r1
     8f8:	18 95       	reti

000008fa <malloc>:
     8fa:	cf 93       	push	r28
     8fc:	df 93       	push	r29
     8fe:	82 30       	cpi	r24, 0x02	; 2
     900:	91 05       	cpc	r25, r1
     902:	10 f4       	brcc	.+4      	; 0x908 <malloc+0xe>
     904:	82 e0       	ldi	r24, 0x02	; 2
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	e0 91 60 02 	lds	r30, 0x0260
     90c:	f0 91 61 02 	lds	r31, 0x0261
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	c0 e0       	ldi	r28, 0x00	; 0
     916:	d0 e0       	ldi	r29, 0x00	; 0
     918:	30 97       	sbiw	r30, 0x00	; 0
     91a:	11 f1       	breq	.+68     	; 0x960 <malloc+0x66>
     91c:	40 81       	ld	r20, Z
     91e:	51 81       	ldd	r21, Z+1	; 0x01
     920:	48 17       	cp	r20, r24
     922:	59 07       	cpc	r21, r25
     924:	c0 f0       	brcs	.+48     	; 0x956 <malloc+0x5c>
     926:	48 17       	cp	r20, r24
     928:	59 07       	cpc	r21, r25
     92a:	61 f4       	brne	.+24     	; 0x944 <malloc+0x4a>
     92c:	82 81       	ldd	r24, Z+2	; 0x02
     92e:	93 81       	ldd	r25, Z+3	; 0x03
     930:	20 97       	sbiw	r28, 0x00	; 0
     932:	19 f0       	breq	.+6      	; 0x93a <malloc+0x40>
     934:	9b 83       	std	Y+3, r25	; 0x03
     936:	8a 83       	std	Y+2, r24	; 0x02
     938:	2b c0       	rjmp	.+86     	; 0x990 <malloc+0x96>
     93a:	90 93 61 02 	sts	0x0261, r25
     93e:	80 93 60 02 	sts	0x0260, r24
     942:	26 c0       	rjmp	.+76     	; 0x990 <malloc+0x96>
     944:	21 15       	cp	r18, r1
     946:	31 05       	cpc	r19, r1
     948:	19 f0       	breq	.+6      	; 0x950 <malloc+0x56>
     94a:	42 17       	cp	r20, r18
     94c:	53 07       	cpc	r21, r19
     94e:	18 f4       	brcc	.+6      	; 0x956 <malloc+0x5c>
     950:	9a 01       	movw	r18, r20
     952:	be 01       	movw	r22, r28
     954:	df 01       	movw	r26, r30
     956:	ef 01       	movw	r28, r30
     958:	02 80       	ldd	r0, Z+2	; 0x02
     95a:	f3 81       	ldd	r31, Z+3	; 0x03
     95c:	e0 2d       	mov	r30, r0
     95e:	dc cf       	rjmp	.-72     	; 0x918 <malloc+0x1e>
     960:	21 15       	cp	r18, r1
     962:	31 05       	cpc	r19, r1
     964:	09 f1       	breq	.+66     	; 0x9a8 <malloc+0xae>
     966:	28 1b       	sub	r18, r24
     968:	39 0b       	sbc	r19, r25
     96a:	24 30       	cpi	r18, 0x04	; 4
     96c:	31 05       	cpc	r19, r1
     96e:	90 f4       	brcc	.+36     	; 0x994 <malloc+0x9a>
     970:	12 96       	adiw	r26, 0x02	; 2
     972:	8d 91       	ld	r24, X+
     974:	9c 91       	ld	r25, X
     976:	13 97       	sbiw	r26, 0x03	; 3
     978:	61 15       	cp	r22, r1
     97a:	71 05       	cpc	r23, r1
     97c:	21 f0       	breq	.+8      	; 0x986 <malloc+0x8c>
     97e:	fb 01       	movw	r30, r22
     980:	93 83       	std	Z+3, r25	; 0x03
     982:	82 83       	std	Z+2, r24	; 0x02
     984:	04 c0       	rjmp	.+8      	; 0x98e <malloc+0x94>
     986:	90 93 61 02 	sts	0x0261, r25
     98a:	80 93 60 02 	sts	0x0260, r24
     98e:	fd 01       	movw	r30, r26
     990:	32 96       	adiw	r30, 0x02	; 2
     992:	44 c0       	rjmp	.+136    	; 0xa1c <malloc+0x122>
     994:	fd 01       	movw	r30, r26
     996:	e2 0f       	add	r30, r18
     998:	f3 1f       	adc	r31, r19
     99a:	81 93       	st	Z+, r24
     99c:	91 93       	st	Z+, r25
     99e:	22 50       	subi	r18, 0x02	; 2
     9a0:	31 09       	sbc	r19, r1
     9a2:	2d 93       	st	X+, r18
     9a4:	3c 93       	st	X, r19
     9a6:	3a c0       	rjmp	.+116    	; 0xa1c <malloc+0x122>
     9a8:	20 91 5e 02 	lds	r18, 0x025E
     9ac:	30 91 5f 02 	lds	r19, 0x025F
     9b0:	23 2b       	or	r18, r19
     9b2:	41 f4       	brne	.+16     	; 0x9c4 <malloc+0xca>
     9b4:	20 91 02 01 	lds	r18, 0x0102
     9b8:	30 91 03 01 	lds	r19, 0x0103
     9bc:	30 93 5f 02 	sts	0x025F, r19
     9c0:	20 93 5e 02 	sts	0x025E, r18
     9c4:	20 91 00 01 	lds	r18, 0x0100
     9c8:	30 91 01 01 	lds	r19, 0x0101
     9cc:	21 15       	cp	r18, r1
     9ce:	31 05       	cpc	r19, r1
     9d0:	41 f4       	brne	.+16     	; 0x9e2 <malloc+0xe8>
     9d2:	2d b7       	in	r18, 0x3d	; 61
     9d4:	3e b7       	in	r19, 0x3e	; 62
     9d6:	40 91 04 01 	lds	r20, 0x0104
     9da:	50 91 05 01 	lds	r21, 0x0105
     9de:	24 1b       	sub	r18, r20
     9e0:	35 0b       	sbc	r19, r21
     9e2:	e0 91 5e 02 	lds	r30, 0x025E
     9e6:	f0 91 5f 02 	lds	r31, 0x025F
     9ea:	e2 17       	cp	r30, r18
     9ec:	f3 07       	cpc	r31, r19
     9ee:	a0 f4       	brcc	.+40     	; 0xa18 <malloc+0x11e>
     9f0:	2e 1b       	sub	r18, r30
     9f2:	3f 0b       	sbc	r19, r31
     9f4:	28 17       	cp	r18, r24
     9f6:	39 07       	cpc	r19, r25
     9f8:	78 f0       	brcs	.+30     	; 0xa18 <malloc+0x11e>
     9fa:	ac 01       	movw	r20, r24
     9fc:	4e 5f       	subi	r20, 0xFE	; 254
     9fe:	5f 4f       	sbci	r21, 0xFF	; 255
     a00:	24 17       	cp	r18, r20
     a02:	35 07       	cpc	r19, r21
     a04:	48 f0       	brcs	.+18     	; 0xa18 <malloc+0x11e>
     a06:	4e 0f       	add	r20, r30
     a08:	5f 1f       	adc	r21, r31
     a0a:	50 93 5f 02 	sts	0x025F, r21
     a0e:	40 93 5e 02 	sts	0x025E, r20
     a12:	81 93       	st	Z+, r24
     a14:	91 93       	st	Z+, r25
     a16:	02 c0       	rjmp	.+4      	; 0xa1c <malloc+0x122>
     a18:	e0 e0       	ldi	r30, 0x00	; 0
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
     a1c:	cf 01       	movw	r24, r30
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	08 95       	ret

00000a24 <free>:
     a24:	0f 93       	push	r16
     a26:	1f 93       	push	r17
     a28:	cf 93       	push	r28
     a2a:	df 93       	push	r29
     a2c:	00 97       	sbiw	r24, 0x00	; 0
     a2e:	09 f4       	brne	.+2      	; 0xa32 <free+0xe>
     a30:	8c c0       	rjmp	.+280    	; 0xb4a <free+0x126>
     a32:	fc 01       	movw	r30, r24
     a34:	32 97       	sbiw	r30, 0x02	; 2
     a36:	13 82       	std	Z+3, r1	; 0x03
     a38:	12 82       	std	Z+2, r1	; 0x02
     a3a:	00 91 60 02 	lds	r16, 0x0260
     a3e:	10 91 61 02 	lds	r17, 0x0261
     a42:	01 15       	cp	r16, r1
     a44:	11 05       	cpc	r17, r1
     a46:	81 f4       	brne	.+32     	; 0xa68 <free+0x44>
     a48:	20 81       	ld	r18, Z
     a4a:	31 81       	ldd	r19, Z+1	; 0x01
     a4c:	82 0f       	add	r24, r18
     a4e:	93 1f       	adc	r25, r19
     a50:	20 91 5e 02 	lds	r18, 0x025E
     a54:	30 91 5f 02 	lds	r19, 0x025F
     a58:	28 17       	cp	r18, r24
     a5a:	39 07       	cpc	r19, r25
     a5c:	79 f5       	brne	.+94     	; 0xabc <free+0x98>
     a5e:	f0 93 5f 02 	sts	0x025F, r31
     a62:	e0 93 5e 02 	sts	0x025E, r30
     a66:	71 c0       	rjmp	.+226    	; 0xb4a <free+0x126>
     a68:	d8 01       	movw	r26, r16
     a6a:	40 e0       	ldi	r20, 0x00	; 0
     a6c:	50 e0       	ldi	r21, 0x00	; 0
     a6e:	ae 17       	cp	r26, r30
     a70:	bf 07       	cpc	r27, r31
     a72:	50 f4       	brcc	.+20     	; 0xa88 <free+0x64>
     a74:	12 96       	adiw	r26, 0x02	; 2
     a76:	2d 91       	ld	r18, X+
     a78:	3c 91       	ld	r19, X
     a7a:	13 97       	sbiw	r26, 0x03	; 3
     a7c:	ad 01       	movw	r20, r26
     a7e:	21 15       	cp	r18, r1
     a80:	31 05       	cpc	r19, r1
     a82:	09 f1       	breq	.+66     	; 0xac6 <free+0xa2>
     a84:	d9 01       	movw	r26, r18
     a86:	f3 cf       	rjmp	.-26     	; 0xa6e <free+0x4a>
     a88:	9d 01       	movw	r18, r26
     a8a:	da 01       	movw	r26, r20
     a8c:	33 83       	std	Z+3, r19	; 0x03
     a8e:	22 83       	std	Z+2, r18	; 0x02
     a90:	60 81       	ld	r22, Z
     a92:	71 81       	ldd	r23, Z+1	; 0x01
     a94:	86 0f       	add	r24, r22
     a96:	97 1f       	adc	r25, r23
     a98:	82 17       	cp	r24, r18
     a9a:	93 07       	cpc	r25, r19
     a9c:	69 f4       	brne	.+26     	; 0xab8 <free+0x94>
     a9e:	ec 01       	movw	r28, r24
     aa0:	28 81       	ld	r18, Y
     aa2:	39 81       	ldd	r19, Y+1	; 0x01
     aa4:	26 0f       	add	r18, r22
     aa6:	37 1f       	adc	r19, r23
     aa8:	2e 5f       	subi	r18, 0xFE	; 254
     aaa:	3f 4f       	sbci	r19, 0xFF	; 255
     aac:	31 83       	std	Z+1, r19	; 0x01
     aae:	20 83       	st	Z, r18
     ab0:	8a 81       	ldd	r24, Y+2	; 0x02
     ab2:	9b 81       	ldd	r25, Y+3	; 0x03
     ab4:	93 83       	std	Z+3, r25	; 0x03
     ab6:	82 83       	std	Z+2, r24	; 0x02
     ab8:	45 2b       	or	r20, r21
     aba:	29 f4       	brne	.+10     	; 0xac6 <free+0xa2>
     abc:	f0 93 61 02 	sts	0x0261, r31
     ac0:	e0 93 60 02 	sts	0x0260, r30
     ac4:	42 c0       	rjmp	.+132    	; 0xb4a <free+0x126>
     ac6:	13 96       	adiw	r26, 0x03	; 3
     ac8:	fc 93       	st	X, r31
     aca:	ee 93       	st	-X, r30
     acc:	12 97       	sbiw	r26, 0x02	; 2
     ace:	ed 01       	movw	r28, r26
     ad0:	49 91       	ld	r20, Y+
     ad2:	59 91       	ld	r21, Y+
     ad4:	9e 01       	movw	r18, r28
     ad6:	24 0f       	add	r18, r20
     ad8:	35 1f       	adc	r19, r21
     ada:	e2 17       	cp	r30, r18
     adc:	f3 07       	cpc	r31, r19
     ade:	71 f4       	brne	.+28     	; 0xafc <free+0xd8>
     ae0:	80 81       	ld	r24, Z
     ae2:	91 81       	ldd	r25, Z+1	; 0x01
     ae4:	84 0f       	add	r24, r20
     ae6:	95 1f       	adc	r25, r21
     ae8:	02 96       	adiw	r24, 0x02	; 2
     aea:	11 96       	adiw	r26, 0x01	; 1
     aec:	9c 93       	st	X, r25
     aee:	8e 93       	st	-X, r24
     af0:	82 81       	ldd	r24, Z+2	; 0x02
     af2:	93 81       	ldd	r25, Z+3	; 0x03
     af4:	13 96       	adiw	r26, 0x03	; 3
     af6:	9c 93       	st	X, r25
     af8:	8e 93       	st	-X, r24
     afa:	12 97       	sbiw	r26, 0x02	; 2
     afc:	e0 e0       	ldi	r30, 0x00	; 0
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	d8 01       	movw	r26, r16
     b02:	12 96       	adiw	r26, 0x02	; 2
     b04:	8d 91       	ld	r24, X+
     b06:	9c 91       	ld	r25, X
     b08:	13 97       	sbiw	r26, 0x03	; 3
     b0a:	00 97       	sbiw	r24, 0x00	; 0
     b0c:	19 f0       	breq	.+6      	; 0xb14 <free+0xf0>
     b0e:	f8 01       	movw	r30, r16
     b10:	8c 01       	movw	r16, r24
     b12:	f6 cf       	rjmp	.-20     	; 0xb00 <free+0xdc>
     b14:	8d 91       	ld	r24, X+
     b16:	9c 91       	ld	r25, X
     b18:	98 01       	movw	r18, r16
     b1a:	2e 5f       	subi	r18, 0xFE	; 254
     b1c:	3f 4f       	sbci	r19, 0xFF	; 255
     b1e:	82 0f       	add	r24, r18
     b20:	93 1f       	adc	r25, r19
     b22:	20 91 5e 02 	lds	r18, 0x025E
     b26:	30 91 5f 02 	lds	r19, 0x025F
     b2a:	28 17       	cp	r18, r24
     b2c:	39 07       	cpc	r19, r25
     b2e:	69 f4       	brne	.+26     	; 0xb4a <free+0x126>
     b30:	30 97       	sbiw	r30, 0x00	; 0
     b32:	29 f4       	brne	.+10     	; 0xb3e <free+0x11a>
     b34:	10 92 61 02 	sts	0x0261, r1
     b38:	10 92 60 02 	sts	0x0260, r1
     b3c:	02 c0       	rjmp	.+4      	; 0xb42 <free+0x11e>
     b3e:	13 82       	std	Z+3, r1	; 0x03
     b40:	12 82       	std	Z+2, r1	; 0x02
     b42:	10 93 5f 02 	sts	0x025F, r17
     b46:	00 93 5e 02 	sts	0x025E, r16
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	1f 91       	pop	r17
     b50:	0f 91       	pop	r16
     b52:	08 95       	ret

00000b54 <sprintf>:
     b54:	ae e0       	ldi	r26, 0x0E	; 14
     b56:	b0 e0       	ldi	r27, 0x00	; 0
     b58:	ef ea       	ldi	r30, 0xAF	; 175
     b5a:	f5 e0       	ldi	r31, 0x05	; 5
     b5c:	98 c2       	rjmp	.+1328   	; 0x108e <__prologue_saves__+0x1c>
     b5e:	0d 89       	ldd	r16, Y+21	; 0x15
     b60:	1e 89       	ldd	r17, Y+22	; 0x16
     b62:	86 e0       	ldi	r24, 0x06	; 6
     b64:	8c 83       	std	Y+4, r24	; 0x04
     b66:	1a 83       	std	Y+2, r17	; 0x02
     b68:	09 83       	std	Y+1, r16	; 0x01
     b6a:	8f ef       	ldi	r24, 0xFF	; 255
     b6c:	9f e7       	ldi	r25, 0x7F	; 127
     b6e:	9e 83       	std	Y+6, r25	; 0x06
     b70:	8d 83       	std	Y+5, r24	; 0x05
     b72:	ae 01       	movw	r20, r28
     b74:	47 5e       	subi	r20, 0xE7	; 231
     b76:	5f 4f       	sbci	r21, 0xFF	; 255
     b78:	6f 89       	ldd	r22, Y+23	; 0x17
     b7a:	78 8d       	ldd	r23, Y+24	; 0x18
     b7c:	ce 01       	movw	r24, r28
     b7e:	01 96       	adiw	r24, 0x01	; 1
     b80:	09 d0       	rcall	.+18     	; 0xb94 <vfprintf>
     b82:	2f 81       	ldd	r18, Y+7	; 0x07
     b84:	38 85       	ldd	r19, Y+8	; 0x08
     b86:	f8 01       	movw	r30, r16
     b88:	e2 0f       	add	r30, r18
     b8a:	f3 1f       	adc	r31, r19
     b8c:	10 82       	st	Z, r1
     b8e:	2e 96       	adiw	r28, 0x0e	; 14
     b90:	e4 e0       	ldi	r30, 0x04	; 4
     b92:	99 c2       	rjmp	.+1330   	; 0x10c6 <__epilogue_restores__+0x1c>

00000b94 <vfprintf>:
     b94:	ac e0       	ldi	r26, 0x0C	; 12
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	ef ec       	ldi	r30, 0xCF	; 207
     b9a:	f5 e0       	ldi	r31, 0x05	; 5
     b9c:	6a c2       	rjmp	.+1236   	; 0x1072 <__prologue_saves__>
     b9e:	7c 01       	movw	r14, r24
     ba0:	6b 01       	movw	r12, r22
     ba2:	8a 01       	movw	r16, r20
     ba4:	fc 01       	movw	r30, r24
     ba6:	17 82       	std	Z+7, r1	; 0x07
     ba8:	16 82       	std	Z+6, r1	; 0x06
     baa:	83 81       	ldd	r24, Z+3	; 0x03
     bac:	81 ff       	sbrs	r24, 1
     bae:	b0 c1       	rjmp	.+864    	; 0xf10 <vfprintf+0x37c>
     bb0:	ce 01       	movw	r24, r28
     bb2:	01 96       	adiw	r24, 0x01	; 1
     bb4:	4c 01       	movw	r8, r24
     bb6:	f7 01       	movw	r30, r14
     bb8:	93 81       	ldd	r25, Z+3	; 0x03
     bba:	f6 01       	movw	r30, r12
     bbc:	93 fd       	sbrc	r25, 3
     bbe:	85 91       	lpm	r24, Z+
     bc0:	93 ff       	sbrs	r25, 3
     bc2:	81 91       	ld	r24, Z+
     bc4:	6f 01       	movw	r12, r30
     bc6:	88 23       	and	r24, r24
     bc8:	09 f4       	brne	.+2      	; 0xbcc <vfprintf+0x38>
     bca:	9e c1       	rjmp	.+828    	; 0xf08 <vfprintf+0x374>
     bcc:	85 32       	cpi	r24, 0x25	; 37
     bce:	39 f4       	brne	.+14     	; 0xbde <vfprintf+0x4a>
     bd0:	93 fd       	sbrc	r25, 3
     bd2:	85 91       	lpm	r24, Z+
     bd4:	93 ff       	sbrs	r25, 3
     bd6:	81 91       	ld	r24, Z+
     bd8:	6f 01       	movw	r12, r30
     bda:	85 32       	cpi	r24, 0x25	; 37
     bdc:	21 f4       	brne	.+8      	; 0xbe6 <vfprintf+0x52>
     bde:	b7 01       	movw	r22, r14
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	b1 d1       	rcall	.+866    	; 0xf46 <fputc>
     be4:	e8 cf       	rjmp	.-48     	; 0xbb6 <vfprintf+0x22>
     be6:	51 2c       	mov	r5, r1
     be8:	31 2c       	mov	r3, r1
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	20 32       	cpi	r18, 0x20	; 32
     bee:	a0 f4       	brcc	.+40     	; 0xc18 <vfprintf+0x84>
     bf0:	8b 32       	cpi	r24, 0x2B	; 43
     bf2:	69 f0       	breq	.+26     	; 0xc0e <vfprintf+0x7a>
     bf4:	30 f4       	brcc	.+12     	; 0xc02 <vfprintf+0x6e>
     bf6:	80 32       	cpi	r24, 0x20	; 32
     bf8:	59 f0       	breq	.+22     	; 0xc10 <vfprintf+0x7c>
     bfa:	83 32       	cpi	r24, 0x23	; 35
     bfc:	69 f4       	brne	.+26     	; 0xc18 <vfprintf+0x84>
     bfe:	20 61       	ori	r18, 0x10	; 16
     c00:	2c c0       	rjmp	.+88     	; 0xc5a <vfprintf+0xc6>
     c02:	8d 32       	cpi	r24, 0x2D	; 45
     c04:	39 f0       	breq	.+14     	; 0xc14 <vfprintf+0x80>
     c06:	80 33       	cpi	r24, 0x30	; 48
     c08:	39 f4       	brne	.+14     	; 0xc18 <vfprintf+0x84>
     c0a:	21 60       	ori	r18, 0x01	; 1
     c0c:	26 c0       	rjmp	.+76     	; 0xc5a <vfprintf+0xc6>
     c0e:	22 60       	ori	r18, 0x02	; 2
     c10:	24 60       	ori	r18, 0x04	; 4
     c12:	23 c0       	rjmp	.+70     	; 0xc5a <vfprintf+0xc6>
     c14:	28 60       	ori	r18, 0x08	; 8
     c16:	21 c0       	rjmp	.+66     	; 0xc5a <vfprintf+0xc6>
     c18:	27 fd       	sbrc	r18, 7
     c1a:	27 c0       	rjmp	.+78     	; 0xc6a <vfprintf+0xd6>
     c1c:	30 ed       	ldi	r19, 0xD0	; 208
     c1e:	38 0f       	add	r19, r24
     c20:	3a 30       	cpi	r19, 0x0A	; 10
     c22:	78 f4       	brcc	.+30     	; 0xc42 <vfprintf+0xae>
     c24:	26 ff       	sbrs	r18, 6
     c26:	06 c0       	rjmp	.+12     	; 0xc34 <vfprintf+0xa0>
     c28:	fa e0       	ldi	r31, 0x0A	; 10
     c2a:	5f 9e       	mul	r5, r31
     c2c:	30 0d       	add	r19, r0
     c2e:	11 24       	eor	r1, r1
     c30:	53 2e       	mov	r5, r19
     c32:	13 c0       	rjmp	.+38     	; 0xc5a <vfprintf+0xc6>
     c34:	8a e0       	ldi	r24, 0x0A	; 10
     c36:	38 9e       	mul	r3, r24
     c38:	30 0d       	add	r19, r0
     c3a:	11 24       	eor	r1, r1
     c3c:	33 2e       	mov	r3, r19
     c3e:	20 62       	ori	r18, 0x20	; 32
     c40:	0c c0       	rjmp	.+24     	; 0xc5a <vfprintf+0xc6>
     c42:	8e 32       	cpi	r24, 0x2E	; 46
     c44:	21 f4       	brne	.+8      	; 0xc4e <vfprintf+0xba>
     c46:	26 fd       	sbrc	r18, 6
     c48:	5f c1       	rjmp	.+702    	; 0xf08 <vfprintf+0x374>
     c4a:	20 64       	ori	r18, 0x40	; 64
     c4c:	06 c0       	rjmp	.+12     	; 0xc5a <vfprintf+0xc6>
     c4e:	8c 36       	cpi	r24, 0x6C	; 108
     c50:	11 f4       	brne	.+4      	; 0xc56 <vfprintf+0xc2>
     c52:	20 68       	ori	r18, 0x80	; 128
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <vfprintf+0xc6>
     c56:	88 36       	cpi	r24, 0x68	; 104
     c58:	41 f4       	brne	.+16     	; 0xc6a <vfprintf+0xd6>
     c5a:	f6 01       	movw	r30, r12
     c5c:	93 fd       	sbrc	r25, 3
     c5e:	85 91       	lpm	r24, Z+
     c60:	93 ff       	sbrs	r25, 3
     c62:	81 91       	ld	r24, Z+
     c64:	6f 01       	movw	r12, r30
     c66:	81 11       	cpse	r24, r1
     c68:	c1 cf       	rjmp	.-126    	; 0xbec <vfprintf+0x58>
     c6a:	98 2f       	mov	r25, r24
     c6c:	9f 7d       	andi	r25, 0xDF	; 223
     c6e:	95 54       	subi	r25, 0x45	; 69
     c70:	93 30       	cpi	r25, 0x03	; 3
     c72:	28 f4       	brcc	.+10     	; 0xc7e <vfprintf+0xea>
     c74:	0c 5f       	subi	r16, 0xFC	; 252
     c76:	1f 4f       	sbci	r17, 0xFF	; 255
     c78:	ff e3       	ldi	r31, 0x3F	; 63
     c7a:	f9 83       	std	Y+1, r31	; 0x01
     c7c:	0d c0       	rjmp	.+26     	; 0xc98 <vfprintf+0x104>
     c7e:	83 36       	cpi	r24, 0x63	; 99
     c80:	31 f0       	breq	.+12     	; 0xc8e <vfprintf+0xfa>
     c82:	83 37       	cpi	r24, 0x73	; 115
     c84:	71 f0       	breq	.+28     	; 0xca2 <vfprintf+0x10e>
     c86:	83 35       	cpi	r24, 0x53	; 83
     c88:	09 f0       	breq	.+2      	; 0xc8c <vfprintf+0xf8>
     c8a:	57 c0       	rjmp	.+174    	; 0xd3a <vfprintf+0x1a6>
     c8c:	21 c0       	rjmp	.+66     	; 0xcd0 <vfprintf+0x13c>
     c8e:	f8 01       	movw	r30, r16
     c90:	80 81       	ld	r24, Z
     c92:	89 83       	std	Y+1, r24	; 0x01
     c94:	0e 5f       	subi	r16, 0xFE	; 254
     c96:	1f 4f       	sbci	r17, 0xFF	; 255
     c98:	44 24       	eor	r4, r4
     c9a:	43 94       	inc	r4
     c9c:	51 2c       	mov	r5, r1
     c9e:	54 01       	movw	r10, r8
     ca0:	14 c0       	rjmp	.+40     	; 0xcca <vfprintf+0x136>
     ca2:	38 01       	movw	r6, r16
     ca4:	f2 e0       	ldi	r31, 0x02	; 2
     ca6:	6f 0e       	add	r6, r31
     ca8:	71 1c       	adc	r7, r1
     caa:	f8 01       	movw	r30, r16
     cac:	a0 80       	ld	r10, Z
     cae:	b1 80       	ldd	r11, Z+1	; 0x01
     cb0:	26 ff       	sbrs	r18, 6
     cb2:	03 c0       	rjmp	.+6      	; 0xcba <vfprintf+0x126>
     cb4:	65 2d       	mov	r22, r5
     cb6:	70 e0       	ldi	r23, 0x00	; 0
     cb8:	02 c0       	rjmp	.+4      	; 0xcbe <vfprintf+0x12a>
     cba:	6f ef       	ldi	r22, 0xFF	; 255
     cbc:	7f ef       	ldi	r23, 0xFF	; 255
     cbe:	c5 01       	movw	r24, r10
     cc0:	2c 87       	std	Y+12, r18	; 0x0c
     cc2:	36 d1       	rcall	.+620    	; 0xf30 <strnlen>
     cc4:	2c 01       	movw	r4, r24
     cc6:	83 01       	movw	r16, r6
     cc8:	2c 85       	ldd	r18, Y+12	; 0x0c
     cca:	2f 77       	andi	r18, 0x7F	; 127
     ccc:	22 2e       	mov	r2, r18
     cce:	16 c0       	rjmp	.+44     	; 0xcfc <vfprintf+0x168>
     cd0:	38 01       	movw	r6, r16
     cd2:	f2 e0       	ldi	r31, 0x02	; 2
     cd4:	6f 0e       	add	r6, r31
     cd6:	71 1c       	adc	r7, r1
     cd8:	f8 01       	movw	r30, r16
     cda:	a0 80       	ld	r10, Z
     cdc:	b1 80       	ldd	r11, Z+1	; 0x01
     cde:	26 ff       	sbrs	r18, 6
     ce0:	03 c0       	rjmp	.+6      	; 0xce8 <vfprintf+0x154>
     ce2:	65 2d       	mov	r22, r5
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <vfprintf+0x158>
     ce8:	6f ef       	ldi	r22, 0xFF	; 255
     cea:	7f ef       	ldi	r23, 0xFF	; 255
     cec:	c5 01       	movw	r24, r10
     cee:	2c 87       	std	Y+12, r18	; 0x0c
     cf0:	14 d1       	rcall	.+552    	; 0xf1a <strnlen_P>
     cf2:	2c 01       	movw	r4, r24
     cf4:	2c 85       	ldd	r18, Y+12	; 0x0c
     cf6:	20 68       	ori	r18, 0x80	; 128
     cf8:	22 2e       	mov	r2, r18
     cfa:	83 01       	movw	r16, r6
     cfc:	23 fc       	sbrc	r2, 3
     cfe:	19 c0       	rjmp	.+50     	; 0xd32 <vfprintf+0x19e>
     d00:	83 2d       	mov	r24, r3
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	48 16       	cp	r4, r24
     d06:	59 06       	cpc	r5, r25
     d08:	a0 f4       	brcc	.+40     	; 0xd32 <vfprintf+0x19e>
     d0a:	b7 01       	movw	r22, r14
     d0c:	80 e2       	ldi	r24, 0x20	; 32
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	1a d1       	rcall	.+564    	; 0xf46 <fputc>
     d12:	3a 94       	dec	r3
     d14:	f5 cf       	rjmp	.-22     	; 0xd00 <vfprintf+0x16c>
     d16:	f5 01       	movw	r30, r10
     d18:	27 fc       	sbrc	r2, 7
     d1a:	85 91       	lpm	r24, Z+
     d1c:	27 fe       	sbrs	r2, 7
     d1e:	81 91       	ld	r24, Z+
     d20:	5f 01       	movw	r10, r30
     d22:	b7 01       	movw	r22, r14
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	0f d1       	rcall	.+542    	; 0xf46 <fputc>
     d28:	31 10       	cpse	r3, r1
     d2a:	3a 94       	dec	r3
     d2c:	f1 e0       	ldi	r31, 0x01	; 1
     d2e:	4f 1a       	sub	r4, r31
     d30:	51 08       	sbc	r5, r1
     d32:	41 14       	cp	r4, r1
     d34:	51 04       	cpc	r5, r1
     d36:	79 f7       	brne	.-34     	; 0xd16 <vfprintf+0x182>
     d38:	de c0       	rjmp	.+444    	; 0xef6 <vfprintf+0x362>
     d3a:	84 36       	cpi	r24, 0x64	; 100
     d3c:	11 f0       	breq	.+4      	; 0xd42 <vfprintf+0x1ae>
     d3e:	89 36       	cpi	r24, 0x69	; 105
     d40:	31 f5       	brne	.+76     	; 0xd8e <vfprintf+0x1fa>
     d42:	f8 01       	movw	r30, r16
     d44:	27 ff       	sbrs	r18, 7
     d46:	07 c0       	rjmp	.+14     	; 0xd56 <vfprintf+0x1c2>
     d48:	60 81       	ld	r22, Z
     d4a:	71 81       	ldd	r23, Z+1	; 0x01
     d4c:	82 81       	ldd	r24, Z+2	; 0x02
     d4e:	93 81       	ldd	r25, Z+3	; 0x03
     d50:	0c 5f       	subi	r16, 0xFC	; 252
     d52:	1f 4f       	sbci	r17, 0xFF	; 255
     d54:	08 c0       	rjmp	.+16     	; 0xd66 <vfprintf+0x1d2>
     d56:	60 81       	ld	r22, Z
     d58:	71 81       	ldd	r23, Z+1	; 0x01
     d5a:	07 2e       	mov	r0, r23
     d5c:	00 0c       	add	r0, r0
     d5e:	88 0b       	sbc	r24, r24
     d60:	99 0b       	sbc	r25, r25
     d62:	0e 5f       	subi	r16, 0xFE	; 254
     d64:	1f 4f       	sbci	r17, 0xFF	; 255
     d66:	2f 76       	andi	r18, 0x6F	; 111
     d68:	72 2e       	mov	r7, r18
     d6a:	97 ff       	sbrs	r25, 7
     d6c:	09 c0       	rjmp	.+18     	; 0xd80 <vfprintf+0x1ec>
     d6e:	90 95       	com	r25
     d70:	80 95       	com	r24
     d72:	70 95       	com	r23
     d74:	61 95       	neg	r22
     d76:	7f 4f       	sbci	r23, 0xFF	; 255
     d78:	8f 4f       	sbci	r24, 0xFF	; 255
     d7a:	9f 4f       	sbci	r25, 0xFF	; 255
     d7c:	20 68       	ori	r18, 0x80	; 128
     d7e:	72 2e       	mov	r7, r18
     d80:	2a e0       	ldi	r18, 0x0A	; 10
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	a4 01       	movw	r20, r8
     d86:	17 d1       	rcall	.+558    	; 0xfb6 <__ultoa_invert>
     d88:	a8 2e       	mov	r10, r24
     d8a:	a8 18       	sub	r10, r8
     d8c:	43 c0       	rjmp	.+134    	; 0xe14 <vfprintf+0x280>
     d8e:	85 37       	cpi	r24, 0x75	; 117
     d90:	29 f4       	brne	.+10     	; 0xd9c <vfprintf+0x208>
     d92:	2f 7e       	andi	r18, 0xEF	; 239
     d94:	b2 2e       	mov	r11, r18
     d96:	2a e0       	ldi	r18, 0x0A	; 10
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	25 c0       	rjmp	.+74     	; 0xde6 <vfprintf+0x252>
     d9c:	f2 2f       	mov	r31, r18
     d9e:	f9 7f       	andi	r31, 0xF9	; 249
     da0:	bf 2e       	mov	r11, r31
     da2:	8f 36       	cpi	r24, 0x6F	; 111
     da4:	c1 f0       	breq	.+48     	; 0xdd6 <vfprintf+0x242>
     da6:	18 f4       	brcc	.+6      	; 0xdae <vfprintf+0x21a>
     da8:	88 35       	cpi	r24, 0x58	; 88
     daa:	79 f0       	breq	.+30     	; 0xdca <vfprintf+0x236>
     dac:	ad c0       	rjmp	.+346    	; 0xf08 <vfprintf+0x374>
     dae:	80 37       	cpi	r24, 0x70	; 112
     db0:	19 f0       	breq	.+6      	; 0xdb8 <vfprintf+0x224>
     db2:	88 37       	cpi	r24, 0x78	; 120
     db4:	21 f0       	breq	.+8      	; 0xdbe <vfprintf+0x22a>
     db6:	a8 c0       	rjmp	.+336    	; 0xf08 <vfprintf+0x374>
     db8:	2f 2f       	mov	r18, r31
     dba:	20 61       	ori	r18, 0x10	; 16
     dbc:	b2 2e       	mov	r11, r18
     dbe:	b4 fe       	sbrs	r11, 4
     dc0:	0d c0       	rjmp	.+26     	; 0xddc <vfprintf+0x248>
     dc2:	8b 2d       	mov	r24, r11
     dc4:	84 60       	ori	r24, 0x04	; 4
     dc6:	b8 2e       	mov	r11, r24
     dc8:	09 c0       	rjmp	.+18     	; 0xddc <vfprintf+0x248>
     dca:	24 ff       	sbrs	r18, 4
     dcc:	0a c0       	rjmp	.+20     	; 0xde2 <vfprintf+0x24e>
     dce:	9f 2f       	mov	r25, r31
     dd0:	96 60       	ori	r25, 0x06	; 6
     dd2:	b9 2e       	mov	r11, r25
     dd4:	06 c0       	rjmp	.+12     	; 0xde2 <vfprintf+0x24e>
     dd6:	28 e0       	ldi	r18, 0x08	; 8
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	05 c0       	rjmp	.+10     	; 0xde6 <vfprintf+0x252>
     ddc:	20 e1       	ldi	r18, 0x10	; 16
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <vfprintf+0x252>
     de2:	20 e1       	ldi	r18, 0x10	; 16
     de4:	32 e0       	ldi	r19, 0x02	; 2
     de6:	f8 01       	movw	r30, r16
     de8:	b7 fe       	sbrs	r11, 7
     dea:	07 c0       	rjmp	.+14     	; 0xdfa <vfprintf+0x266>
     dec:	60 81       	ld	r22, Z
     dee:	71 81       	ldd	r23, Z+1	; 0x01
     df0:	82 81       	ldd	r24, Z+2	; 0x02
     df2:	93 81       	ldd	r25, Z+3	; 0x03
     df4:	0c 5f       	subi	r16, 0xFC	; 252
     df6:	1f 4f       	sbci	r17, 0xFF	; 255
     df8:	06 c0       	rjmp	.+12     	; 0xe06 <vfprintf+0x272>
     dfa:	60 81       	ld	r22, Z
     dfc:	71 81       	ldd	r23, Z+1	; 0x01
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	0e 5f       	subi	r16, 0xFE	; 254
     e04:	1f 4f       	sbci	r17, 0xFF	; 255
     e06:	a4 01       	movw	r20, r8
     e08:	d6 d0       	rcall	.+428    	; 0xfb6 <__ultoa_invert>
     e0a:	a8 2e       	mov	r10, r24
     e0c:	a8 18       	sub	r10, r8
     e0e:	fb 2d       	mov	r31, r11
     e10:	ff 77       	andi	r31, 0x7F	; 127
     e12:	7f 2e       	mov	r7, r31
     e14:	76 fe       	sbrs	r7, 6
     e16:	0b c0       	rjmp	.+22     	; 0xe2e <vfprintf+0x29a>
     e18:	37 2d       	mov	r19, r7
     e1a:	3e 7f       	andi	r19, 0xFE	; 254
     e1c:	a5 14       	cp	r10, r5
     e1e:	50 f4       	brcc	.+20     	; 0xe34 <vfprintf+0x2a0>
     e20:	74 fe       	sbrs	r7, 4
     e22:	0a c0       	rjmp	.+20     	; 0xe38 <vfprintf+0x2a4>
     e24:	72 fc       	sbrc	r7, 2
     e26:	08 c0       	rjmp	.+16     	; 0xe38 <vfprintf+0x2a4>
     e28:	37 2d       	mov	r19, r7
     e2a:	3e 7e       	andi	r19, 0xEE	; 238
     e2c:	05 c0       	rjmp	.+10     	; 0xe38 <vfprintf+0x2a4>
     e2e:	ba 2c       	mov	r11, r10
     e30:	37 2d       	mov	r19, r7
     e32:	03 c0       	rjmp	.+6      	; 0xe3a <vfprintf+0x2a6>
     e34:	ba 2c       	mov	r11, r10
     e36:	01 c0       	rjmp	.+2      	; 0xe3a <vfprintf+0x2a6>
     e38:	b5 2c       	mov	r11, r5
     e3a:	34 ff       	sbrs	r19, 4
     e3c:	0d c0       	rjmp	.+26     	; 0xe58 <vfprintf+0x2c4>
     e3e:	fe 01       	movw	r30, r28
     e40:	ea 0d       	add	r30, r10
     e42:	f1 1d       	adc	r31, r1
     e44:	80 81       	ld	r24, Z
     e46:	80 33       	cpi	r24, 0x30	; 48
     e48:	11 f4       	brne	.+4      	; 0xe4e <vfprintf+0x2ba>
     e4a:	39 7e       	andi	r19, 0xE9	; 233
     e4c:	09 c0       	rjmp	.+18     	; 0xe60 <vfprintf+0x2cc>
     e4e:	32 ff       	sbrs	r19, 2
     e50:	06 c0       	rjmp	.+12     	; 0xe5e <vfprintf+0x2ca>
     e52:	b3 94       	inc	r11
     e54:	b3 94       	inc	r11
     e56:	04 c0       	rjmp	.+8      	; 0xe60 <vfprintf+0x2cc>
     e58:	83 2f       	mov	r24, r19
     e5a:	86 78       	andi	r24, 0x86	; 134
     e5c:	09 f0       	breq	.+2      	; 0xe60 <vfprintf+0x2cc>
     e5e:	b3 94       	inc	r11
     e60:	33 fd       	sbrc	r19, 3
     e62:	12 c0       	rjmp	.+36     	; 0xe88 <vfprintf+0x2f4>
     e64:	30 ff       	sbrs	r19, 0
     e66:	06 c0       	rjmp	.+12     	; 0xe74 <vfprintf+0x2e0>
     e68:	5a 2c       	mov	r5, r10
     e6a:	b3 14       	cp	r11, r3
     e6c:	18 f4       	brcc	.+6      	; 0xe74 <vfprintf+0x2e0>
     e6e:	53 0c       	add	r5, r3
     e70:	5b 18       	sub	r5, r11
     e72:	b3 2c       	mov	r11, r3
     e74:	b3 14       	cp	r11, r3
     e76:	60 f4       	brcc	.+24     	; 0xe90 <vfprintf+0x2fc>
     e78:	b7 01       	movw	r22, r14
     e7a:	80 e2       	ldi	r24, 0x20	; 32
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	3c 87       	std	Y+12, r19	; 0x0c
     e80:	62 d0       	rcall	.+196    	; 0xf46 <fputc>
     e82:	b3 94       	inc	r11
     e84:	3c 85       	ldd	r19, Y+12	; 0x0c
     e86:	f6 cf       	rjmp	.-20     	; 0xe74 <vfprintf+0x2e0>
     e88:	b3 14       	cp	r11, r3
     e8a:	10 f4       	brcc	.+4      	; 0xe90 <vfprintf+0x2fc>
     e8c:	3b 18       	sub	r3, r11
     e8e:	01 c0       	rjmp	.+2      	; 0xe92 <vfprintf+0x2fe>
     e90:	31 2c       	mov	r3, r1
     e92:	34 ff       	sbrs	r19, 4
     e94:	11 c0       	rjmp	.+34     	; 0xeb8 <vfprintf+0x324>
     e96:	b7 01       	movw	r22, r14
     e98:	80 e3       	ldi	r24, 0x30	; 48
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	3c 87       	std	Y+12, r19	; 0x0c
     e9e:	53 d0       	rcall	.+166    	; 0xf46 <fputc>
     ea0:	3c 85       	ldd	r19, Y+12	; 0x0c
     ea2:	32 ff       	sbrs	r19, 2
     ea4:	16 c0       	rjmp	.+44     	; 0xed2 <vfprintf+0x33e>
     ea6:	31 fd       	sbrc	r19, 1
     ea8:	03 c0       	rjmp	.+6      	; 0xeb0 <vfprintf+0x31c>
     eaa:	88 e7       	ldi	r24, 0x78	; 120
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <vfprintf+0x320>
     eb0:	88 e5       	ldi	r24, 0x58	; 88
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	b7 01       	movw	r22, r14
     eb6:	0c c0       	rjmp	.+24     	; 0xed0 <vfprintf+0x33c>
     eb8:	83 2f       	mov	r24, r19
     eba:	86 78       	andi	r24, 0x86	; 134
     ebc:	51 f0       	breq	.+20     	; 0xed2 <vfprintf+0x33e>
     ebe:	31 ff       	sbrs	r19, 1
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <vfprintf+0x332>
     ec2:	8b e2       	ldi	r24, 0x2B	; 43
     ec4:	01 c0       	rjmp	.+2      	; 0xec8 <vfprintf+0x334>
     ec6:	80 e2       	ldi	r24, 0x20	; 32
     ec8:	37 fd       	sbrc	r19, 7
     eca:	8d e2       	ldi	r24, 0x2D	; 45
     ecc:	b7 01       	movw	r22, r14
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	3a d0       	rcall	.+116    	; 0xf46 <fputc>
     ed2:	a5 14       	cp	r10, r5
     ed4:	30 f4       	brcc	.+12     	; 0xee2 <vfprintf+0x34e>
     ed6:	b7 01       	movw	r22, r14
     ed8:	80 e3       	ldi	r24, 0x30	; 48
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	34 d0       	rcall	.+104    	; 0xf46 <fputc>
     ede:	5a 94       	dec	r5
     ee0:	f8 cf       	rjmp	.-16     	; 0xed2 <vfprintf+0x33e>
     ee2:	aa 94       	dec	r10
     ee4:	f4 01       	movw	r30, r8
     ee6:	ea 0d       	add	r30, r10
     ee8:	f1 1d       	adc	r31, r1
     eea:	80 81       	ld	r24, Z
     eec:	b7 01       	movw	r22, r14
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	2a d0       	rcall	.+84     	; 0xf46 <fputc>
     ef2:	a1 10       	cpse	r10, r1
     ef4:	f6 cf       	rjmp	.-20     	; 0xee2 <vfprintf+0x34e>
     ef6:	33 20       	and	r3, r3
     ef8:	09 f4       	brne	.+2      	; 0xefc <vfprintf+0x368>
     efa:	5d ce       	rjmp	.-838    	; 0xbb6 <vfprintf+0x22>
     efc:	b7 01       	movw	r22, r14
     efe:	80 e2       	ldi	r24, 0x20	; 32
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	21 d0       	rcall	.+66     	; 0xf46 <fputc>
     f04:	3a 94       	dec	r3
     f06:	f7 cf       	rjmp	.-18     	; 0xef6 <vfprintf+0x362>
     f08:	f7 01       	movw	r30, r14
     f0a:	86 81       	ldd	r24, Z+6	; 0x06
     f0c:	97 81       	ldd	r25, Z+7	; 0x07
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <vfprintf+0x380>
     f10:	8f ef       	ldi	r24, 0xFF	; 255
     f12:	9f ef       	ldi	r25, 0xFF	; 255
     f14:	2c 96       	adiw	r28, 0x0c	; 12
     f16:	e2 e1       	ldi	r30, 0x12	; 18
     f18:	c8 c0       	rjmp	.+400    	; 0x10aa <__epilogue_restores__>

00000f1a <strnlen_P>:
     f1a:	fc 01       	movw	r30, r24
     f1c:	05 90       	lpm	r0, Z+
     f1e:	61 50       	subi	r22, 0x01	; 1
     f20:	70 40       	sbci	r23, 0x00	; 0
     f22:	01 10       	cpse	r0, r1
     f24:	d8 f7       	brcc	.-10     	; 0xf1c <strnlen_P+0x2>
     f26:	80 95       	com	r24
     f28:	90 95       	com	r25
     f2a:	8e 0f       	add	r24, r30
     f2c:	9f 1f       	adc	r25, r31
     f2e:	08 95       	ret

00000f30 <strnlen>:
     f30:	fc 01       	movw	r30, r24
     f32:	61 50       	subi	r22, 0x01	; 1
     f34:	70 40       	sbci	r23, 0x00	; 0
     f36:	01 90       	ld	r0, Z+
     f38:	01 10       	cpse	r0, r1
     f3a:	d8 f7       	brcc	.-10     	; 0xf32 <strnlen+0x2>
     f3c:	80 95       	com	r24
     f3e:	90 95       	com	r25
     f40:	8e 0f       	add	r24, r30
     f42:	9f 1f       	adc	r25, r31
     f44:	08 95       	ret

00000f46 <fputc>:
     f46:	0f 93       	push	r16
     f48:	1f 93       	push	r17
     f4a:	cf 93       	push	r28
     f4c:	df 93       	push	r29
     f4e:	fb 01       	movw	r30, r22
     f50:	23 81       	ldd	r18, Z+3	; 0x03
     f52:	21 fd       	sbrc	r18, 1
     f54:	03 c0       	rjmp	.+6      	; 0xf5c <fputc+0x16>
     f56:	8f ef       	ldi	r24, 0xFF	; 255
     f58:	9f ef       	ldi	r25, 0xFF	; 255
     f5a:	28 c0       	rjmp	.+80     	; 0xfac <fputc+0x66>
     f5c:	22 ff       	sbrs	r18, 2
     f5e:	16 c0       	rjmp	.+44     	; 0xf8c <fputc+0x46>
     f60:	46 81       	ldd	r20, Z+6	; 0x06
     f62:	57 81       	ldd	r21, Z+7	; 0x07
     f64:	24 81       	ldd	r18, Z+4	; 0x04
     f66:	35 81       	ldd	r19, Z+5	; 0x05
     f68:	42 17       	cp	r20, r18
     f6a:	53 07       	cpc	r21, r19
     f6c:	44 f4       	brge	.+16     	; 0xf7e <fputc+0x38>
     f6e:	a0 81       	ld	r26, Z
     f70:	b1 81       	ldd	r27, Z+1	; 0x01
     f72:	9d 01       	movw	r18, r26
     f74:	2f 5f       	subi	r18, 0xFF	; 255
     f76:	3f 4f       	sbci	r19, 0xFF	; 255
     f78:	31 83       	std	Z+1, r19	; 0x01
     f7a:	20 83       	st	Z, r18
     f7c:	8c 93       	st	X, r24
     f7e:	26 81       	ldd	r18, Z+6	; 0x06
     f80:	37 81       	ldd	r19, Z+7	; 0x07
     f82:	2f 5f       	subi	r18, 0xFF	; 255
     f84:	3f 4f       	sbci	r19, 0xFF	; 255
     f86:	37 83       	std	Z+7, r19	; 0x07
     f88:	26 83       	std	Z+6, r18	; 0x06
     f8a:	10 c0       	rjmp	.+32     	; 0xfac <fputc+0x66>
     f8c:	eb 01       	movw	r28, r22
     f8e:	09 2f       	mov	r16, r25
     f90:	18 2f       	mov	r17, r24
     f92:	00 84       	ldd	r0, Z+8	; 0x08
     f94:	f1 85       	ldd	r31, Z+9	; 0x09
     f96:	e0 2d       	mov	r30, r0
     f98:	09 95       	icall
     f9a:	89 2b       	or	r24, r25
     f9c:	e1 f6       	brne	.-72     	; 0xf56 <fputc+0x10>
     f9e:	8e 81       	ldd	r24, Y+6	; 0x06
     fa0:	9f 81       	ldd	r25, Y+7	; 0x07
     fa2:	01 96       	adiw	r24, 0x01	; 1
     fa4:	9f 83       	std	Y+7, r25	; 0x07
     fa6:	8e 83       	std	Y+6, r24	; 0x06
     fa8:	81 2f       	mov	r24, r17
     faa:	90 2f       	mov	r25, r16
     fac:	df 91       	pop	r29
     fae:	cf 91       	pop	r28
     fb0:	1f 91       	pop	r17
     fb2:	0f 91       	pop	r16
     fb4:	08 95       	ret

00000fb6 <__ultoa_invert>:
     fb6:	fa 01       	movw	r30, r20
     fb8:	aa 27       	eor	r26, r26
     fba:	28 30       	cpi	r18, 0x08	; 8
     fbc:	51 f1       	breq	.+84     	; 0x1012 <__ultoa_invert+0x5c>
     fbe:	20 31       	cpi	r18, 0x10	; 16
     fc0:	81 f1       	breq	.+96     	; 0x1022 <__ultoa_invert+0x6c>
     fc2:	e8 94       	clt
     fc4:	6f 93       	push	r22
     fc6:	6e 7f       	andi	r22, 0xFE	; 254
     fc8:	6e 5f       	subi	r22, 0xFE	; 254
     fca:	7f 4f       	sbci	r23, 0xFF	; 255
     fcc:	8f 4f       	sbci	r24, 0xFF	; 255
     fce:	9f 4f       	sbci	r25, 0xFF	; 255
     fd0:	af 4f       	sbci	r26, 0xFF	; 255
     fd2:	b1 e0       	ldi	r27, 0x01	; 1
     fd4:	3e d0       	rcall	.+124    	; 0x1052 <__ultoa_invert+0x9c>
     fd6:	b4 e0       	ldi	r27, 0x04	; 4
     fd8:	3c d0       	rcall	.+120    	; 0x1052 <__ultoa_invert+0x9c>
     fda:	67 0f       	add	r22, r23
     fdc:	78 1f       	adc	r23, r24
     fde:	89 1f       	adc	r24, r25
     fe0:	9a 1f       	adc	r25, r26
     fe2:	a1 1d       	adc	r26, r1
     fe4:	68 0f       	add	r22, r24
     fe6:	79 1f       	adc	r23, r25
     fe8:	8a 1f       	adc	r24, r26
     fea:	91 1d       	adc	r25, r1
     fec:	a1 1d       	adc	r26, r1
     fee:	6a 0f       	add	r22, r26
     ff0:	71 1d       	adc	r23, r1
     ff2:	81 1d       	adc	r24, r1
     ff4:	91 1d       	adc	r25, r1
     ff6:	a1 1d       	adc	r26, r1
     ff8:	20 d0       	rcall	.+64     	; 0x103a <__ultoa_invert+0x84>
     ffa:	09 f4       	brne	.+2      	; 0xffe <__ultoa_invert+0x48>
     ffc:	68 94       	set
     ffe:	3f 91       	pop	r19
    1000:	2a e0       	ldi	r18, 0x0A	; 10
    1002:	26 9f       	mul	r18, r22
    1004:	11 24       	eor	r1, r1
    1006:	30 19       	sub	r19, r0
    1008:	30 5d       	subi	r19, 0xD0	; 208
    100a:	31 93       	st	Z+, r19
    100c:	de f6       	brtc	.-74     	; 0xfc4 <__ultoa_invert+0xe>
    100e:	cf 01       	movw	r24, r30
    1010:	08 95       	ret
    1012:	46 2f       	mov	r20, r22
    1014:	47 70       	andi	r20, 0x07	; 7
    1016:	40 5d       	subi	r20, 0xD0	; 208
    1018:	41 93       	st	Z+, r20
    101a:	b3 e0       	ldi	r27, 0x03	; 3
    101c:	0f d0       	rcall	.+30     	; 0x103c <__ultoa_invert+0x86>
    101e:	c9 f7       	brne	.-14     	; 0x1012 <__ultoa_invert+0x5c>
    1020:	f6 cf       	rjmp	.-20     	; 0x100e <__ultoa_invert+0x58>
    1022:	46 2f       	mov	r20, r22
    1024:	4f 70       	andi	r20, 0x0F	; 15
    1026:	40 5d       	subi	r20, 0xD0	; 208
    1028:	4a 33       	cpi	r20, 0x3A	; 58
    102a:	18 f0       	brcs	.+6      	; 0x1032 <__ultoa_invert+0x7c>
    102c:	49 5d       	subi	r20, 0xD9	; 217
    102e:	31 fd       	sbrc	r19, 1
    1030:	40 52       	subi	r20, 0x20	; 32
    1032:	41 93       	st	Z+, r20
    1034:	02 d0       	rcall	.+4      	; 0x103a <__ultoa_invert+0x84>
    1036:	a9 f7       	brne	.-22     	; 0x1022 <__ultoa_invert+0x6c>
    1038:	ea cf       	rjmp	.-44     	; 0x100e <__ultoa_invert+0x58>
    103a:	b4 e0       	ldi	r27, 0x04	; 4
    103c:	a6 95       	lsr	r26
    103e:	97 95       	ror	r25
    1040:	87 95       	ror	r24
    1042:	77 95       	ror	r23
    1044:	67 95       	ror	r22
    1046:	ba 95       	dec	r27
    1048:	c9 f7       	brne	.-14     	; 0x103c <__ultoa_invert+0x86>
    104a:	00 97       	sbiw	r24, 0x00	; 0
    104c:	61 05       	cpc	r22, r1
    104e:	71 05       	cpc	r23, r1
    1050:	08 95       	ret
    1052:	9b 01       	movw	r18, r22
    1054:	ac 01       	movw	r20, r24
    1056:	0a 2e       	mov	r0, r26
    1058:	06 94       	lsr	r0
    105a:	57 95       	ror	r21
    105c:	47 95       	ror	r20
    105e:	37 95       	ror	r19
    1060:	27 95       	ror	r18
    1062:	ba 95       	dec	r27
    1064:	c9 f7       	brne	.-14     	; 0x1058 <__ultoa_invert+0xa2>
    1066:	62 0f       	add	r22, r18
    1068:	73 1f       	adc	r23, r19
    106a:	84 1f       	adc	r24, r20
    106c:	95 1f       	adc	r25, r21
    106e:	a0 1d       	adc	r26, r0
    1070:	08 95       	ret

00001072 <__prologue_saves__>:
    1072:	2f 92       	push	r2
    1074:	3f 92       	push	r3
    1076:	4f 92       	push	r4
    1078:	5f 92       	push	r5
    107a:	6f 92       	push	r6
    107c:	7f 92       	push	r7
    107e:	8f 92       	push	r8
    1080:	9f 92       	push	r9
    1082:	af 92       	push	r10
    1084:	bf 92       	push	r11
    1086:	cf 92       	push	r12
    1088:	df 92       	push	r13
    108a:	ef 92       	push	r14
    108c:	ff 92       	push	r15
    108e:	0f 93       	push	r16
    1090:	1f 93       	push	r17
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	ca 1b       	sub	r28, r26
    109c:	db 0b       	sbc	r29, r27
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	de bf       	out	0x3e, r29	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	cd bf       	out	0x3d, r28	; 61
    10a8:	09 94       	ijmp

000010aa <__epilogue_restores__>:
    10aa:	2a 88       	ldd	r2, Y+18	; 0x12
    10ac:	39 88       	ldd	r3, Y+17	; 0x11
    10ae:	48 88       	ldd	r4, Y+16	; 0x10
    10b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    10b2:	6e 84       	ldd	r6, Y+14	; 0x0e
    10b4:	7d 84       	ldd	r7, Y+13	; 0x0d
    10b6:	8c 84       	ldd	r8, Y+12	; 0x0c
    10b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    10ba:	aa 84       	ldd	r10, Y+10	; 0x0a
    10bc:	b9 84       	ldd	r11, Y+9	; 0x09
    10be:	c8 84       	ldd	r12, Y+8	; 0x08
    10c0:	df 80       	ldd	r13, Y+7	; 0x07
    10c2:	ee 80       	ldd	r14, Y+6	; 0x06
    10c4:	fd 80       	ldd	r15, Y+5	; 0x05
    10c6:	0c 81       	ldd	r16, Y+4	; 0x04
    10c8:	1b 81       	ldd	r17, Y+3	; 0x03
    10ca:	aa 81       	ldd	r26, Y+2	; 0x02
    10cc:	b9 81       	ldd	r27, Y+1	; 0x01
    10ce:	ce 0f       	add	r28, r30
    10d0:	d1 1d       	adc	r29, r1
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	f8 94       	cli
    10d6:	de bf       	out	0x3e, r29	; 62
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	cd bf       	out	0x3d, r28	; 61
    10dc:	ed 01       	movw	r28, r26
    10de:	08 95       	ret

000010e0 <_exit>:
    10e0:	f8 94       	cli

000010e2 <__stop_program>:
    10e2:	ff cf       	rjmp	.-2      	; 0x10e2 <__stop_program>
